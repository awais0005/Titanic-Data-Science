{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Importing libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir('/users/mohammadawais/desktop/ml data/titanic')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "train=pd.read_csv('titanic_train.csv')\n",
    "test=pd.read_csv('titanic_test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>777</th>\n",
       "      <td>778</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Emanuel, Miss. Virginia Ethel</td>\n",
       "      <td>female</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>364516</td>\n",
       "      <td>12.4750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>67</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Nye, Mrs. (Elizabeth Ramell)</td>\n",
       "      <td>female</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>C.A. 29395</td>\n",
       "      <td>10.5000</td>\n",
       "      <td>F33</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>675</th>\n",
       "      <td>676</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Edvardsson, Mr. Gustaf Hjalmar</td>\n",
       "      <td>male</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349912</td>\n",
       "      <td>7.7750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>88</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Slocovski, Mr. Selman Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SOTON/OQ 392086</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Vestrom, Miss. Hulda Amanda Adolfina</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>350406</td>\n",
       "      <td>7.8542</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>372</th>\n",
       "      <td>373</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Beavan, Mr. William Thomas</td>\n",
       "      <td>male</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>323951</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>552</th>\n",
       "      <td>553</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>O'Brien, Mr. Timothy</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330979</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>474</th>\n",
       "      <td>475</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Strandberg, Miss. Ida Sofia</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7553</td>\n",
       "      <td>9.8375</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>342</th>\n",
       "      <td>343</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Collander, Mr. Erik Gustaf</td>\n",
       "      <td>male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>248740</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                                  Name  \\\n",
       "777          778         1       3         Emanuel, Miss. Virginia Ethel   \n",
       "66            67         1       2          Nye, Mrs. (Elizabeth Ramell)   \n",
       "675          676         0       3        Edvardsson, Mr. Gustaf Hjalmar   \n",
       "87            88         0       3         Slocovski, Mr. Selman Francis   \n",
       "14            15         0       3  Vestrom, Miss. Hulda Amanda Adolfina   \n",
       "372          373         0       3            Beavan, Mr. William Thomas   \n",
       "552          553         0       3                  O'Brien, Mr. Timothy   \n",
       "886          887         0       2                 Montvila, Rev. Juozas   \n",
       "474          475         0       3           Strandberg, Miss. Ida Sofia   \n",
       "342          343         0       2            Collander, Mr. Erik Gustaf   \n",
       "\n",
       "        Sex   Age  SibSp  Parch           Ticket     Fare Cabin Embarked  \n",
       "777  female   5.0      0      0           364516  12.4750   NaN        S  \n",
       "66   female  29.0      0      0       C.A. 29395  10.5000   F33        S  \n",
       "675    male  18.0      0      0           349912   7.7750   NaN        S  \n",
       "87     male   NaN      0      0  SOTON/OQ 392086   8.0500   NaN        S  \n",
       "14   female  14.0      0      0           350406   7.8542   NaN        S  \n",
       "372    male  19.0      0      0           323951   8.0500   NaN        S  \n",
       "552    male   NaN      0      0           330979   7.8292   NaN        Q  \n",
       "886    male  27.0      0      0           211536  13.0000   NaN        S  \n",
       "474  female  22.0      0      0             7553   9.8375   NaN        S  \n",
       "342    male  28.0      0      0           248740  13.0000   NaN        S  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>1009</td>\n",
       "      <td>3</td>\n",
       "      <td>Sandstrom, Miss. Beatrice Irene</td>\n",
       "      <td>female</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>PP 9549</td>\n",
       "      <td>16.7000</td>\n",
       "      <td>G6</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>936</td>\n",
       "      <td>1</td>\n",
       "      <td>Kimball, Mrs. Edwin Nelson Jr (Gertrude Parsons)</td>\n",
       "      <td>female</td>\n",
       "      <td>45.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11753</td>\n",
       "      <td>52.5542</td>\n",
       "      <td>D19</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274</th>\n",
       "      <td>1166</td>\n",
       "      <td>3</td>\n",
       "      <td>Saade, Mr. Jean Nassr</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2676</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>368</th>\n",
       "      <td>1260</td>\n",
       "      <td>1</td>\n",
       "      <td>Gibson, Mrs. Leonard (Pauline C Boeson)</td>\n",
       "      <td>female</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>112378</td>\n",
       "      <td>59.4000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>938</td>\n",
       "      <td>1</td>\n",
       "      <td>Chevre, Mr. Paul Romaine</td>\n",
       "      <td>male</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17594</td>\n",
       "      <td>29.7000</td>\n",
       "      <td>A9</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>343</th>\n",
       "      <td>1235</td>\n",
       "      <td>1</td>\n",
       "      <td>Cardeza, Mrs. James Warburton Martinez (Charlo...</td>\n",
       "      <td>female</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>PC 17755</td>\n",
       "      <td>512.3292</td>\n",
       "      <td>B51 B53 B55</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238</th>\n",
       "      <td>1130</td>\n",
       "      <td>2</td>\n",
       "      <td>Hiltunen, Miss. Marta</td>\n",
       "      <td>female</td>\n",
       "      <td>18.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>250650</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160</th>\n",
       "      <td>1052</td>\n",
       "      <td>3</td>\n",
       "      <td>Smyth, Miss. Julia</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>335432</td>\n",
       "      <td>7.7333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>1090</td>\n",
       "      <td>2</td>\n",
       "      <td>Baimbrigge, Mr. Charles Robert</td>\n",
       "      <td>male</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>C.A. 31030</td>\n",
       "      <td>10.5000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Pclass                                               Name  \\\n",
       "2            894       2                          Myles, Mr. Thomas Francis   \n",
       "117         1009       3                    Sandstrom, Miss. Beatrice Irene   \n",
       "44           936       1   Kimball, Mrs. Edwin Nelson Jr (Gertrude Parsons)   \n",
       "274         1166       3                              Saade, Mr. Jean Nassr   \n",
       "368         1260       1            Gibson, Mrs. Leonard (Pauline C Boeson)   \n",
       "46           938       1                           Chevre, Mr. Paul Romaine   \n",
       "343         1235       1  Cardeza, Mrs. James Warburton Martinez (Charlo...   \n",
       "238         1130       2                              Hiltunen, Miss. Marta   \n",
       "160         1052       3                                 Smyth, Miss. Julia   \n",
       "198         1090       2                     Baimbrigge, Mr. Charles Robert   \n",
       "\n",
       "        Sex   Age  SibSp  Parch      Ticket      Fare        Cabin Embarked  \n",
       "2      male  62.0      0      0      240276    9.6875          NaN        Q  \n",
       "117  female   1.0      1      1     PP 9549   16.7000           G6        S  \n",
       "44   female  45.0      1      0       11753   52.5542          D19        S  \n",
       "274    male   NaN      0      0        2676    7.2250          NaN        C  \n",
       "368  female  45.0      0      1      112378   59.4000          NaN        C  \n",
       "46     male  45.0      0      0    PC 17594   29.7000           A9        C  \n",
       "343  female  58.0      0      1    PC 17755  512.3292  B51 B53 B55        C  \n",
       "238  female  18.0      1      1      250650   13.0000          NaN        S  \n",
       "160  female   NaN      0      0      335432    7.7333          NaN        Q  \n",
       "198    male  23.0      0      0  C.A. 31030   10.5000          NaN        S  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(891, 12)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.info of      PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "..           ...       ...     ...   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                  Name     Sex   Age  SibSp  \\\n",
       "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                             Allen, Mr. William Henry    male  35.0      0   \n",
       "..                                                 ...     ...   ...    ...   \n",
       "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
       "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
       "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
       "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
       "\n",
       "     Parch            Ticket     Fare Cabin Embarked  \n",
       "0        0         A/5 21171   7.2500   NaN        S  \n",
       "1        0          PC 17599  71.2833   C85        C  \n",
       "2        0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3        0            113803  53.1000  C123        S  \n",
       "4        0            373450   8.0500   NaN        S  \n",
       "..     ...               ...      ...   ...      ...  \n",
       "886      0            211536  13.0000   NaN        S  \n",
       "887      0            112053  30.0000   B42        S  \n",
       "888      2        W./C. 6607  23.4500   NaN        S  \n",
       "889      0            111369  30.0000  C148        C  \n",
       "890      0            370376   7.7500   NaN        Q  \n",
       "\n",
       "[891 rows x 12 columns]>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(train.shape)\n",
    "train.info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(418, 11)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.info of      PassengerId  Pclass                                          Name  \\\n",
       "0            892       3                              Kelly, Mr. James   \n",
       "1            893       3              Wilkes, Mrs. James (Ellen Needs)   \n",
       "2            894       2                     Myles, Mr. Thomas Francis   \n",
       "3            895       3                              Wirz, Mr. Albert   \n",
       "4            896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)   \n",
       "..           ...     ...                                           ...   \n",
       "413         1305       3                            Spector, Mr. Woolf   \n",
       "414         1306       1                  Oliva y Ocana, Dona. Fermina   \n",
       "415         1307       3                  Saether, Mr. Simon Sivertsen   \n",
       "416         1308       3                           Ware, Mr. Frederick   \n",
       "417         1309       3                      Peter, Master. Michael J   \n",
       "\n",
       "        Sex   Age  SibSp  Parch              Ticket      Fare Cabin Embarked  \n",
       "0      male  34.5      0      0              330911    7.8292   NaN        Q  \n",
       "1    female  47.0      1      0              363272    7.0000   NaN        S  \n",
       "2      male  62.0      0      0              240276    9.6875   NaN        Q  \n",
       "3      male  27.0      0      0              315154    8.6625   NaN        S  \n",
       "4    female  22.0      1      1             3101298   12.2875   NaN        S  \n",
       "..      ...   ...    ...    ...                 ...       ...   ...      ...  \n",
       "413    male   NaN      0      0           A.5. 3236    8.0500   NaN        S  \n",
       "414  female  39.0      0      0            PC 17758  108.9000  C105        C  \n",
       "415    male  38.5      0      0  SOTON/O.Q. 3101262    7.2500   NaN        S  \n",
       "416    male   NaN      0      0              359309    8.0500   NaN        S  \n",
       "417    male   NaN      1      1                2668   22.3583   NaN        C  \n",
       "\n",
       "[418 rows x 11 columns]>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(test.shape)\n",
    "test.info"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "passengerid=test.PassengerId"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def missing_values(df):\n",
    "    total=df.isnull().sum().sort_values(ascending=False)\n",
    "    percent = round(df.isnull().sum().sort_values(ascending = False)/len(df)*100,4)\n",
    "    return pd.concat([total, percent], axis=1, keys=['Total','Percent'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>687</td>\n",
       "      <td>77.1044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>177</td>\n",
       "      <td>19.8653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>2</td>\n",
       "      <td>0.2245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Total  Percent\n",
       "Cabin          687  77.1044\n",
       "Age            177  19.8653\n",
       "Embarked         2   0.2245\n",
       "Fare             0   0.0000\n",
       "Ticket           0   0.0000\n",
       "Parch            0   0.0000\n",
       "SibSp            0   0.0000\n",
       "Sex              0   0.0000\n",
       "Name             0   0.0000\n",
       "Pclass           0   0.0000\n",
       "Survived         0   0.0000\n",
       "PassengerId      0   0.0000"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>327</td>\n",
       "      <td>78.2297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>86</td>\n",
       "      <td>20.5742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>1</td>\n",
       "      <td>0.2392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Total  Percent\n",
       "Cabin          327  78.2297\n",
       "Age             86  20.5742\n",
       "Fare             1   0.2392\n",
       "Embarked         0   0.0000\n",
       "Ticket           0   0.0000\n",
       "Parch            0   0.0000\n",
       "SibSp            0   0.0000\n",
       "Sex              0   0.0000\n",
       "Name             0   0.0000\n",
       "Pclass           0   0.0000\n",
       "PassengerId      0   0.0000"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values(test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### embarked feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>S</th>\n",
       "      <td>644</td>\n",
       "      <td>72.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>168</td>\n",
       "      <td>18.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Q</th>\n",
       "      <td>77</td>\n",
       "      <td>8.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NaN</th>\n",
       "      <td>2</td>\n",
       "      <td>0.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Total  Percent\n",
       "S      644    72.28\n",
       "C      168    18.86\n",
       "Q       77     8.64\n",
       "NaN      2     0.22"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def percent_value_counts(df, feature):\n",
    "    \"\"\"This function takes in a dataframe and a column and finds the percentage of the value_counts\"\"\"\n",
    "    percent = pd.DataFrame(round(df.loc[:,feature].value_counts(dropna=False, normalize=True)*100,2))\n",
    "    ## creating a df with th\n",
    "    total = pd.DataFrame(df.loc[:,feature].value_counts(dropna=False))\n",
    "    ## concating percent and total dataframe\n",
    "\n",
    "    total.columns = [\"Total\"]\n",
    "    percent.columns = ['Percent']\n",
    "    return pd.concat([total, percent], axis = 1)\n",
    "percent_value_counts(train,'Embarked')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>62</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Icard, Miss. Amelie</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113572</td>\n",
       "      <td>80.0</td>\n",
       "      <td>B28</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>829</th>\n",
       "      <td>830</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Stone, Mrs. George Nelson (Martha Evelyn)</td>\n",
       "      <td>female</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113572</td>\n",
       "      <td>80.0</td>\n",
       "      <td>B28</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                                       Name  \\\n",
       "61            62         1       1                        Icard, Miss. Amelie   \n",
       "829          830         1       1  Stone, Mrs. George Nelson (Martha Evelyn)   \n",
       "\n",
       "        Sex   Age  SibSp  Parch  Ticket  Fare Cabin Embarked  \n",
       "61   female  38.0      0      0  113572  80.0   B28      NaN  \n",
       "829  female  62.0      0      0  113572  80.0   B28      NaN  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[train.Embarked.isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Test Set')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x864 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "sns.set_style('darkgrid')\n",
    "fig, ax = plt.subplots(figsize=(16,12),ncols=2)\n",
    "ax1 = sns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Pclass\", data=train, ax = ax[0]);\n",
    "ax2 = sns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Pclass\", data=test, ax = ax[1]);\n",
    "ax1.set_title(\"Training Set\", fontsize = 18)\n",
    "ax2.set_title('Test Set',  fontsize = 18)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "train.Embarked.fillna('C',inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>687</td>\n",
       "      <td>77.1044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>177</td>\n",
       "      <td>19.8653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Total  Percent\n",
       "Cabin          687  77.1044\n",
       "Age            177  19.8653\n",
       "Embarked         0   0.0000\n",
       "Fare             0   0.0000\n",
       "Ticket           0   0.0000\n",
       "Parch            0   0.0000\n",
       "SibSp            0   0.0000\n",
       "Sex              0   0.0000\n",
       "Name             0   0.0000\n",
       "Pclass           0   0.0000\n",
       "Survived         0   0.0000\n",
       "PassengerId      0   0.0000"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values(train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### cabin feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7710437710437711\n",
      "0.7822966507177034\n"
     ]
    }
   ],
   "source": [
    "print(train.Cabin.isnull().sum()/len(train.Cabin))\n",
    "print(test.Cabin.isnull().sum()/len(test.Cabin))"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Survivers=train.Survived"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "train.drop(['Survived'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "all_data = pd.concat([train,test], ignore_index=False)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "all_data.Cabin.fillna(\"N\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>687</td>\n",
       "      <td>77.1044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>177</td>\n",
       "      <td>19.8653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Total  Percent\n",
       "Cabin          687  77.1044\n",
       "Age            177  19.8653\n",
       "Embarked         0   0.0000\n",
       "Fare             0   0.0000\n",
       "Ticket           0   0.0000\n",
       "Parch            0   0.0000\n",
       "SibSp            0   0.0000\n",
       "Sex              0   0.0000\n",
       "Name             0   0.0000\n",
       "Pclass           0   0.0000\n",
       "Survived         0   0.0000\n",
       "PassengerId      0   0.0000"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values(train)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "all_data.Cabin = [i[0] for i in all_data.Cabin]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>687</td>\n",
       "      <td>77.1044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>177</td>\n",
       "      <td>19.8653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Total  Percent\n",
       "Cabin          687  77.1044\n",
       "Age            177  19.8653\n",
       "Embarked         0   0.0000\n",
       "Fare             0   0.0000\n",
       "Ticket           0   0.0000\n",
       "Parch            0   0.0000\n",
       "SibSp            0   0.0000\n",
       "Sex              0   0.0000\n",
       "Name             0   0.0000\n",
       "Pclass           0   0.0000\n",
       "Survived         0   0.0000\n",
       "PassengerId      0   0.0000"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values(train)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "percent_value_counts(all_data, \"Cabin\")"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "all_data.groupby(\"Cabin\")['Fare'].mean().sort_values()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "def cabin_estimator(i):\n",
    "    \"\"\"Grouping cabin feature by the first letter\"\"\"\n",
    "    a = 0\n",
    "    if i<16:\n",
    "        a = \"G\"\n",
    "    elif i>=16 and i<27:\n",
    "        a = \"F\"\n",
    "    elif i>=27 and i<38:\n",
    "        a = \"T\"\n",
    "    elif i>=38 and i<47:\n",
    "        a = \"A\"\n",
    "    elif i>= 47 and i<53:\n",
    "        a = \"E\"\n",
    "    elif i>= 53 and i<54:\n",
    "        a = \"D\"\n",
    "    elif i>=54 and i<116:\n",
    "        a = 'C'\n",
    "    else:\n",
    "        a = \"B\"\n",
    "    return a\n",
    "    "
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "##applying cabin estimator function. \n",
    "with_N['Cabin'] = with_N.Fare.apply(lambda x: cabin_estimator(x))\n",
    "\n",
    "## getting back train. \n",
    "all_data = pd.concat([with_N, without_N], axis=0)\n",
    "\n",
    "## PassengerId helps us separate train and test. \n",
    "all_data.sort_values(by = 'PassengerId', inplace=True)\n",
    "\n",
    "## Separating train and test from all_data. \n",
    "train = all_data[:891]\n",
    "\n",
    "test = all_data[891:]\n",
    "\n",
    "# adding saved target variable with train. \n",
    "train['Survived'] = Survivers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "train.Cabin.fillna('N',inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Moran, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330877</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>McCarthy, Mr. Timothy J</td>\n",
       "      <td>male</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17463</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>E46</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Master. Gosta Leonard</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>349909</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>347742</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>237736</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Sandstrom, Miss. Marguerite Rut</td>\n",
       "      <td>female</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>PP 9549</td>\n",
       "      <td>16.7000</td>\n",
       "      <td>G6</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Bonnell, Miss. Elizabeth</td>\n",
       "      <td>female</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113783</td>\n",
       "      <td>26.5500</td>\n",
       "      <td>C103</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Saundercock, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5. 2151</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Andersson, Mr. Anders Johan</td>\n",
       "      <td>male</td>\n",
       "      <td>39.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>347082</td>\n",
       "      <td>31.2750</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Vestrom, Miss. Hulda Amanda Adolfina</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>350406</td>\n",
       "      <td>7.8542</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Hewlett, Mrs. (Mary D Kingcome)</td>\n",
       "      <td>female</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>248706</td>\n",
       "      <td>16.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Rice, Master. Eugene</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>382652</td>\n",
       "      <td>29.1250</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Williams, Mr. Charles Eugene</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>244373</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Vander Planke, Mrs. Julius (Emelia Maria Vande...</td>\n",
       "      <td>female</td>\n",
       "      <td>31.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>345763</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Masselmani, Mrs. Fatima</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2649</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Fynney, Mr. Joseph J</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>239865</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Beesley, Mr. Lawrence</td>\n",
       "      <td>male</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>248698</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>D56</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>McGowan, Miss. Anna \"Annie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330923</td>\n",
       "      <td>8.0292</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Sloper, Mr. William Thompson</td>\n",
       "      <td>male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113788</td>\n",
       "      <td>35.5000</td>\n",
       "      <td>A6</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Miss. Torborg Danira</td>\n",
       "      <td>female</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>349909</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Asplund, Mrs. Carl Oscar (Selma Augusta Emilia...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>347077</td>\n",
       "      <td>31.3875</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Emir, Mr. Farred Chehab</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2631</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Fortune, Mr. Charles Alexander</td>\n",
       "      <td>male</td>\n",
       "      <td>19.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>19950</td>\n",
       "      <td>263.0000</td>\n",
       "      <td>C23 C25 C27</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>O'Dwyer, Miss. Ellen \"Nellie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330959</td>\n",
       "      <td>7.8792</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Todoroff, Mr. Lalio</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349216</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>861</th>\n",
       "      <td>862</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Giles, Mr. Frederick Edward</td>\n",
       "      <td>male</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28134</td>\n",
       "      <td>11.5000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>862</th>\n",
       "      <td>863</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Swift, Mrs. Frederick Joel (Margaret Welles Ba...</td>\n",
       "      <td>female</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17466</td>\n",
       "      <td>25.9292</td>\n",
       "      <td>D17</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>863</th>\n",
       "      <td>864</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sage, Miss. Dorothy Edith \"Dolly\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>CA. 2343</td>\n",
       "      <td>69.5500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>864</th>\n",
       "      <td>865</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Gill, Mr. John William</td>\n",
       "      <td>male</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>233866</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>865</th>\n",
       "      <td>866</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Bystrom, Mrs. (Karolina)</td>\n",
       "      <td>female</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>236852</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>866</th>\n",
       "      <td>867</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Duran y More, Miss. Asuncion</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>SC/PARIS 2149</td>\n",
       "      <td>13.8583</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>867</th>\n",
       "      <td>868</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Roebling, Mr. Washington Augustus II</td>\n",
       "      <td>male</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17590</td>\n",
       "      <td>50.4958</td>\n",
       "      <td>A24</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>868</th>\n",
       "      <td>869</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>van Melkebeke, Mr. Philemon</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>345777</td>\n",
       "      <td>9.5000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>870</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Master. Harold Theodor</td>\n",
       "      <td>male</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>347742</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>870</th>\n",
       "      <td>871</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Balkic, Mr. Cerin</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349248</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>871</th>\n",
       "      <td>872</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Beckwith, Mrs. Richard Leonard (Sallie Monypeny)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>11751</td>\n",
       "      <td>52.5542</td>\n",
       "      <td>D35</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>872</th>\n",
       "      <td>873</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Carlsson, Mr. Frans Olof</td>\n",
       "      <td>male</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>695</td>\n",
       "      <td>5.0000</td>\n",
       "      <td>B51 B53 B55</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>873</th>\n",
       "      <td>874</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Vander Cruyssen, Mr. Victor</td>\n",
       "      <td>male</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>345765</td>\n",
       "      <td>9.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>874</th>\n",
       "      <td>875</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Abelson, Mrs. Samuel (Hannah Wizosky)</td>\n",
       "      <td>female</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>P/PP 3381</td>\n",
       "      <td>24.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>875</th>\n",
       "      <td>876</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Najib, Miss. Adele Kiamie \"Jane\"</td>\n",
       "      <td>female</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2667</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>876</th>\n",
       "      <td>877</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Gustafsson, Mr. Alfred Ossian</td>\n",
       "      <td>male</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7534</td>\n",
       "      <td>9.8458</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>877</th>\n",
       "      <td>878</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Petroff, Mr. Nedelio</td>\n",
       "      <td>male</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349212</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>878</th>\n",
       "      <td>879</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Laleff, Mr. Kristo</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349217</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>879</th>\n",
       "      <td>880</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)</td>\n",
       "      <td>female</td>\n",
       "      <td>56.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>11767</td>\n",
       "      <td>83.1583</td>\n",
       "      <td>C50</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>881</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Shelley, Mrs. William (Imanita Parrish Hall)</td>\n",
       "      <td>female</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>230433</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>881</th>\n",
       "      <td>882</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Markun, Mr. Johann</td>\n",
       "      <td>male</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349257</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>882</th>\n",
       "      <td>883</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dahlberg, Miss. Gerda Ulrika</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7552</td>\n",
       "      <td>10.5167</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>883</th>\n",
       "      <td>884</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Banfield, Mr. Frederick James</td>\n",
       "      <td>male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>C.A./SOTON 34068</td>\n",
       "      <td>10.5000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>884</th>\n",
       "      <td>885</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sutehall, Mr. Henry Jr</td>\n",
       "      <td>male</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SOTON/OQ 392076</td>\n",
       "      <td>7.0500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>885</th>\n",
       "      <td>886</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Rice, Mrs. William (Margaret Norton)</td>\n",
       "      <td>female</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>382652</td>\n",
       "      <td>29.1250</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "..           ...       ...     ...   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                  Name     Sex   Age  SibSp  \\\n",
       "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                             Allen, Mr. William Henry    male  35.0      0   \n",
       "..                                                 ...     ...   ...    ...   \n",
       "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
       "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
       "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
       "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
       "\n",
       "     Parch            Ticket     Fare Cabin Embarked  \n",
       "0        0         A/5 21171   7.2500     N        S  \n",
       "1        0          PC 17599  71.2833   C85        C  \n",
       "2        0  STON/O2. 3101282   7.9250     N        S  \n",
       "3        0            113803  53.1000  C123        S  \n",
       "4        0            373450   8.0500     N        S  \n",
       "..     ...               ...      ...   ...      ...  \n",
       "886      0            211536  13.0000     N        S  \n",
       "887      0            112053  30.0000   B42        S  \n",
       "888      2        W./C. 6607  23.4500     N        S  \n",
       "889      0            111369  30.0000  C148        C  \n",
       "890      0            370376   7.7500     N        Q  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "test.Cabin.fillna('N',inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>897</td>\n",
       "      <td>3</td>\n",
       "      <td>Svensson, Mr. Johan Cervin</td>\n",
       "      <td>male</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7538</td>\n",
       "      <td>9.2250</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>898</td>\n",
       "      <td>3</td>\n",
       "      <td>Connolly, Miss. Kate</td>\n",
       "      <td>female</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330972</td>\n",
       "      <td>7.6292</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>899</td>\n",
       "      <td>2</td>\n",
       "      <td>Caldwell, Mr. Albert Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>248738</td>\n",
       "      <td>29.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>900</td>\n",
       "      <td>3</td>\n",
       "      <td>Abrahim, Mrs. Joseph (Sophie Halaut Easu)</td>\n",
       "      <td>female</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2657</td>\n",
       "      <td>7.2292</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>901</td>\n",
       "      <td>3</td>\n",
       "      <td>Davies, Mr. John Samuel</td>\n",
       "      <td>male</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>A/4 48871</td>\n",
       "      <td>24.1500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>902</td>\n",
       "      <td>3</td>\n",
       "      <td>Ilieff, Mr. Ylio</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349220</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>903</td>\n",
       "      <td>1</td>\n",
       "      <td>Jones, Mr. Charles Cresson</td>\n",
       "      <td>male</td>\n",
       "      <td>46.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>694</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>904</td>\n",
       "      <td>1</td>\n",
       "      <td>Snyder, Mrs. John Pillsbury (Nelle Stevenson)</td>\n",
       "      <td>female</td>\n",
       "      <td>23.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21228</td>\n",
       "      <td>82.2667</td>\n",
       "      <td>B45</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>905</td>\n",
       "      <td>2</td>\n",
       "      <td>Howard, Mr. Benjamin</td>\n",
       "      <td>male</td>\n",
       "      <td>63.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>24065</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>906</td>\n",
       "      <td>1</td>\n",
       "      <td>Chaffee, Mrs. Herbert Fuller (Carrie Constance...</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>W.E.P. 5734</td>\n",
       "      <td>61.1750</td>\n",
       "      <td>E31</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>907</td>\n",
       "      <td>2</td>\n",
       "      <td>del Carlo, Mrs. Sebastiano (Argenia Genovesi)</td>\n",
       "      <td>female</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>SC/PARIS 2167</td>\n",
       "      <td>27.7208</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>908</td>\n",
       "      <td>2</td>\n",
       "      <td>Keane, Mr. Daniel</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>233734</td>\n",
       "      <td>12.3500</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>909</td>\n",
       "      <td>3</td>\n",
       "      <td>Assaf, Mr. Gerios</td>\n",
       "      <td>male</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2692</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>910</td>\n",
       "      <td>3</td>\n",
       "      <td>Ilmakangas, Miss. Ida Livija</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101270</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>911</td>\n",
       "      <td>3</td>\n",
       "      <td>Assaf Khalil, Mrs. Mariana (Miriam\")\"</td>\n",
       "      <td>female</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2696</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>912</td>\n",
       "      <td>1</td>\n",
       "      <td>Rothschild, Mr. Martin</td>\n",
       "      <td>male</td>\n",
       "      <td>55.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17603</td>\n",
       "      <td>59.4000</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>913</td>\n",
       "      <td>3</td>\n",
       "      <td>Olsen, Master. Artur Karl</td>\n",
       "      <td>male</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>C 17368</td>\n",
       "      <td>3.1708</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>914</td>\n",
       "      <td>1</td>\n",
       "      <td>Flegenheim, Mrs. Alfred (Antoinette)</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17598</td>\n",
       "      <td>31.6833</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>915</td>\n",
       "      <td>1</td>\n",
       "      <td>Williams, Mr. Richard Norris II</td>\n",
       "      <td>male</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>PC 17597</td>\n",
       "      <td>61.3792</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>916</td>\n",
       "      <td>1</td>\n",
       "      <td>Ryerson, Mrs. Arthur Larned (Emily Maria Borie)</td>\n",
       "      <td>female</td>\n",
       "      <td>48.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>PC 17608</td>\n",
       "      <td>262.3750</td>\n",
       "      <td>B57 B59 B63 B66</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>917</td>\n",
       "      <td>3</td>\n",
       "      <td>Robins, Mr. Alexander A</td>\n",
       "      <td>male</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5. 3337</td>\n",
       "      <td>14.5000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>918</td>\n",
       "      <td>1</td>\n",
       "      <td>Ostby, Miss. Helene Ragnhild</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>113509</td>\n",
       "      <td>61.9792</td>\n",
       "      <td>B36</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>919</td>\n",
       "      <td>3</td>\n",
       "      <td>Daher, Mr. Shedid</td>\n",
       "      <td>male</td>\n",
       "      <td>22.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2698</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>920</td>\n",
       "      <td>1</td>\n",
       "      <td>Brady, Mr. John Bertram</td>\n",
       "      <td>male</td>\n",
       "      <td>41.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113054</td>\n",
       "      <td>30.5000</td>\n",
       "      <td>A21</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>921</td>\n",
       "      <td>3</td>\n",
       "      <td>Samaan, Mr. Elias</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2662</td>\n",
       "      <td>21.6792</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>388</th>\n",
       "      <td>1280</td>\n",
       "      <td>3</td>\n",
       "      <td>Canavan, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>364858</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>389</th>\n",
       "      <td>1281</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Master. Paul Folke</td>\n",
       "      <td>male</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>349909</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>390</th>\n",
       "      <td>1282</td>\n",
       "      <td>1</td>\n",
       "      <td>Payne, Mr. Vivian Ponsonby</td>\n",
       "      <td>male</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12749</td>\n",
       "      <td>93.5000</td>\n",
       "      <td>B24</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>391</th>\n",
       "      <td>1283</td>\n",
       "      <td>1</td>\n",
       "      <td>Lines, Mrs. Ernest H (Elizabeth Lindsey James)</td>\n",
       "      <td>female</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>PC 17592</td>\n",
       "      <td>39.4000</td>\n",
       "      <td>D28</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>392</th>\n",
       "      <td>1284</td>\n",
       "      <td>3</td>\n",
       "      <td>Abbott, Master. Eugene Joseph</td>\n",
       "      <td>male</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>C.A. 2673</td>\n",
       "      <td>20.2500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>393</th>\n",
       "      <td>1285</td>\n",
       "      <td>2</td>\n",
       "      <td>Gilbert, Mr. William</td>\n",
       "      <td>male</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>C.A. 30769</td>\n",
       "      <td>10.5000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>394</th>\n",
       "      <td>1286</td>\n",
       "      <td>3</td>\n",
       "      <td>Kink-Heilmann, Mr. Anton</td>\n",
       "      <td>male</td>\n",
       "      <td>29.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>315153</td>\n",
       "      <td>22.0250</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>395</th>\n",
       "      <td>1287</td>\n",
       "      <td>1</td>\n",
       "      <td>Smith, Mrs. Lucien Philip (Mary Eloise Hughes)</td>\n",
       "      <td>female</td>\n",
       "      <td>18.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13695</td>\n",
       "      <td>60.0000</td>\n",
       "      <td>C31</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>1288</td>\n",
       "      <td>3</td>\n",
       "      <td>Colbert, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>371109</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>1289</td>\n",
       "      <td>1</td>\n",
       "      <td>Frolicher-Stehli, Mrs. Maxmillian (Margaretha ...</td>\n",
       "      <td>female</td>\n",
       "      <td>48.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>13567</td>\n",
       "      <td>79.2000</td>\n",
       "      <td>B41</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>1290</td>\n",
       "      <td>3</td>\n",
       "      <td>Larsson-Rondberg, Mr. Edvard A</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>347065</td>\n",
       "      <td>7.7750</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>1291</td>\n",
       "      <td>3</td>\n",
       "      <td>Conlon, Mr. Thomas Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21332</td>\n",
       "      <td>7.7333</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400</th>\n",
       "      <td>1292</td>\n",
       "      <td>1</td>\n",
       "      <td>Bonnell, Miss. Caroline</td>\n",
       "      <td>female</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>36928</td>\n",
       "      <td>164.8667</td>\n",
       "      <td>C7</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>1293</td>\n",
       "      <td>2</td>\n",
       "      <td>Gale, Mr. Harry</td>\n",
       "      <td>male</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28664</td>\n",
       "      <td>21.0000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>402</th>\n",
       "      <td>1294</td>\n",
       "      <td>1</td>\n",
       "      <td>Gibson, Miss. Dorothy Winifred</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>112378</td>\n",
       "      <td>59.4000</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>403</th>\n",
       "      <td>1295</td>\n",
       "      <td>1</td>\n",
       "      <td>Carrau, Mr. Jose Pedro</td>\n",
       "      <td>male</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113059</td>\n",
       "      <td>47.1000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>404</th>\n",
       "      <td>1296</td>\n",
       "      <td>1</td>\n",
       "      <td>Frauenthal, Mr. Isaac Gerald</td>\n",
       "      <td>male</td>\n",
       "      <td>43.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>17765</td>\n",
       "      <td>27.7208</td>\n",
       "      <td>D40</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>405</th>\n",
       "      <td>1297</td>\n",
       "      <td>2</td>\n",
       "      <td>Nourney, Mr. Alfred (Baron von Drachstedt\")\"</td>\n",
       "      <td>male</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SC/PARIS 2166</td>\n",
       "      <td>13.8625</td>\n",
       "      <td>D38</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>406</th>\n",
       "      <td>1298</td>\n",
       "      <td>2</td>\n",
       "      <td>Ware, Mr. William Jeffery</td>\n",
       "      <td>male</td>\n",
       "      <td>23.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28666</td>\n",
       "      <td>10.5000</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>407</th>\n",
       "      <td>1299</td>\n",
       "      <td>1</td>\n",
       "      <td>Widener, Mr. George Dunton</td>\n",
       "      <td>male</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>113503</td>\n",
       "      <td>211.5000</td>\n",
       "      <td>C80</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>408</th>\n",
       "      <td>1300</td>\n",
       "      <td>3</td>\n",
       "      <td>Riordan, Miss. Johanna Hannah\"\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>334915</td>\n",
       "      <td>7.7208</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>409</th>\n",
       "      <td>1301</td>\n",
       "      <td>3</td>\n",
       "      <td>Peacock, Miss. Treasteall</td>\n",
       "      <td>female</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>SOTON/O.Q. 3101315</td>\n",
       "      <td>13.7750</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>410</th>\n",
       "      <td>1302</td>\n",
       "      <td>3</td>\n",
       "      <td>Naughton, Miss. Hannah</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>365237</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>N</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>411</th>\n",
       "      <td>1303</td>\n",
       "      <td>1</td>\n",
       "      <td>Minahan, Mrs. William Edward (Lillian E Thorpe)</td>\n",
       "      <td>female</td>\n",
       "      <td>37.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>19928</td>\n",
       "      <td>90.0000</td>\n",
       "      <td>C78</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>412</th>\n",
       "      <td>1304</td>\n",
       "      <td>3</td>\n",
       "      <td>Henriksson, Miss. Jenny Lovisa</td>\n",
       "      <td>female</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>347086</td>\n",
       "      <td>7.7750</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>1305</td>\n",
       "      <td>3</td>\n",
       "      <td>Spector, Mr. Woolf</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>A.5. 3236</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>1306</td>\n",
       "      <td>1</td>\n",
       "      <td>Oliva y Ocana, Dona. Fermina</td>\n",
       "      <td>female</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17758</td>\n",
       "      <td>108.9000</td>\n",
       "      <td>C105</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>1307</td>\n",
       "      <td>3</td>\n",
       "      <td>Saether, Mr. Simon Sivertsen</td>\n",
       "      <td>male</td>\n",
       "      <td>38.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SOTON/O.Q. 3101262</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>1308</td>\n",
       "      <td>3</td>\n",
       "      <td>Ware, Mr. Frederick</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>359309</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>1309</td>\n",
       "      <td>3</td>\n",
       "      <td>Peter, Master. Michael J</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2668</td>\n",
       "      <td>22.3583</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Pclass                                          Name  \\\n",
       "0            892       3                              Kelly, Mr. James   \n",
       "1            893       3              Wilkes, Mrs. James (Ellen Needs)   \n",
       "2            894       2                     Myles, Mr. Thomas Francis   \n",
       "3            895       3                              Wirz, Mr. Albert   \n",
       "4            896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)   \n",
       "..           ...     ...                                           ...   \n",
       "413         1305       3                            Spector, Mr. Woolf   \n",
       "414         1306       1                  Oliva y Ocana, Dona. Fermina   \n",
       "415         1307       3                  Saether, Mr. Simon Sivertsen   \n",
       "416         1308       3                           Ware, Mr. Frederick   \n",
       "417         1309       3                      Peter, Master. Michael J   \n",
       "\n",
       "        Sex   Age  SibSp  Parch              Ticket      Fare Cabin Embarked  \n",
       "0      male  34.5      0      0              330911    7.8292     N        Q  \n",
       "1    female  47.0      1      0              363272    7.0000     N        S  \n",
       "2      male  62.0      0      0              240276    9.6875     N        Q  \n",
       "3      male  27.0      0      0              315154    8.6625     N        S  \n",
       "4    female  22.0      1      1             3101298   12.2875     N        S  \n",
       "..      ...   ...    ...    ...                 ...       ...   ...      ...  \n",
       "413    male   NaN      0      0           A.5. 3236    8.0500     N        S  \n",
       "414  female  39.0      0      0            PC 17758  108.9000  C105        C  \n",
       "415    male  38.5      0      0  SOTON/O.Q. 3101262    7.2500     N        S  \n",
       "416    male   NaN      0      0              359309    8.0500     N        S  \n",
       "417    male   NaN      1      1                2668   22.3583     N        C  \n",
       "\n",
       "[418 rows x 11 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Total  Percent\n",
      "Age            177  19.8653\n",
      "Embarked         0   0.0000\n",
      "Cabin            0   0.0000\n",
      "Fare             0   0.0000\n",
      "Ticket           0   0.0000\n",
      "Parch            0   0.0000\n",
      "SibSp            0   0.0000\n",
      "Sex              0   0.0000\n",
      "Name             0   0.0000\n",
      "Pclass           0   0.0000\n",
      "Survived         0   0.0000\n",
      "PassengerId      0   0.0000\n",
      "             Total  Percent\n",
      "Age             86  20.5742\n",
      "Fare             1   0.2392\n",
      "Embarked         0   0.0000\n",
      "Cabin            0   0.0000\n",
      "Ticket           0   0.0000\n",
      "Parch            0   0.0000\n",
      "SibSp            0   0.0000\n",
      "Sex              0   0.0000\n",
      "Name             0   0.0000\n",
      "Pclass           0   0.0000\n",
      "PassengerId      0   0.0000\n"
     ]
    }
   ],
   "source": [
    "print(missing_values(train))\n",
    "print(missing_values(test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## fare feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>1044</td>\n",
       "      <td>3</td>\n",
       "      <td>Storey, Mr. Thomas</td>\n",
       "      <td>male</td>\n",
       "      <td>60.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3701</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Pclass                Name   Sex   Age  SibSp  Parch Ticket  \\\n",
       "152         1044       3  Storey, Mr. Thomas  male  60.5      0      0   3701   \n",
       "\n",
       "     Fare Cabin Embarked  \n",
       "152   NaN     N        S  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test[test.Fare.isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "missing_value = test[(test.Pclass == 3) & (test.Embarked == \"S\") & (test.Sex == \"male\")].Fare.mean()\n",
    "## replace the test.fare null values with test.fare mean\n",
    "test.Fare.fillna(missing_value, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>86</td>\n",
       "      <td>20.5742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Total  Percent\n",
       "Age             86  20.5742\n",
       "Embarked         0   0.0000\n",
       "Cabin            0   0.0000\n",
       "Fare             0   0.0000\n",
       "Ticket           0   0.0000\n",
       "Parch            0   0.0000\n",
       "SibSp            0   0.0000\n",
       "Sex              0   0.0000\n",
       "Name             0   0.0000\n",
       "Pclass           0   0.0000\n",
       "PassengerId      0   0.0000"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values(test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## age feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train age missing value: 19.865319865319865%\n",
      "Test age missing value: 20.574162679425836%\n"
     ]
    }
   ],
   "source": [
    "print (\"Train age missing value: \" + str((train.Age.isnull().sum()/len(train))*100)+str(\"%\"))\n",
    "print (\"Test age missing value: \" + str((test.Age.isnull().sum()/len(test))*100)+str(\"%\"))"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "we will use imputer method to fill those 20% missing values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visualization and feature relation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Sex')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "pal = {'male':\"green\", 'female':\"Pink\"}\n",
    "sns.set(style=\"darkgrid\")\n",
    "plt.subplots(figsize = (15,8))\n",
    "ax = sns.barplot(x = \"Sex\", \n",
    "                 y = \"Survived\", \n",
    "                 data=train, \n",
    "                 palette = pal,\n",
    "                 linewidth=5,\n",
    "                 order = ['female','male'],\n",
    "                 capsize = .05,\n",
    "\n",
    "                )\n",
    "\n",
    "plt.title(\"Survived/Non-Survived Passenger Gender Distribution\", fontsize = 25,loc = 'center', pad = 40)\n",
    "plt.ylabel(\"% of passenger survived\", fontsize = 15, )\n",
    "plt.xlabel(\"Sex\",fontsize = 15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pal = {1:\"seagreen\", 0:\"gray\"}\n",
    "sns.set(style=\"darkgrid\")\n",
    "plt.subplots(figsize = (15,8))\n",
    "ax = sns.countplot(x = \"Sex\", \n",
    "                   hue=\"Survived\",\n",
    "                   data = train, \n",
    "                   linewidth=4, \n",
    "                   palette = pal\n",
    ")\n",
    "\n",
    "## Fixing title, xlabel and ylabel\n",
    "plt.title(\"Passenger Gender Distribution - Survived vs Not-survived\", fontsize = 25, pad=40)\n",
    "plt.xlabel(\"Sex\", fontsize = 15);\n",
    "plt.ylabel(\"# of Passenger Survived\", fontsize = 15)\n",
    "\n",
    "## Fixing xticks\n",
    "#labels = ['Female', 'Male']\n",
    "#plt.xticks(sorted(train.Sex.unique()), labels)\n",
    "\n",
    "## Fixing legends\n",
    "leg = ax.get_legend()\n",
    "leg.set_title(\"Survived\")\n",
    "legs = leg.texts\n",
    "legs[0].set_text(\"No\")\n",
    "legs[1].set_text(\"Yes\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplots(figsize = (15,10))\n",
    "sns.barplot(x = \"Pclass\", \n",
    "            y = \"Survived\", \n",
    "            data=train, \n",
    "            linewidth=5,\n",
    "            capsize = .1\n",
    "\n",
    "           )\n",
    "plt.title(\"Passenger Class Distribution - Survived vs Non-Survived\", fontsize = 25, pad=40)\n",
    "plt.xlabel(\"Socio-Economic class\", fontsize = 15);\n",
    "plt.ylabel(\"% of Passenger Survived\", fontsize = 15);\n",
    "labels = ['Upper', 'Middle', 'Lower']\n",
    "#val = sorted(train.Pclass.unique())\n",
    "val = [0,1,2] ## this is just a temporary trick to get the label right. \n",
    "plt.xticks(val, labels);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Kernel Density Plot\n",
    "fig = plt.figure(figsize=(15,8),)\n",
    "## I have included to different ways to code a plot below, choose the one that suites you. \n",
    "ax=sns.kdeplot(train.Pclass[train.Survived == 0] , \n",
    "               color='gray',\n",
    "               shade=True,\n",
    "               label='not survived')\n",
    "ax=sns.kdeplot(train.loc[(train['Survived'] == 1),'Pclass'] , \n",
    "               color='g',\n",
    "               shade=True, \n",
    "               label='survived', \n",
    "              )\n",
    "plt.title('Passenger Class Distribution - Survived vs Non-Survived', fontsize = 25, pad = 40)\n",
    "plt.ylabel(\"Frequency of Passenger Survived\", fontsize = 15, labelpad = 20)\n",
    "plt.xlabel(\"Passenger Class\", fontsize = 15,labelpad =20)\n",
    "## Converting xticks into words for better understanding\n",
    "labels = ['Upper', 'Middle', 'Lower']\n",
    "plt.xticks(sorted(train.Pclass.unique()), labels);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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fv16vbGnuVW6dGnx/Ddq1AjlypUzuF9AQAA2btyIkJAQuLm54fr167h58yY8PDzQq1cv7Ny5U1zbMi9Vr14dgwYNMrq9QoUK2Lx5M0aNGoVatWohOTkZiYmJKFu2LHr37o1t27blaqKl1yGM/dy4cSP69esHPz8/ZGVliTf+qlSpgv79+2P79u1i5k6XVCrFsmXL8NVXX6Fq1ap4+PAh7t69i8aNG2Pt2rUIDg5+7Ta+9957Ymnt65wXPz8/8QZd+/btjd6MkUgkmDJlCpYtW4Y2bdrAzs4Oly5dQlpaGvz9/TFhwgT88ssv2cpuhZsY33//PerUqYOUlBTcunVLPBf+/v4Wt53oTSbR5PVAHiIiIiIiInorMENJREREREREFmFASURERERERBZhQElEREREREQWYUBJREREREREFmFASURERERERBZhQElEREREREQWYUBJREREREREFmFASURERERERBZhQElEREREREQWYUBJREREREREFmFASURERERERBZhQElEREREREQWYUBJREREREREFmFASURERERERBZhQElEREREREQWYUBJREREREREFmFASURERERERBZhQElEREREREQWYUBJREREREREFmFASURERERERBZhQElEREREREQWYUBJREREREREFmFASURERERERBZhQElEREREREQWYUBJREREREREFmFASURERERERBZhQElEREREREQWYUBJREREREREFmFASURERERERBZhQElEREREREQWYUBJREREREREFmFASURERERERBZhQElEREREREQWYUBJREREREREFmFASURERERERBZhQElEREREREQWYUBJREREREREFmFASURERERERBZhQElEREREREQWsbN2A94Ejx+nQa3WWLsZb6zSpYvi4cNUazeDbAT7A+lifyBd7A8kYF8gXewP1iWVSlCypIvR7QwozaBWaxhQviaeP9LF/kC62B9IF/sDCdgXSBf7g+1iySsRERERERFZhAElERERERERWYQBJREREREREVmEYyiJiIiIiMiqVColHj9OhlKZlW3bgwdSqNVqK7Tq7WNn54CSJd0gk5kfJjKgJCIiIiIiq3r8OBlOTs5wcSkDiUSit83OTgqlkgFlftNoNEhLe4bHj5PxzjtlzX4eS16JiIiIiMiqlMosuLi4ZgsmqeBI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DCURERERkS1jQElWJ2QoXyWTSaFUMqAkIiIiIrJVDCjJ6rQZSrtsj3MMJRERERGRbWNASVannZQne0CpHUPJgJKIiIiIyFYxoCSrM5WhZEBJRERERGS7GFCSVanVaqhUKhOT8nCWVyIiIiIiW8WAkqxKocgCAJa8EhERERG9gRhQklUpFAoAgEzGSXmIiIiIiN40DCjJql4GlLJs21jySkRERERk2xhQklUJJa+GA0oplEoGlEREREREtooBJVmVqYBSKHmVSAq6VUREREREZA4GlGRVpsZQymQyaDQaqNXqgm4WERERERGZgQElWZUQUBqb5RUAZ3olIiIiIrJRDCjJql6WvBqe5RUAx1ESEREREdkoBpRkVS8zlIZneQXApUOIiIiIiGwUA0qyqpyWDQEYUBIRERER2SoGlGRVKpUKEokEUmn2rviy5JUBJRERERGRLWJASValUin/nc01+zZmKImIiIiIbBsDSrIqlUptMDsJADKZ9nFmKImIiIiIbBMDSrIqlUr1byYye4pSKHkVxlkSEREREZFtYUBJVqVWqyCV5lTyymVDiIiIiIhsEQNKsqqXGcrshMeVSmYoiYiIiIhsEQNKsipthlIKQyWvQkCpUHAMJRERERGRLWJASVYlZCgNlbwKYyg5yysRERERkW1iQElWpVKpTMzyynUoiYiIiIhsGQNKsiqOoSQiIiIienMxoCSrUqvVYmnrqyQSCSQSKZRKzvJKRERERGSLGFCSVZkqeQUAmUzKMZRERERERDaKASVZlbbk1VRAKWPJKxERERGRjWJASValXTbEcMkroJ3pVaViySsRERERkS1iQElWlXPJq4yzvBIRERER2SgGlGRV2oDSeIaSASURERERke1iQElWpVabHkOpLXllQElEREREZIsYUJJVmTPLK5cNISIiIiKyTQwoyapUKjUkEtNjKJmhJCIiIiKyTQwoyWo0Gs2/Ja+mZ3nlGEoiIiIiItvEgJKsRq1WAwAkEonRfbQZSpa8EhERERHZIgaUZDVCoGhqUh7O8kpEREREZLsYUJLVqNXagNLUGErO8kpEREREZLsYUJLVCBlK07O8akteTVTFEhERERGRldgZ2+Dr62tybJuuS5cu5VmD6O2Rm4BSo9EAYFRJRERERGRLjAaUM2bMEAPK27dvY8mSJejZsyf8/f1hb2+PP//8E6tX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C0oUKgdHC0GBnF8g7+cZ8fOE+xi72sIqH4B1E8TtcvnidoyYE8Oxy8HWsqzydtSyq3/l6TaObWNj05yeyslTT/qMS3Fw2bbFlCmjt+48bC6i6Orqoqnpw95Em5ub2bhx46jPNzU10dnZSX9/P9lsFrfSHG/39M/ikz7AiZHlay3nj9vc5p142rjNS0REREREDh+HzXnZKIr2OrpnjNnr8WjPf/R1cOgfJRQRERERETkcHDaBsrW1le7u7urj7u5umpubR32+p6eH5uZmGhoaGB7+sNOCj75PRERERERExuawCZRnnXUW69evp6+vj0KhwIsvvsj8+fOrz7e1tZFIJHjjjTcAePbZZ5k/fz6xWIw5c+awbt06ANasWbPX+0RERERERGRsDptOeaA8bMgvf/lLfN9n6dKlXHPNNVxzzTWsWLGCk08+mXfeeYfbbruNkZERZs2axV133UU8HmfHjh2sXLmS3t5epk2bxn333UddXd1EL46IiIiIiMhh7bAKlCIiIiIiInLoOGyavIqIiIiIiMihRYFSRERERERExkSBUkRERERERMZEgVJERERERETGRIFSRERERERExkSBUg6qtWvXcv7557Nw4UKefPLJiS6OjJORkREWL17M9u3bAXjllVdYsmQJCxcu5P7776++btOmTVxyySUsWrSIW2+9lSAIJqrIcpA8+OCDtLe3097ezqpVqwDVh8ns5z//Oeeffz7t7e089thjgOrDZHfPPfewcuVKYPR13tHRweWXX855553HddddRy6Xm8giy0Fw5ZVX0t7ezoUXXsiFF17IW2+9Neo+5Gi/GTKBjMhBsmvXLrNgwQLT399vcrmcWbJkiXn33XcnulhykP397383ixcvNrNmzTIffPCBKRQK5pxzzjHbtm0zvu+bq6++2rz88svGGGPa29vNm2++aYwx5vvf/7558sknJ7LocoD99a9/NV//+tdNqVQynueZ5cuXm7Vr16o+TFKvvvqqWbZsmfF93xQKBbNgwQKzadMm1YdJ7JVXXjFz58413/ve94wxo6/za6+91jz33HPGGGMefPBBs2rVqokpsBwUURSZs88+2/i+X5022j7kJ+1TyMTRGUo5aF555RXOPPNM6uvrSafTLFq0iBdeeGGiiyUH2dNPP80dd9xBc3MzABs3bmTmzJnMmDED13VZsmQJL7zwAjt27KBYLHLqqacCcMkll6h+HGGamppYuXIl8XicWCzGcccdx9atW1UfJqkzzjiDJ554Atd16e3tJQxDhoaGVB8mqYGBAe6//36++c1vAoy6zn3f57XXXmPRokV7TZcjx5YtWwC4+uqrueCCC/jNb34z6j7kaPsUMrEUKOWg6erqoqmpqfq4ubmZzs7OCSyRjIef/vSnzJkzp/p4tHrw0elNTU2qH0eYE044obpzuHXrVp5//nksy1J9mMRisRgPPPAA7e3tzJs3T78Pk9gPfvADbrzxRmpra4GPbyt2r/P+/n6y2Syu6+41XY4cQ0NDzJs3j4ceeojHH3+c3/3ud3R0dOzXb4P2LQ8NCpRy0ERRhGVZ1cfGmL0ey+QwWj1Q/Zg83n33Xa6++mpuvvlmZsyYofowya1YsYL169ezc+dOtm7dqvowCf3hD39g2rRpzJs3rzpttHW+r3WvunBkOe2001i1ahU1NTU0NDSwdOlSHnjgAf02HEbciS6AHLlaW1t5/fXXq4+7u7urzSBl8mhtbaW7u7v6eHc9+Oj0np4e1Y8j0BtvvMGKFSu45ZZbaG9vZ8OGDaoPk9TmzZvxPI8TTzyRVCrFwoULeeGFF3Acp/oa1YfJYd26dXR3d3PhhRcyODhIPp/Hsqx9rvOGhgaGh4cJwxDHcbQvcQR6/fXX8X2/eoDBGENbW9t+bStUHw4NOkMpB81ZZ53F+vXr6evro1Ao8OKLLzJ//vyJLpaMs1NOOYX33nuP999/nzAMee6555g/fz5tbW0kEgneeOMNAJ599lnVjyPMzp07+fa3v83q1atpb28HVB8ms+3bt3PbbbfheR6e5/HSSy+xbNky1YdJ6LHHHuO5557j2WefZcWKFZx77rncdddd+1znsViMOXPmsG7dOgDWrFmjunCEGR4eZtWqVZRKJUZGRnjmmWe4995797kPOdo2RCaWzlDKQdPS0sKNN97I8uXL8X2fpUuXMnv27IkuloyzRCLB3XffzXe+8x1KpRLnnHMO5513HgCrV6/mtttuY2RkhFmzZrF8+fIJLq0cSI8++iilUom77767Om3ZsmWqD5PUOeecw8aNG7noootwHIeFCxfS3t5OQ0OD6oMAo6/zO+64g5UrV/Lwww8zbdo07rvvvgkuqRxICxYs4K233uKiiy4iiiIuu+wyTj/99FH3IUfbhsjEsYwxZqILISIiIiIiIocfNXkVERERERGRMVGgFBERERERkTFRoBQREREREZExUaAUERERERGRMVGgFBERERERkTFRoBQREREREZExUaAUERERERGRMVGgFBERERERkTFRoBQREREREZExUaAUERERERGRMVGgFBERERERkTFRoBQREREREZExUaAUERERERGRMVGgFBERERERkTFRoBQREREREZExUaAUERERERGRMVGgFBERERERkTFRoBQREREREZExUaAUERERERGRMVGgFBERERERkTFRoBQREREREZExcSe6ACIiIpPFlVdeyYYNG/b53O23384VV1wxziUSERH51yhQioiIjKPFixezcuXKj03PZrMTUBoREZF/jQKliIjIOEomkzQ1NU10MURERA4IXUMpIiJyiNi+fTsrVqxg7ty5zJo1i3PPPZdf//rX1edXrlzJDTfcwJVXXsnpp5/OU089BcDTTz/NokWLmD17NkuWLOGZZ56ZqEUQEZFJRmcoRUREDhHXXXcdbW1tPPHEEySTSdasWcO9997LV77yFU488UQAnn/+eW699VZ++MMfUltby1NPPcUvfvEL7rjjDk466STefPNN7rzzTgAuvvjiiVwcERGZBBQoRURExtGaNWtYt27dXtPOP/98br/9di6++GLa29tpaWkB4Prrr+eRRx7hH//4RzVQNjU1sXz58up7H3nkEa6//nrOO+88AI4++mg6Ojp45JFHFChFROSgU6AUEREZR1/96lf57ne/u9e0TCZDMpnkiiuuYN26dWzcuJH333+fTZs2EUURURRVX3vUUUdV7/f19dHZ2ck999zD6tWrq9ODICAMQzzPIx6PH/yFEhGRSUuBUkREZBxls1lmzpz5sen5fJ7LLruMMAxZtGgRc+fO5ZRTTmHBggV7vS6ZTFbvx2IxoDzkyBlnnPGx/+m62syLiMjBpS2NiIjIIWDDhg1s2rSJV199lfr6egC2bNlCFEUYY/b5npqaGlpaWti+fTtf+9rXqtN/+9vfsmnTJn784x+PS9lFRGTyUi+vIiIih4CGhgYA1q5dy44dO1i/fj033HADAJ7njfq+6667jscff5zf//73bNu2jbVr13L33XdraBIRERkXOkMpIiJyCJg9ezY333wzv/rVr7j33nuZPn06S5cu5c9//jNvv/02l1566T7fd+mll+J5Ho8++ih33nknLS0tfOtb3+Laa68d5yUQEZHJyDKjtaMRERERERER+QRq8ioiIiIiIiJjokApIiIiIiIiY6JAKSIiIiIiImOiQCkiIiIiIiJjokApIiIiIiIiY6JAKSIiIiIiImOiQCkiIiIiIiJjokApIiIiIiIiY/L/AZCUg+X+EKkPAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Kernel Density Plot\n",
    "fig = plt.figure(figsize=(15,8),)\n",
    "ax=sns.kdeplot(train.loc[(train['Survived'] == 0),'Fare'] , color='gray',shade=True,label='not survived')\n",
    "ax=sns.kdeplot(train.loc[(train['Survived'] == 1),'Fare'] , color='g',shade=True, label='survived')\n",
    "plt.title('Fare Distribution Survived vs Non Survived', fontsize = 25, pad = 40)\n",
    "plt.ylabel(\"Frequency of Passenger Survived\", fontsize = 15, labelpad = 20)\n",
    "plt.xlabel(\"Fare\", fontsize = 15, labelpad = 20);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>259</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Ward, Miss. Anna</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17755</td>\n",
       "      <td>512.3292</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>679</th>\n",
       "      <td>680</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cardeza, Mr. Thomas Drake Martinez</td>\n",
       "      <td>male</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>PC 17755</td>\n",
       "      <td>512.3292</td>\n",
       "      <td>B51 B53 B55</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>737</th>\n",
       "      <td>738</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Lesurer, Mr. Gustave J</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17755</td>\n",
       "      <td>512.3292</td>\n",
       "      <td>B101</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                                Name  \\\n",
       "258          259         1       1                    Ward, Miss. Anna   \n",
       "679          680         1       1  Cardeza, Mr. Thomas Drake Martinez   \n",
       "737          738         1       1              Lesurer, Mr. Gustave J   \n",
       "\n",
       "        Sex   Age  SibSp  Parch    Ticket      Fare        Cabin Embarked  \n",
       "258  female  35.0      0      0  PC 17755  512.3292            N        C  \n",
       "679    male  36.0      0      1  PC 17755  512.3292  B51 B53 B55        C  \n",
       "737    male  35.0      0      0  PC 17755  512.3292         B101        C  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[train.Fare > 280]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>259</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Ward, Miss. Anna</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17755</td>\n",
       "      <td>512.3292</td>\n",
       "      <td>N</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>679</th>\n",
       "      <td>680</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cardeza, Mr. Thomas Drake Martinez</td>\n",
       "      <td>male</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>PC 17755</td>\n",
       "      <td>512.3292</td>\n",
       "      <td>B51 B53 B55</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>737</th>\n",
       "      <td>738</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Lesurer, Mr. Gustave J</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17755</td>\n",
       "      <td>512.3292</td>\n",
       "      <td>B101</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                                Name  \\\n",
       "258          259         1       1                    Ward, Miss. Anna   \n",
       "679          680         1       1  Cardeza, Mr. Thomas Drake Martinez   \n",
       "737          738         1       1              Lesurer, Mr. Gustave J   \n",
       "\n",
       "        Sex   Age  SibSp  Parch    Ticket      Fare        Cabin Embarked  \n",
       "258  female  35.0      0      0  PC 17755  512.3292            N        C  \n",
       "679    male  36.0      0      1  PC 17755  512.3292  B51 B53 B55        C  \n",
       "737    male  35.0      0      0  PC 17755  512.3292         B101        C  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[train.Fare > 270]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/statsmodels/nonparametric/kde.py:447: RuntimeWarning: invalid value encountered in greater\n",
      "  X = X[np.logical_and(X > clip[0], X < clip[1])] # won't work for two columns.\n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/statsmodels/nonparametric/kde.py:447: RuntimeWarning: invalid value encountered in less\n",
      "  X = X[np.logical_and(X > clip[0], X < clip[1])] # won't work for two columns.\n"
     ]
    },
    {
     "data": {
      "image/png": "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5lWLbZ0brVu3Jjw8nJycHFauXFnoNampqWzduhWg2Fa9GjVq0LZtW8D22Mfs7Gzr9vNv59NPPyU6Oprg4GC+/vprtmzZwk8//cSWLVsYN24cBoOBiRMn8ttvv9nc7/79+5k5cyZLlixh48aN1zyfLCzdZ7dv305KSkqx8Za0CJDFU089ZX0otG3bNp577jlat27NI488wqRJk9i8eTNZWVnXtc0b0b59ex566CEApk2bVuLza8eOHbz++uvk5OTwyCOPFLjmFixYQFhYGAcPHmTUqFGYTKZCr58zZw4NGzZk1apVrFy5khUrVjBr1iwqVapEamoq33//fYmPITIykieeeALIOxf/7//+j7vuuouePXvy2muvsXjxYpufn72cO3eOjIwMli5dyqJFi9i8eTOPPfaYNen7888/bbYerl69msuXL1OrVi2bDwQt7r33Xjw8PDh9+rTNB5Q7d+4kMTGRypUrc8899wB5D2eefPJJjh8/Tr169YiOjmblypUsXLiQzZs3M2DAAK5cucILL7xQ4GGlRUJCAr6+vqxZs4ZFixaxadMm+vTpw6FDh5g9ezaenp78+OOP/PLLLyxYsIBNmzbx9ttvYzAYmDdvns1tilRkSjRFbkFLly7l6tWruLu707NnT+vvq1atSvv27YHCRYHS09P55ptvAPjggw+sN66QV5V02rRpBAYGFtpXTEwMy5Yto1KlSkyfPr3A2Ch3d3dGjx5N7969ycrKKnHidSO8vLwAuHDhwjXXtdz03XfffdbXQd54z9dee41OnToRERFx3TG0atWKPn36WP/t7+9foteFh4fz2WefWbv/Qt4N9siRIwEKdCsrT5999hm5ubl07NiRt99+29oSBtCwYUO+/vprPDw8OHDgAMuWLSv0eldXV6ZMmWJ9Yg9Yu41CXvJVXjp37szMmTMLtOKeP3+e1atX895779G/f3+6devGN998UyZzaRZ1blgSP1utM0uXLsVoNFoT0uJY3lNbrTO//vorFy9eJDQ01FpUJy0tzVog6fPPP6dTp07W9Z2dnRk6dCiPPfYYZrOZTz75xOY+e/fubR3T6uTkVKLWe8jrZREeHo7JZLLZPXzdunVcuHCBwMBAunbtWqJtWvj6+jJ79mzuu+8+nJzybnFycnLYsWMHX3zxBcOHD6dt27aMHTu2TJMkyOu+eb1daD/99FNM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hb///e/WOSZFRERERIqiRFNERERERETsSmM0RURERERExK6UaIqIiIiIiIhdKdEUERERERERu1KiKSIiIiIiInalRFNERERERETsSommiIiIiIiI2JUSTREREREREbErJZoiIiIiIiJiV0o0RURERERExK6UaIqIiIiIiIhdKdEUERERERERu1KiKSIiIiIiInalRFNERERERETsSommiIiIiIiI2JUSTREREREREbErJZoiIiIiIiJiV0o0RURERERExK6UaIqIiIiIiIhdKdEUERERERERu1KiKSIiIiIiInalRFNERERERETsSommiIiIiIiI2JUSTREREREREbErJZoiIiIiIiJiV0o0RURERERExK6UaIqIiIiIiIhdKdEUERERERERu1KiKSIiIiIiInalRFNERERERETsSommiIiIiIiI2JUSTREREREREbErJZoiIiIiIiJiV0o0RURERERExK6UaIqIiIiIiIhduTg6gJvZ+fOZmExmR4chDlC1amXS0jIcHYbcxHQOSWno/JHS0jkkpaHzRwCcnAz4+XkVuVyJZimYTGYlmrcxffZSWjqHpDR0/khp6RyS0tD5I9eirrMiIiIiIiJiV0o0RURERERExK6UaIqIiIiIiIhdaYymiIiIiIhUSEZjLufPp5Kbm+3oUG5rLi5u+PkF4uxc8vRRiaaIiIiIiFRI58+n4uHhiZdXMAaDwdHh3JbMZjOZmemcP59KQEBIiV+nrrMiIiIiIlIh5eZm4+XloyTTgQwGA15ePtfdqqxEU0REREREKiwlmY53I5+BEk0RERERERGxKyWaIiIiIiIiZeDdd9/i9OlTZb6fs2dTGTPmn6XezvLl0bzzzvjSB4QSTRERERERkTKxa9cOzGZzme8nICCQjz76rMz3cz1UdVZERERERCq8mJiDxMTsL5NtN2gQRYMGjYpdZ9euHcyc+Q0eHh4kJByjbt0I3nzzHVxdXVm2bAlz5vyAwWAgMrIho0e/zE8/zePs2VReeulfTJ36FVWq+Fq3NWXKJ/zxx3acnAx06tSVJ554kunT/wvA8OFPATBoUD8mT/4vf/65kxUrlnLx4gWaNm3Gxo2/snDhMlxcXIiPP8pbb73O++9/zKhRTzF9+kyGDn2w0PLvvpvNihVLmT9/NiaTmcjIBrzwwiu4u7uzcuUyvvtuOl5elQkO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\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Kernel Density Plot\n",
    "fig = plt.figure(figsize=(15,8),)\n",
    "ax=sns.kdeplot(train.loc[(train['Survived'] == 0),'Age'] , color='gray',shade=True,label='not survived')\n",
    "ax=sns.kdeplot(train.loc[(train['Survived'] == 1),'Age'] , color='g',shade=True, label='survived')\n",
    "plt.title('Age Distribution - Surviver V.S. Non Survivors', fontsize = 25, pad = 40)\n",
    "plt.xlabel(\"Age\", fontsize = 15, labelpad = 20)\n",
    "plt.ylabel('Frequency', fontsize = 15, labelpad= 20);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/seaborn/axisgrid.py:230: UserWarning: The `size` paramter has been renamed to `height`; please update your code.\n",
      "  warnings.warn(msg, UserWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pal = {1:\"seagreen\", 0:\"gray\"}\n",
    "g = sns.FacetGrid(train,size=5, col=\"Sex\", row=\"Survived\", margin_titles=True, hue = \"Survived\",\n",
    "                  palette=pal)\n",
    "g = g.map(plt.hist, \"Age\", edgecolor = 'white');\n",
    "g.fig.suptitle(\"Survived by Sex and Age\", size = 25)\n",
    "plt.subplots_adjust(top=0.90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 768.425x1080 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(train,size=5, col=\"Sex\", row=\"Embarked\", margin_titles=True, hue = \"Survived\",\n",
    "                  palette = pal\n",
    "                  )\n",
    "g = g.map(plt.hist, \"Age\", edgecolor = 'white').add_legend();\n",
    "g.fig.suptitle(\"Survived by Sex and Age\", size = 25)\n",
    "plt.subplots_adjust(top=0.90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 768.425x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(train, size=5,hue=\"Survived\", col =\"Sex\", margin_titles=True,\n",
    "                palette=pal,)\n",
    "g.map(plt.scatter, \"Fare\", \"Age\",edgecolor=\"w\").add_legend()\n",
    "g.fig.suptitle(\"Survived by Sex, Fare and Age\", size = 25)\n",
    "plt.subplots_adjust(top=0.85)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/seaborn/categorical.py:3666: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
      "  warnings.warn(msg)\n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/seaborn/categorical.py:3672: UserWarning: The `size` paramter has been renamed to `height`; please update your code.\n",
      "  warnings.warn(msg, UserWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## dropping the three outliers where Fare is over $500 \n",
    "train = train[train.Fare < 500]\n",
    "## factor plot\n",
    "sns.factorplot(x = \"Parch\", y = \"Survived\", data = train,kind = \"point\",size = 8)\n",
    "plt.title(\"Factorplot of Parents/Children survived\", fontsize = 25)\n",
    "plt.subplots_adjust(top=0.85)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.factorplot(x =  \"SibSp\", y = \"Survived\", data = train,kind = \"point\",size = 8)\n",
    "plt.title('Factorplot of Sibilings/Spouses survived', fontsize = 25)\n",
    "plt.subplots_adjust(top=0.85)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Statistical Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>888.000000</td>\n",
       "      <td>888.000000</td>\n",
       "      <td>888.000000</td>\n",
       "      <td>711.000000</td>\n",
       "      <td>888.000000</td>\n",
       "      <td>888.000000</td>\n",
       "      <td>888.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>445.618243</td>\n",
       "      <td>0.381757</td>\n",
       "      <td>2.313063</td>\n",
       "      <td>29.675345</td>\n",
       "      <td>0.524775</td>\n",
       "      <td>0.381757</td>\n",
       "      <td>30.582164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.405474</td>\n",
       "      <td>0.486091</td>\n",
       "      <td>0.834007</td>\n",
       "      <td>14.552495</td>\n",
       "      <td>1.104186</td>\n",
       "      <td>0.806949</td>\n",
       "      <td>41.176366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>222.750000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.895800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>445.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>667.250000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>30.771850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>263.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   888.000000  888.000000  888.000000  711.000000  888.000000   \n",
       "mean    445.618243    0.381757    2.313063   29.675345    0.524775   \n",
       "std     257.405474    0.486091    0.834007   14.552495    1.104186   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     222.750000    0.000000    2.000000   20.000000    0.000000   \n",
       "50%     445.500000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     667.250000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  888.000000  888.000000  \n",
       "mean     0.381757   30.582164  \n",
       "std      0.806949   41.176366  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.895800  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   30.771850  \n",
       "max      6.000000  263.000000  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>888</td>\n",
       "      <td>888</td>\n",
       "      <td>888</td>\n",
       "      <td>888</td>\n",
       "      <td>888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>888</td>\n",
       "      <td>2</td>\n",
       "      <td>680</td>\n",
       "      <td>147</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Thayer, Mr. John Borland</td>\n",
       "      <td>male</td>\n",
       "      <td>CA. 2343</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>575</td>\n",
       "      <td>7</td>\n",
       "      <td>686</td>\n",
       "      <td>644</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Name   Sex    Ticket Cabin Embarked\n",
       "count                        888   888       888   888      888\n",
       "unique                       888     2       680   147        3\n",
       "top     Thayer, Mr. John Borland  male  CA. 2343     N        S\n",
       "freq                           1   575         7   686      644"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe(include =['O'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.624413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.472826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.242363</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pclass  Survived\n",
       "0       1  0.624413\n",
       "1       2  0.472826\n",
       "2       3  0.242363"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[['Pclass', 'Survived']].groupby(\"Pclass\").mean().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>447.016393</td>\n",
       "      <td>2.531876</td>\n",
       "      <td>30.626179</td>\n",
       "      <td>0.553734</td>\n",
       "      <td>0.329690</td>\n",
       "      <td>22.117887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>443.353982</td>\n",
       "      <td>1.958702</td>\n",
       "      <td>28.270627</td>\n",
       "      <td>0.477876</td>\n",
       "      <td>0.466077</td>\n",
       "      <td>44.289799</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  PassengerId    Pclass        Age     SibSp     Parch       Fare\n",
       "0         0   447.016393  2.531876  30.626179  0.553734  0.329690  22.117887\n",
       "1         1   443.353982  1.958702  28.270627  0.477876  0.466077  44.289799"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survived_summary = train.groupby(\"Survived\")\n",
    "survived_summary.mean().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex</th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>female</td>\n",
       "      <td>431.578275</td>\n",
       "      <td>0.741214</td>\n",
       "      <td>2.162939</td>\n",
       "      <td>27.888462</td>\n",
       "      <td>0.696486</td>\n",
       "      <td>0.651757</td>\n",
       "      <td>42.985091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>male</td>\n",
       "      <td>453.260870</td>\n",
       "      <td>0.186087</td>\n",
       "      <td>2.394783</td>\n",
       "      <td>30.705477</td>\n",
       "      <td>0.431304</td>\n",
       "      <td>0.234783</td>\n",
       "      <td>23.830658</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Sex  PassengerId  Survived    Pclass        Age     SibSp     Parch  \\\n",
       "0  female   431.578275  0.741214  2.162939  27.888462  0.696486  0.651757   \n",
       "1    male   453.260870  0.186087  2.394783  30.705477  0.431304  0.234783   \n",
       "\n",
       "        Fare  \n",
       "0  42.985091  \n",
       "1  23.830658  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survived_summary = train.groupby(\"Sex\")\n",
    "survived_summary.mean().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>460.225352</td>\n",
       "      <td>0.624413</td>\n",
       "      <td>38.280984</td>\n",
       "      <td>0.422535</td>\n",
       "      <td>0.356808</td>\n",
       "      <td>78.124061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>445.956522</td>\n",
       "      <td>0.472826</td>\n",
       "      <td>29.877630</td>\n",
       "      <td>0.402174</td>\n",
       "      <td>0.380435</td>\n",
       "      <td>20.662183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>439.154786</td>\n",
       "      <td>0.242363</td>\n",
       "      <td>25.140620</td>\n",
       "      <td>0.615071</td>\n",
       "      <td>0.393075</td>\n",
       "      <td>13.675550</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pclass  PassengerId  Survived        Age     SibSp     Parch       Fare\n",
       "0       1   460.225352  0.624413  38.280984  0.422535  0.356808  78.124061\n",
       "1       2   445.956522  0.472826  29.877630  0.402174  0.380435  20.662183\n",
       "2       3   439.154786  0.242363  25.140620  0.615071  0.393075  13.675550"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survived_summary = train.groupby(\"Pclass\")\n",
    "survived_summary.mean().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>0.334068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>0.261742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0.082157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>0.079472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>0.033395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <td>0.006916</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Survived\n",
       "Survived     1.000000\n",
       "Pclass       0.334068\n",
       "Fare         0.261742\n",
       "Parch        0.082157\n",
       "Age          0.079472\n",
       "SibSp        0.033395\n",
       "PassengerId  0.006916"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(abs(train.corr()['Survived']).sort_values(ascending = False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived       1.000000\n",
       "Pclass         0.111601\n",
       "Fare           0.068509\n",
       "Parch          0.006750\n",
       "Age            0.006316\n",
       "SibSp          0.001115\n",
       "PassengerId    0.000048\n",
       "Name: Survived, dtype: float64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = train.corr()**2\n",
    "corr.Survived.sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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dcqUKZQtW5ZNmzaxatUqrKysKFOmDB4eHjRs2PC5623YsAHDMGjZsmWiw2/i2NnZ0axZM9asWUNAQECCBxy+rDFjxlC2bFlWrFjBhg0bsLGxoVSpUowfP57GjRu/9HZbt25N9uzZWbBgARs3bsTOzo4WLVpQqVIlhg4darZ5I09r0aIFBQoUYNGiRQQFBfH48WMKFSrEgAEDeP/9901zHAoUKMDSpUuZMWMGhw4dIjo6moIFC9KzZ0/69u1L48aNCQoKirfd/fv3ExQUxHfffUf79u0pWrQoCxYsYNq0aezbt4/z589Trlw5li9fzsaNG5OdXGTLlg1fX1+WLFnC5s2bWbFiBQ4ODlSpUoX+/ftTtWpVU9k333yTRYsWsXjxYgIDA7l//z7Ozs588skn9OnTJ8njR0QkvbEyUuLWGiIiku48ePCAhw8f4ujomOAHr7+/P2PHjmX27NlmSWBFROS/SXMuREQEiJ0UXbduXcaOHRtv+cOHD1mxYgU2NjYvNdxKREQyDg2LEhERAMqVK0eZMmVYvXo1ly9fply5cjx+/Jg9e/Zw7do1hg0bRt68eS0dpoiIpGEaFiUiIib3799n6dKlbNu2jevXr5MlSxbc3Nzo3r27hkOJiMg/UnIhIiIiIiJmoTkXIiIiIiJiFkouRERERETELJRciIiIiIiIWSi5EBERERERs1ByISIiIiIiZqHkQkREREREzELJhYiIiIiImIWSCxERERERMQslFyIiIiIiYhZKLkRERERExCyUXIiIiIiIiFkouRAREREREbNQciEiIiIiImah5EJERERERMxCyYWIiIiIiJiFkgsRERERETELJRciIiIiImIWSi5ERERERMQslFyIiIiIiIhZKLkQERERERGzUHIhIiIiIiJmoeRCRERERETMQsmFiIiIiIiYhZILERERERExCyUXIiIiIiJiFkouRERERETELJRciIiIiIiIWSi5EBERERERs1ByISIiIiIiZqHkQkREREREzELJhYiIiIiImIWSCxERERERMQslFyIiIiIiYhZKLkRERERExCyUXIiIiIiIiFlkTs2djR8/PjV3JyIiIiLpjKenp6VDSJYslXpZdP8RP39t0f0/T6omFwA+6y+l9i4zrNFtigLgPny4hSPJOCZPmQLAiCEDLRxJxjFp+kwABg3TcZ6avpw6hZEDP7R0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0G/QMAtHknEs+HIqAG+8+5GFI8k49vvNtXQI8i8lK7nIkiUL77zzDteuXcPBwYEpU6bQsmXLlI5NRERERETSkWRN6La1teXevXu8+uqrnDhxgkyZMhEdHZ3SsYmIiIiISDqSrOTi/fffZ/DgwTRo0IANGzbQvHlzypYtm9KxiYiIiIikSVbWVhZ9pVVJDosKDg5mypQp/Prrr1SsWJGYmBjWrFnDxYsXKVmyZGrFKCIiIiIi6UCSPRejRo3C0dGRIUOGEBkZycSJE7Gzs6N06dKm29KKiIiIiIhAMnoulixZAsDrr79OmzZp8366IiIiIiKpKS0PTbKkJLsfbGxs4v3/0+9FRERERESelqxb0caxslKGJiIiIiJird/FiUoyufj1119p1KiR6X1wcDCNGjXCMAysrKzYvXt3igcoIiIiIiLpQ5LJxfbt21MrDhERERERSeeSTC6cnZ1TKw4RERERkXRDE7oTp/vJioiIiIiIWSi5EBERERERs1ByISIiIiIiZqHkQkREREREzOKFnnMhIiIiIiKa0P086rkQERERERGzUHIhIiIiIiJmoWFRIiIiIiIvyFrDohKlngsRERERETEL9VyIiIiIiLwgK12iT5SaRUREREREzELJhYiIiIiImIWGRYmIiIiIvCArK03oTox6LkRERERExCyUXIiIiIiIiFkouRAREREREbNQciEiIiIiImahCd0iIiIiIi9IT+hOnHouRERERETELNRzISIiIiLygqzUc5Eo9VyIiIiIiIhZKLkQERERERGz0LAoEREREZEXpGFRiVPPhYiIiIiImIV6LkREREREXpC1lXouEqOeCxERERERMQslFyIiIiIiYhZKLkRERERExCyUXIiIiIiIiFlkiAndQUFBzJo9m4iICFxdXBg3bhz29vbJLhcdHc20adM4eOgQ0dHR9OjRg44dOgAQGhrKpEmT+P2PP3jy5Al9+vShZYsWAKz47jtWrlxJVltbXi1enFEjR/LKK6+kat3TqyVevTn961VmLN9u6VD+E4LO/MGsTfuJiI7GtWA+xnVpgn1W2wTlvgv6Gf+DJ7ACCufNiUfnJuTJYceDR08Y9912LgTfwTAMWlYvQ6/G1VO/Imlc0KEf+HL+YiIjInF5rTheI4dhnz17sssNGT2Oy1f/NJW7dv0GVSuWZ/YUb44c+5mpX80nKjqa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jT2YqPbduJWlPU2bGClJ6tm7j4MjKTjGjR0jSWr2514HR1JwLLq/isLCwhwdRo6M3ebYYe+9a5Zz6PFvJUdjm8LCwjRx4kQdP35cPXv21KFDhzRo0KC8jg0AAACAE8lRcnHgwAGNGDFCa9asUdOmTfXRRx/p5MmTeR0bAAAAACeSo+QiLS3NcivaGjVqKDk5WcnJWR8tDwAAAKDgytGE7kaNGum5557TE088oUcffVT16tXT66+/ntexAQAAAPkSE7qty1Fy8d5776lVq1aW28/OnTtX/v7+t9kLAAAAQEGSo+Tit99+07Rp05SUlCSz2az09HRduHBBmzdvzuv4AAAAADiJHM25GDBggGrXrq20tDS9/fbbCgwMVO3atfM6NgAAACBfcnUxOPSVX+WoclGoUCE1adJE58+fl6+vr8aMGaPQ0NC8jg0AAACAE8lRclG4cGFdvXpV9913n/bt26dnnnlGaWlpeR0bAAAAkC/l5+qBI+VoWNS7776r7t2768UXX9SKFStUv359Pfzww3kdGwAAAAAnkqPKxSuvvKK6devKYDBoyZIlOnXqlB566KG8jg0AAACAE8k2uejfv3+2O48cOdKmwQAAAADOwNXAsChrsk0unn76aXvFAQAAAMDJZZtcvPbaa5KkhIQErVixQm+//baioqL0zTffqF27dnYJEAAAAIBzyNGE7l69eik6OlqS5OXlpfT0dPXp0ydPAwMAAADgXHKUXFy4cEHdu3eXJHl7e6t79+46c+ZMngYGAAAAwLnk6G5RBoNBv//+ux588EFJ0p9//ik3txztCgAAANx1XJjQbVWOMoR+/fqpdevWCgwMlCRduXJFY8eOzdPAAAAAADiXbJOLqKgojRkzRseOHVPNmjX15ptvqlChQipbtqwKFSpkrxgBAACAfMWVwoVV2c65GDBggIxGo3r06CGz2ayvv/5aFSpUILEAAAAAkMVtKxczZ86UJD377LNq1KiRXYICAAAA4HyyTS7c3d0z/fvfywAAAEBB5eLCuChrcnQr2n8YmBUPAAAA4BayrVwcO3ZML730kmU5KipKL730ksxmswwGgzZt2pTnAQIAAAD5jSs/uluVbXKxbt06e8UBAAAAwMllm1wEBwfbKw4AAAAATi5Xcy4AAAAA4FZILgAAAADYRLbDogAAAABk5cKEbquoXAAAAACwCZIL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guQCAAAAgE0wLAoAAADIJQPDoqyicgEAAADAJkguAAAAANgEw6IAAACA3GJYlFVULgAAAADYBJULAAAAILeoXFhF5QIAAACATZBcAAAAALAJkgsAAAAANkFyAQAAAMAmmNANAAAA5BYTuq0ymM1ms70OFhERYa9DAQAAwAmFhYU5OoQcST13yKHHdwup5NDj3wrDogAAAADYhN2HRfXt08fehyywRo8ZI0lq362XgyMpOKZNjJQk9ezN+9xexo3NeJ8PbvGKgyMpWIbNXSPPF952dBgFyv+1d+dhUZb7H8ffAyKuKBiLgguZW5qZx46auddRU7PcKk3L0rSOiv3UNFxBDRfcEdM0UyOTFDQ7LpkbLh31VK6pWRYuKaCgxKIMM/P7g5xEkKAGBuTzui6ui3nmfp753jcz9/Cd7/3Mk7I7DIBpG6LtHEnxMe656gC07PuWnSMpPvaGhdo7hFwzaFlUtlS5EBERERERm9AJ3SIiIiIieWVW5SI7qlyIiIiIiIhNKLkQERERERGb0LIoEREREZG8KrirORQpqlyIiIiIiIhNKLkQERERERGbUHIhIiIiIiI2oeRCRERERERsQid0i4iIiIjkla7QnS1VLkRERERExCaUXIiIiIiIiE1oWZSIiIiISB4ZtCwqW6pciIiIiIiITahyISIiIiKSV6pcZEuVCxERERERsQklFyIiIiIiYhNaFiUiIiIikldaFpUtVS5ERFJOIdAAACAASURBVERERMQmlFyIiIiIiIhNKLkQERERERGbUHIhIiIiIiI2oRO6RURERETyymyydwSFkioXIiIiIiJiE6pciIiIiIjkkcWsr6LNjioXIiIiIiJiE0ouRERERETEJrQsSkREREQkr3RCd7ZUuRAREREREZtQ5UJEREREJK9UuciWKhciIiIiImITSi5ERERERMQmlFyIiIiIiIhNKLkQERERERGb0AndIiIiIiJ5ZDHphO7sqHIhIiIiIiI2oeRCRERERERsQsuiRERERETyymy2dwSFkioXIiIiIiJiE0ouRERERETEJorFsqioqCgWLFxIWloatWvVYvLkyZQrVy7X7UwmE7Nnz2b/gQOYTCb69+9P7169ADhx4gSzZs0iNTUVk9nMgAED6NK5MwBf/Oc/rFy5EgNQqlQpxowZQ/369Quy64XC1/v2sjR0IcY0Iw8+VIsx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/fVXRo8ezbVr1/D19SU4OJiyZctmahMbG8s777xDfHw8zs7OBAYGUq9evXseM1fJxerVq/9e5CIiIiIiUqgEBATQp08fOnfuzKJFiwgNDWX06NGZ2sydO5cOHTrw0ksvERUVRUBAAJ9++uk9j5mr5OLIkSMsWbKElJQULBYLZrOZX3/9lZ07d/69HomIiIiISJ4lJiaSmJiYZbuLiwsuLi5/ur/RaOTw4cMsWrQIgO7du/Pyyy9nSS6mTZtm/f3ixYt/euxcJRf+/v68/vrrREZG0q9fP7788ksefvjh3OwqIiIiInLfsZjse52LlStXEhISkmX70KFDGTZs2J/un5CQQLly5ShRIiMdcHd3JyYmJku729e269ixI5cuXSI0NDTH4+YquShZsiQ9evTg0qVLuLi4MHPmTF2hW0RERETETl555RWef/75LNuzqyxs2bKFoKCgTNuqV6+OwWDItO3u23faunUrp06d4rXXXmPLli1UrFgx23a5Si6cnZ25fv06vr6+HD16lObNm2Oyc7YmIiIiImI3dr5Cd26XPwF06tSJTp06ZdpmNBpp2rQpJpMJR0dH4uLisr2O3e7du3n88ccpW7Ys9erVo0qVKly4cOGeyYVDbgIaMGAAb7/9Nm3btmXjxo107tyZBg0a5KozIiIiIiJSuDg5OdGkSRM2b94MwIYNG2jVqlWWdpGRkYSHhwPw448/cvXqVR588MF7HjfHykVMTAwzZ87k7NmzNGrUCLPZzPr16/nll1+oW7fu3+mPiIiIiIjY0aRJkxg7diyLFy+mcuXKzJkzB4A1a9YQGxuLn58f/v7++Pv7ExkZibOzM7Nnz87ydbV3yjG58Pf3p3bt2nTt2pVt27YRFBREUFCQTuYWERERkeLNzsuibMHb2zvbS0689NJL1t89PT1Zvnx5ro/5p5WL2wdr0aIFzz33XK4PLCIiIiIixUuO51w4OTll+v3O2yIiIiIiInfK1bdF3ZbT11OJiIiIiBQXFrPZ3iEUSjkmF2fPnqV9+/bW2zExMbRv3x6LxYLBYGDHjh35HqCIiIiIiBQNOSYX27ZtK6g4RERERESkiMsxufD29i6oOEREREREpIjL1UX0RERERERE/kyeTugWERERERHui+tc5AdVLkRERERExCZUuRARERERyStVLrKlyoWIiIiIiNiEkgsREREREbEJLYsSEREREckjXaE7e6pciIiIiIiITahyISIiIiKSVzqhO1uqXIiIiIiIiE0ouRAREREREZvQsigRERERkbzSsqhsqXIhIiIiIiI2oeRCRERERERsQsmFiIiIiIjYhJILERERERGxCZ3QLSIiIiKSRxaTTujOjioXIiIiIiJiEwaLxWIpqAcLCAgoqIcSERERkSJo0qRJ9g4hV1LWB9v18cv0GGXXx78XLYsSEREREckrs9neERRKBZ5cjHnnnYJ+yGJrxsyZALTs+5adIyk+9oaFAtDrp//ZOZLi47OaTQAYOLxwfoJzv1q2IJgur/nZO4xi5YsP5wOa0wvS7Tl92oZoO0dSfIx7rrq9Q5C/SZULEREREZG80hW6s6UTukVERERExCaUXIiIiIiIiE1oWZSIiIiISB5ZtCwqW6pciIiIiIiITSi5EBERERERm1ByISIiIiIiNqHkQkREREREbEIndIuIiIiI5JFFV+jOlioXIiIiIiJiE6pciIiIiIjkkcWkykV2VLkQERERERGbUHIhIiIiIiI2oWVRIiIiIiJ5pGVR2VPlQkREREREbEKVCxERERGRPNJX0WZPlQsREREREbEJJRciIiIiImITSi5ERERERMQmlFyIiIiIiIhN6IRuEREREZE80lfRZk+VCxERERERsQklFyIiIiIiYhNaFiUiIiIikkdaFpU9VS5ERERERMQmlFyIiIiIiIhNaFmUiIiIiEgemU0me4dQKKlyISIiIiIiNqHKhYiIiIhIHlnMOqE7O6pciIiIiIiITSi5EBERERERm1ByISIiIiIiNqHkQkREREREbEIndIuIiIiI5JGu0J09VS5ERERERMQmlFyIiIiIiIhNaFmUiIiIiEgeaVlU9lS5EBERERERm1DlQkREREQkj3SF7uypciEiIiIiIjZRLCsXUVFRLFi4kLS0NGrXqsXkyZMpV65crtuZTCZmz57N/gMHMJlM9O/fn969egFw4sQJZs2aRWpqKiazmQEDBtClc+eC7mKhdfzQATauXILRmIZPjZq8POJdSpcpm6nNwZ3b2B7xCQYMlHQuRe8hI6heqy4A3+7fzda1q0hPN1LJ3YtXRo6nnEsFe3SlSCv3aBM8evXH4OTErQu/8OuyBZhvpmZp5+xTHa9+g3EoUwbMZi6vWMTNX36yQ8RF23/372VZ6ELSjEYefKgW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utc8crdHHnmEI0eOEBcXB8B7772X4/uD5M7+/fsZPnw4Tz31FFFRUQBZxl9zjBSE++JjmLp161KvXj06deqEwWDgySef5JtvvsHNzY0XXniBnj17Urp0aXx9fenRowePP/4448aNY9GiRTg5OTF58mTc3d157733GDFiBGazGU9PT2up9l5mzpyJv78/8+bNo06dOtZPBsaPH8/EiROtn7DPnDnzT8u6s2bN4t1332XevHk0atTINgNTQJo1a8bQoUMZMmQIRqMRyFhG9u9//5vGjRszZcoUQkJCcjwZslSpUjRu3Ji0tDTKli2bq/uHDh3K5MmT6dKlCyaTidGjR1OtWjX69OnD2bNn6dSpE97e3vqHgIzK26xZs3jnnXcwGo1Uq1aNmTNnsm3bNsA2ryHJKjIyMst65r59+7Js2TKWL1/OmDFjcHBwwNfX1zp/zJo1i8mTJ7Ns2TKcnJyYO3dupk955Q85zT13fuDz4IMP8sYbb5CYmEiXLl2sc9H06dPx9/cnKSkJg8FAw4YNmThxonW/Cxcu8PzzzwMwd+7cIldVLmj3mkfu5unpybhx43j99dcxm800atSI7t27Exoaaoeo7x/Dhg2jT58+ODs7U7duXby9va2J9500x0h+M1hUc/zLQkJC6N27Nx4eHnz55Zds2rTJ+j3dIiL3YjabCQ4OZujQoZQpU4YVK1YQExPD2LFj7R2a/K44XR9HRMSW7ovKhb1UqVKF1157jRIlSuDi4sK0adPsHZKIFAEODg5UrFiRnj174uTkhLe3t+YPERG5L6hyISIiIiIiNnFfnNAtIiIiIiL2p+RCRERERERsQsmFiIiIiIjYhJILERERERGxCSUXIiIiIiJiE0ouRERERETEJv4fhS7kGIKftAgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1080x864 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "mask = np.zeros_like(train.corr(), dtype=np.bool)\n",
    "#mask[np.triu_indices_from(mask)] = True\n",
    "\n",
    "plt.subplots(figsize = (15,12))\n",
    "sns.heatmap(train.corr(), \n",
    "            annot=True,\n",
    "            mask = mask,\n",
    "            cmap = 'RdBu', ## in order to reverse the bar replace \"RdBu\" with \"RdBu_r\"\n",
    "            linewidths=.9, \n",
    "            linecolor='gray',\n",
    "            fmt='.2g',\n",
    "            center = 0,\n",
    "            square=True)\n",
    "plt.title(\"Correlations Among Features\", y = 1.03,fontsize = 20, pad = 40);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Male survival mean:  0.18608695652173912\n",
      "female survival mean: 0.7412140575079872\n",
      "The mean difference between male and female survival rate: 0.5551271009862481\n"
     ]
    }
   ],
   "source": [
    "male_mean = train[train['Sex'] == 'male'].Survived.mean()\n",
    "\n",
    "female_mean = train[train['Sex'] == 'female'].Survived.mean()\n",
    "print (\"Male survival mean: \",(male_mean))\n",
    "print (\"female survival mean: \" + str(female_mean))\n",
    "\n",
    "print (\"The mean difference between male and female survival rate: \" + str(female_mean - male_mean))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>177</td>\n",
       "      <td>19.9324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticket</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Name</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Total  Percent\n",
       "Age            177  19.9324\n",
       "Embarked         0   0.0000\n",
       "Cabin            0   0.0000\n",
       "Fare             0   0.0000\n",
       "Ticket           0   0.0000\n",
       "Parch            0   0.0000\n",
       "SibSp            0   0.0000\n",
       "Sex              0   0.0000\n",
       "Name             0   0.0000\n",
       "Pclass           0   0.0000\n",
       "Survived         0   0.0000\n",
       "PassengerId      0   0.0000"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "male mean 0.19\n",
      "female mean 0.76\n",
      "difference 0.58\n"
     ]
    }
   ],
   "source": [
    "# separating male and female dataframe. \n",
    "male = train[train['Sex'] =='male']\n",
    "female = train[train['Sex'] =='female']\n",
    "import numpy as np\n",
    "import random\n",
    "\n",
    "## empty list for storing mean sample\n",
    "m_mean_samples = []\n",
    "f_mean_samples = []\n",
    "\n",
    "for i in range(50):\n",
    "    m_mean_samples.append(np.mean(random.sample(list(male['Survived']),50,)))\n",
    "    f_mean_samples.append(np.mean(random.sample(list(female['Survived']),50,)))\n",
    "    \n",
    "\n",
    "# Print them out\n",
    "print('male mean',round(np.mean(m_mean_samples),2))\n",
    "print ('female mean',round(np.mean(f_mean_samples),2))\n",
    "print ('difference',round(np.mean(f_mean_samples) - np.mean(m_mean_samples),2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ttest_indResult(statistic=-59.89224974411334, pvalue=5.3103480833049374e-79)\n",
      "This is the p-value when we break it into standard form: 0.00000000000000000000000000000000\n"
     ]
    }
   ],
   "source": [
    "import scipy.stats as stats\n",
    "\n",
    "print (stats.ttest_ind(m_mean_samples, f_mean_samples))\n",
    "print (\"This is the p-value when we break it into standard form: \" + format(stats.ttest_ind(m_mean_samples, f_mean_samples).pvalue, '.32f'))"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "thus it seems that our h0 hypothesis is wrong thus mean of survival \n",
    "for male and female are different and therefore we will reject our null hypothesis \n",
    "and we worked on the hypothessis that suggest that there is difference in the survival\n",
    "rate of between male and\n",
    "female"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Engineering"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Feature Engineering is exactly what its sounds like. Sometimes we want to create extra features from with in\n",
    "the features that we have, sometimes we want to remove features that are alike. Features engineering is the \n",
    "simple word for doing all those. It is important to remember that we will create new features in such ways that\n",
    "will not cause multicollinearity(when there is a relationship among independent variables) to occur."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Braund, Mr. Owen Harris\n",
      "23\n",
      "Cumings, Mrs. John Bradley (Florence Briggs Thayer)\n",
      "51\n",
      "Heikkinen, Miss. Laina\n",
      "22\n",
      "Futrelle, Mrs. Jacques Heath (Lily May Peel)\n",
      "44\n",
      "Allen, Mr. William Henry\n",
      "24\n",
      "Moran, Mr. James\n",
      "16\n",
      "McCarthy, Mr. Timothy J\n",
      "23\n",
      "Palsson, Master. Gosta Leonard\n",
      "30\n",
      "Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)\n",
      "49\n",
      "Nasser, Mrs. Nicholas (Adele Achem)\n",
      "35\n",
      "Sandstrom, Miss. Marguerite Rut\n",
      "31\n",
      "Bonnell, Miss. Elizabeth\n",
      "24\n",
      "Saundercock, Mr. William Henry\n",
      "30\n",
      "Andersson, Mr. Anders Johan\n",
      "27\n",
      "Vestrom, Miss. Hulda Amanda Adolfina\n",
      "36\n",
      "Hewlett, Mrs. (Mary D Kingcome) \n",
      "32\n",
      "Rice, Master. Eugene\n",
      "20\n",
      "Williams, Mr. Charles Eugene\n",
      "28\n",
      "Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele)\n",
      "55\n",
      "Masselmani, Mrs. Fatima\n",
      "23\n",
      "Fynney, Mr. Joseph J\n",
      "20\n",
      "Beesley, Mr. Lawrence\n",
      "21\n",
      "McGowan, Miss. Anna \"Annie\"\n",
      "27\n",
      "Sloper, Mr. William Thompson\n",
      "28\n",
      "Palsson, Miss. Torborg Danira\n",
      "29\n",
      "Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson)\n",
      "57\n",
      "Emir, Mr. Farred Chehab\n",
      "23\n",
      "Fortune, Mr. Charles Alexander\n",
      "30\n",
      "O'Dwyer, Miss. Ellen \"Nellie\"\n",
      "29\n",
      "Todoroff, Mr. Lalio\n",
      "19\n",
      "Uruchurtu, Don. Manuel E\n",
      "24\n",
      "Spencer, Mrs. William Augustus (Marie Eugenie)\n",
      "46\n",
      "Glynn, Miss. Mary Agatha\n",
      "24\n",
      "Wheadon, Mr. Edward H\n",
      "21\n",
      "Meyer, Mr. Edgar Joseph\n",
      "23\n",
      "Holverson, Mr. Alexander Oskar\n",
      "30\n",
      "Mamee, Mr. Hanna\n",
      "16\n",
      "Cann, Mr. Ernest Charles\n",
      "24\n",
      "Vander Planke, Miss. Augusta Maria\n",
      "34\n",
      "Nicola-Yarred, Miss. Jamila\n",
      "27\n",
      "Ahlin, Mrs. Johan (Johanna Persdotter Larsson)\n",
      "46\n",
      "Turpin, Mrs. William John Robert (Dorothy Ann Wonnacott)\n",
      "56\n",
      "Kraeff, Mr. Theodor\n",
      "19\n",
      "Laroche, Miss. Simonne Marie Anne Andree\n",
      "40\n",
      "Devaney, Miss. Margaret Delia\n",
      "29\n",
      "Rogers, Mr. William John\n",
      "24\n",
      "Lennon, Mr. Denis\n",
      "17\n",
      "O'Driscoll, Miss. Bridget\n",
      "25\n",
      "Samaan, Mr. Youssef\n",
      "19\n",
      "Arnold-Franchi, Mrs. Josef (Josefine Franchi)\n",
      "45\n",
      "Panula, Master. Juha Niilo\n",
      "26\n",
      "Nosworthy, Mr. Richard Cater\n",
      "28\n",
      "Harper, Mrs. Henry Sleeper (Myna Haxtun)\n",
      "40\n",
      "Faunthorpe, Mrs. Lizzie (Elizabeth Anne Wilkinson)\n",
      "50\n",
      "Ostby, Mr. Engelhart Cornelius\n",
      "30\n",
      "Woolner, Mr. Hugh\n",
      "17\n",
      "Rugg, Miss. Emily\n",
      "17\n",
      "Novel, Mr. Mansouer\n",
      "19\n",
      "West, Miss. Constance Mirium\n",
      "28\n",
      "Goodwin, Master. William Frederick\n",
      "34\n",
      "Sirayanian, Mr. Orsen\n",
      "21\n",
      "Icard, Miss. Amelie\n",
      "19\n",
      "Harris, Mr. Henry Birkhardt\n",
      "27\n",
      "Skoog, Master. Harald\n",
      "21\n",
      "Stewart, Mr. Albert A\n",
      "21\n",
      "Moubarek, Master. Gerios\n",
      "24\n",
      "Nye, Mrs. (Elizabeth Ramell)\n",
      "28\n",
      "Crease, Mr. Ernest James\n",
      "24\n",
      "Andersson, Miss. Erna Alexandra\n",
      "31\n",
      "Kink, Mr. Vincenz\n",
      "17\n",
      "Jenkin, Mr. Stephen Curnow\n",
      "26\n",
      "Goodwin, Miss. Lillian Amy\n",
      "26\n",
      "Hood, Mr. Ambrose Jr\n",
      "20\n",
      "Chronopoulos, Mr. Apostolos\n",
      "27\n",
      "Bing, Mr. Lee\n",
      "13\n",
      "Moen, Mr. Sigurd Hansen\n",
      "23\n",
      "Staneff, Mr. Ivan\n",
      "17\n",
      "Moutal, Mr. Rahamin Haim\n",
      "24\n",
      "Caldwell, Master. Alden Gates\n",
      "29\n",
      "Dowdell, Miss. Elizabeth\n",
      "24\n",
      "Waelens, Mr. Achille\n",
      "20\n",
      "Sheerlinck, Mr. Jan Baptist\n",
      "27\n",
      "McDermott, Miss. Brigdet Delia\n",
      "30\n",
      "Carrau, Mr. Francisco M\n",
      "23\n",
      "Ilett, Miss. Bertha\n",
      "19\n",
      "Backstrom, Mrs. Karl Alfred (Maria Mathilda Gustafsson)\n",
      "55\n",
      "Ford, Mr. William Neal\n",
      "22\n",
      "Slocovski, Mr. Selman Francis\n",
      "29\n",
      "Fortune, Miss. Mabel Helen\n",
      "26\n",
      "Celotti, Mr. Francesco\n",
      "22\n",
      "Christmann, Mr. Emil\n",
      "20\n",
      "Andreasson, Mr. Paul Edvin\n",
      "26\n",
      "Chaffee, Mr. Herbert Fuller\n",
      "27\n",
      "Dean, Mr. Bertram Frank\n",
      "23\n",
      "Coxon, Mr. Daniel\n",
      "17\n",
      "Shorney, Mr. Charles Joseph\n",
      "27\n",
      "Goldschmidt, Mr. George B\n",
      "25\n",
      "Greenfield, Mr. William Bertram\n",
      "31\n",
      "Doling, Mrs. John T (Ada Julia Bone)\n",
      "36\n",
      "Kantor, Mr. Sinai\n",
      "17\n",
      "Petranec, Miss. Matilda\n",
      "23\n",
      "Petroff, Mr. Pastcho (\"Pentcho\")\n",
      "32\n",
      "White, Mr. Richard Frasar\n",
      "25\n",
      "Johansson, Mr. Gustaf Joel\n",
      "26\n",
      "Gustafsson, Mr. Anders Vilhelm\n",
      "30\n",
      "Mionoff, Mr. Stoytcho\n",
      "21\n",
      "Salkjelsvik, Miss. Anna Kristine\n",
      "32\n",
      "Moss, Mr. Albert Johan\n",
      "22\n",
      "Rekic, Mr. Tido\n",
      "15\n",
      "Moran, Miss. Bertha\n",
      "19\n",
      "Porter, Mr. Walter Chamberlain\n",
      "30\n",
      "Zabour, Miss. Hileni\n",
      "20\n",
      "Barton, Mr. David John\n",
      "22\n",
      "Jussila, Miss. Katriina\n",
      "23\n",
      "Attalah, Miss. Malake\n",
      "21\n",
      "Pekoniemi, Mr. Edvard\n",
      "21\n",
      "Connors, Mr. Patrick\n",
      "20\n",
      "Turpin, Mr. William John Robert\n",
      "31\n",
      "Baxter, Mr. Quigg Edmond\n",
      "24\n",
      "Andersson, Miss. Ellis Anna Maria\n",
      "33\n",
      "Hickman, Mr. Stanley George\n",
      "27\n",
      "Moore, Mr. Leonard Charles\n",
      "26\n",
      "Nasser, Mr. Nicholas\n",
      "20\n",
      "Webber, Miss. Susan\n",
      "19\n",
      "White, Mr. Percival Wayland\n",
      "27\n",
      "Nicola-Yarred, Master. Elias\n",
      "28\n",
      "McMahon, Mr. Martin\n",
      "19\n",
      "Madsen, Mr. Fridtjof Arne\n",
      "25\n",
      "Peter, Miss. Anna\n",
      "17\n",
      "Ekstrom, Mr. Johan\n",
      "18\n",
      "Drazenoic, Mr. Jozef\n",
      "20\n",
      "Coelho, Mr. Domingos Fernandeo\n",
      "30\n",
      "Robins, Mrs. Alexander A (Grace Charity Laury)\n",
      "46\n",
      "Weisz, Mrs. Leopold (Mathilde Francoise Pede)\n",
      "45\n",
      "Sobey, Mr. Samuel James Hayden\n",
      "30\n",
      "Richard, Mr. Emile\n",
      "18\n",
      "Newsom, Miss. Helen Monypeny\n",
      "28\n",
      "Futrelle, Mr. Jacques Heath\n",
      "27\n",
      "Osen, Mr. Olaf Elon\n",
      "19\n",
      "Giglio, Mr. Victor\n",
      "18\n",
      "Boulos, Mrs. Joseph (Sultana)\n",
      "29\n",
      "Nysten, Miss. Anna Sofia\n",
      "24\n",
      "Hakkarainen, Mrs. Pekka Pietari (Elin Matilda Dolck)\n",
      "52\n",
      "Burke, Mr. Jeremiah\n",
      "19\n",
      "Andrew, Mr. Edgardo Samuel\n",
      "26\n",
      "Nicholls, Mr. Joseph Charles\n",
      "28\n",
      "Andersson, Mr. August Edvard (\"Wennerstrom\")\n",
      "44\n",
      "Ford, Miss. Robina Maggie \"Ruby\"\n",
      "32\n",
      "Navratil, Mr. Michel (\"Louis M Hoffman\")\n",
      "40\n",
      "Byles, Rev. Thomas Roussel Davids\n",
      "33\n",
      "Bateman, Rev. Robert James\n",
      "26\n",
      "Pears, Mrs. Thomas (Edith Wearne)\n",
      "33\n",
      "Meo, Mr. Alfonzo\n",
      "16\n",
      "van Billiard, Mr. Austin Blyler\n",
      "31\n",
      "Olsen, Mr. Ole Martin\n",
      "21\n",
      "Williams, Mr. Charles Duane\n",
      "27\n",
      "Gilnagh, Miss. Katherine \"Katie\"\n",
      "32\n",
      "Corn, Mr. Harry\n",
      "15\n",
      "Smiljanic, Mr. Mile\n",
      "19\n",
      "Sage, Master. Thomas Henry\n",
      "26\n",
      "Cribb, Mr. John Hatfield\n",
      "24\n",
      "Watt, Mrs. James (Elizabeth \"Bessie\" Inglis Milne)\n",
      "50\n",
      "Bengtsson, Mr. John Viktor\n",
      "26\n",
      "Calic, Mr. Jovo\n",
      "15\n",
      "Panula, Master. Eino Viljami\n",
      "28\n",
      "Goldsmith, Master. Frank John William \"Frankie\"\n",
      "47\n",
      "Chibnall, Mrs. (Edith Martha Bowerman)\n",
      "38\n",
      "Skoog, Mrs. William (Anna Bernhardina Karlsson)\n",
      "47\n",
      "Baumann, Mr. John D\n",
      "19\n",
      "Ling, Mr. Lee\n",
      "13\n",
      "Van der hoef, Mr. Wyckoff\n",
      "25\n",
      "Rice, Master. Arthur\n",
      "20\n",
      "Johnson, Miss. Eleanor Ileen\n",
      "28\n",
      "Sivola, Mr. Antti Wilhelm\n",
      "25\n",
      "Smith, Mr. James Clinch\n",
      "23\n",
      "Klasen, Mr. Klas Albin\n",
      "22\n",
      "Lefebre, Master. Henry Forbes\n",
      "29\n",
      "Isham, Miss. Ann Elizabeth\n",
      "26\n",
      "Hale, Mr. Reginald\n",
      "18\n",
      "Leonard, Mr. Lionel\n",
      "19\n",
      "Sage, Miss. Constance Gladys\n",
      "28\n",
      "Pernot, Mr. Rene\n",
      "16\n",
      "Asplund, Master. Clarence Gustaf Hugo\n",
      "37\n",
      "Becker, Master. Richard F\n",
      "25\n",
      "Kink-Heilmann, Miss. Luise Gretchen\n",
      "35\n",
      "Rood, Mr. Hugh Roscoe\n",
      "21\n",
      "O'Brien, Mrs. Thomas (Johanna \"Hannah\" Godfrey)\n",
      "47\n",
      "Romaine, Mr. Charles Hallace (\"Mr C Rolmane\")\n",
      "45\n",
      "Bourke, Mr. John\n",
      "16\n",
      "Turcin, Mr. Stjepan\n",
      "19\n",
      "Pinsky, Mrs. (Rosa)\n",
      "19\n",
      "Carbines, Mr. William\n",
      "21\n",
      "Andersen-Jensen, Miss. Carla Christine Nielsine\n",
      "47\n",
      "Navratil, Master. Michel M\n",
      "26\n",
      "Brown, Mrs. James Joseph (Margaret Tobin)\n",
      "41\n",
      "Lurette, Miss. Elise\n",
      "20\n",
      "Mernagh, Mr. Robert\n",
      "19\n",
      "Olsen, Mr. Karl Siegwart Andreas\n",
      "32\n",
      "Madigan, Miss. Margaret \"Maggie\"\n",
      "32\n",
      "Yrois, Miss. Henriette (\"Mrs Harbeck\")\n",
      "38\n",
      "Vande Walle, Mr. Nestor Cyriel\n",
      "30\n",
      "Sage, Mr. Frederick\n",
      "19\n",
      "Johanson, Mr. Jakob Alfred\n",
      "26\n",
      "Youseff, Mr. Gerious\n",
      "20\n",
      "Cohen, Mr. Gurshon \"Gus\"\n",
      "24\n",
      "Strom, Miss. Telma Matilda\n",
      "26\n",
      "Backstrom, Mr. Karl Alfred\n",
      "26\n",
      "Albimona, Mr. Nassef Cassem\n",
      "27\n",
      "Carr, Miss. Helen \"Ellen\"\n",
      "25\n",
      "Blank, Mr. Henry\n",
      "16\n",
      "Ali, Mr. Ahmed\n",
      "14\n",
      "Cameron, Miss. Clear Annie\n",
      "26\n",
      "Perkin, Mr. John Henry\n",
      "22\n",
      "Givard, Mr. Hans Kristensen\n",
      "27\n",
      "Kiernan, Mr. Philip\n",
      "19\n",
      "Newell, Miss. Madeleine\n",
      "23\n",
      "Honkanen, Miss. Eliina\n",
      "22\n",
      "Jacobsohn, Mr. Sidney Samuel\n",
      "28\n",
      "Bazzani, Miss. Albina\n",
      "21\n",
      "Harris, Mr. Walter\n",
      "18\n",
      "Sunderland, Mr. Victor Francis\n",
      "30\n",
      "Bracken, Mr. James H\n",
      "20\n",
      "Green, Mr. George Henry\n",
      "23\n",
      "Nenkoff, Mr. Christo\n",
      "20\n",
      "Hoyt, Mr. Frederick Maxfield\n",
      "28\n",
      "Berglund, Mr. Karl Ivar Sven\n",
      "28\n",
      "Mellors, Mr. William John\n",
      "25\n",
      "Lovell, Mr. John Hall (\"Henry\")\n",
      "31\n",
      "Fahlstrom, Mr. Arne Jonas\n",
      "25\n",
      "Lefebre, Miss. Mathilde\n",
      "23\n",
      "Harris, Mrs. Henry Birkhardt (Irene Wallach)\n",
      "44\n",
      "Larsson, Mr. Bengt Edvin\n",
      "24\n",
      "Sjostedt, Mr. Ernst Adolf\n",
      "25\n",
      "Asplund, Miss. Lillian Gertrud\n",
      "30\n",
      "Leyson, Mr. Robert William Norman\n",
      "33\n",
      "Harknett, Miss. Alice Phoebe\n",
      "28\n",
      "Hold, Mr. Stephen\n",
      "17\n",
      "Collyer, Miss. Marjorie \"Lottie\"\n",
      "32\n",
      "Pengelly, Mr. Frederick William\n",
      "31\n",
      "Hunt, Mr. George Henry\n",
      "22\n",
      "Zabour, Miss. Thamine\n",
      "21\n",
      "Murphy, Miss. Katherine \"Kate\"\n",
      "30\n",
      "Coleridge, Mr. Reginald Charles\n",
      "31\n",
      "Maenpaa, Mr. Matti Alexanteri\n",
      "29\n",
      "Attalah, Mr. Sleiman\n",
      "20\n",
      "Minahan, Dr. William Edward\n",
      "27\n",
      "Lindahl, Miss. Agda Thorilda Viktoria\n",
      "37\n",
      "Hamalainen, Mrs. William (Anna)\n",
      "31\n",
      "Beckwith, Mr. Richard Leonard\n",
      "29\n",
      "Carter, Rev. Ernest Courtenay\n",
      "29\n",
      "Reed, Mr. James George\n",
      "22\n",
      "Strom, Mrs. Wilhelm (Elna Matilda Persson)\n",
      "42\n",
      "Stead, Mr. William Thomas\n",
      "25\n",
      "Lobb, Mr. William Arthur\n",
      "24\n",
      "Rosblom, Mrs. Viktor (Helena Wilhelmina)\n",
      "40\n",
      "Touma, Mrs. Darwis (Hanne Youssef Razi)\n",
      "39\n",
      "Thorne, Mrs. Gertrude Maybelle\n",
      "30\n",
      "Cherry, Miss. Gladys\n",
      "20\n",
      "Parrish, Mrs. (Lutie Davis)\n",
      "27\n",
      "Smith, Mr. Thomas\n",
      "17\n",
      "Asplund, Master. Edvin Rojj Felix\n",
      "33\n",
      "Taussig, Mr. Emil\n",
      "17\n",
      "Harrison, Mr. William\n",
      "21\n",
      "Henry, Miss. Delia\n",
      "18\n",
      "Reeves, Mr. David\n",
      "17\n",
      "Panula, Mr. Ernesti Arvid\n",
      "25\n",
      "Persson, Mr. Ernst Ulrik\n",
      "24\n",
      "Graham, Mrs. William Thompson (Edith Junkins)\n",
      "45\n",
      "Bissette, Miss. Amelia\n",
      "22\n",
      "Cairns, Mr. Alexander\n",
      "21\n",
      "Tornquist, Mr. William Henry\n",
      "28\n",
      "Mellinger, Mrs. (Elizabeth Anne Maidment)\n",
      "41\n",
      "Natsch, Mr. Charles H\n",
      "21\n",
      "Healy, Miss. Hanora \"Nora\"\n",
      "26\n",
      "Andrews, Miss. Kornelia Theodosia\n",
      "33\n",
      "Lindblom, Miss. Augusta Charlotta\n",
      "33\n",
      "Parkes, Mr. Francis \"Frank\"\n",
      "27\n",
      "Rice, Master. Eric\n",
      "18\n",
      "Abbott, Mrs. Stanton (Rosa Hunt)\n",
      "32\n",
      "Duane, Mr. Frank\n",
      "16\n",
      "Olsson, Mr. Nils Johan Goransson\n",
      "32\n",
      "de Pelsmaeker, Mr. Alfons\n",
      "25\n",
      "Dorking, Mr. Edward Arthur\n",
      "26\n",
      "Smith, Mr. Richard William\n",
      "26\n",
      "Stankovic, Mr. Ivan\n",
      "19\n",
      "de Mulder, Mr. Theodore\n",
      "23\n",
      "Naidenoff, Mr. Penko\n",
      "20\n",
      "Hosono, Mr. Masabumi\n",
      "20\n",
      "Connolly, Miss. Kate\n",
      "20\n",
      "Barber, Miss. Ellen \"Nellie\"\n",
      "28\n",
      "Bishop, Mrs. Dickinson H (Helen Walton)\n",
      "39\n",
      "Levy, Mr. Rene Jacques\n",
      "22\n",
      "Haas, Miss. Aloisia\n",
      "19\n",
      "Mineff, Mr. Ivan\n",
      "16\n",
      "Lewy, Mr. Ervin G\n",
      "17\n",
      "Hanna, Mr. Mansour\n",
      "18\n",
      "Allison, Miss. Helen Loraine\n",
      "28\n",
      "Saalfeld, Mr. Adolphe\n",
      "21\n",
      "Baxter, Mrs. James (Helene DeLaudeniere Chaput)\n",
      "47\n",
      "Kelly, Miss. Anna Katherine \"Annie Kate\"\n",
      "40\n",
      "McCoy, Mr. Bernard\n",
      "18\n",
      "Johnson, Mr. William Cahoone Jr\n",
      "31\n",
      "Keane, Miss. Nora A\n",
      "19\n",
      "Williams, Mr. Howard Hugh \"Harry\"\n",
      "33\n",
      "Allison, Master. Hudson Trevor\n",
      "30\n",
      "Fleming, Miss. Margaret\n",
      "23\n",
      "Penasco y Castellana, Mrs. Victor de Satode (Maria Josefa Perez de Soto y Vallejo)\n",
      "82\n",
      "Abelson, Mr. Samuel\n",
      "19\n",
      "Francatelli, Miss. Laura Mabel\n",
      "30\n",
      "Hays, Miss. Margaret Bechstein\n",
      "30\n",
      "Ryerson, Miss. Emily Borie\n",
      "26\n",
      "Lahtinen, Mrs. William (Anna Sylfven)\n",
      "37\n",
      "Hendekovic, Mr. Ignjac\n",
      "22\n",
      "Hart, Mr. Benjamin\n",
      "18\n",
      "Nilsson, Miss. Helmina Josefina\n",
      "31\n",
      "Kantor, Mrs. Sinai (Miriam Sternin)\n",
      "35\n",
      "Moraweck, Dr. Ernest\n",
      "20\n",
      "Wick, Miss. Mary Natalie\n",
      "24\n",
      "Spedden, Mrs. Frederic Oakley (Margaretta Corning Stone)\n",
      "56\n",
      "Dennis, Mr. Samuel\n",
      "18\n",
      "Danoff, Mr. Yoto\n",
      "16\n",
      "Slayter, Miss. Hilda Mary\n",
      "25\n",
      "Caldwell, Mrs. Albert Francis (Sylvia Mae Harbaugh)\n",
      "51\n",
      "Sage, Mr. George John Jr\n",
      "24\n",
      "Young, Miss. Marie Grice\n",
      "24\n",
      "Nysveen, Mr. Johan Hansen\n",
      "25\n",
      "Ball, Mrs. (Ada E Hall)\n",
      "23\n",
      "Goldsmith, Mrs. Frank John (Emily Alice Brown)\n",
      "46\n",
      "Hippach, Miss. Jean Gertrude\n",
      "28\n",
      "McCoy, Miss. Agnes\n",
      "18\n",
      "Partner, Mr. Austen\n",
      "19\n",
      "Graham, Mr. George Edward\n",
      "25\n",
      "Vander Planke, Mr. Leo Edmondus\n",
      "31\n",
      "Frauenthal, Mrs. Henry William (Clara Heinsheimer)\n",
      "50\n",
      "Denkoff, Mr. Mitto\n",
      "18\n",
      "Pears, Mr. Thomas Clinton\n",
      "25\n",
      "Burns, Miss. Elizabeth Margaret\n",
      "31\n",
      "Dahl, Mr. Karl Edwart\n",
      "21\n",
      "Blackwell, Mr. Stephen Weart\n",
      "28\n",
      "Navratil, Master. Edmond Roger\n",
      "30\n",
      "Fortune, Miss. Alice Elizabeth\n",
      "30\n",
      "Collander, Mr. Erik Gustaf\n",
      "26\n",
      "Sedgwick, Mr. Charles Frederick Waddington\n",
      "42\n",
      "Fox, Mr. Stanley Hubert\n",
      "23\n",
      "Brown, Miss. Amelia \"Mildred\"\n",
      "29\n",
      "Smith, Miss. Marion Elsie\n",
      "25\n",
      "Davison, Mrs. Thomas Henry (Mary E Finck)\n",
      "41\n",
      "Coutts, Master. William Loch \"William\"\n",
      "38\n",
      "Dimic, Mr. Jovan\n",
      "16\n",
      "Odahl, Mr. Nils Martin\n",
      "22\n",
      "Williams-Lambert, Mr. Fletcher Fellows\n",
      "38\n",
      "Elias, Mr. Tannous\n",
      "18\n",
      "Arnold-Franchi, Mr. Josef\n",
      "25\n",
      "Yousif, Mr. Wazli\n",
      "17\n",
      "Vanden Steen, Mr. Leo Peter\n",
      "27\n",
      "Bowerman, Miss. Elsie Edith\n",
      "27\n",
      "Funk, Miss. Annie Clemmer\n",
      "25\n",
      "McGovern, Miss. Mary\n",
      "20\n",
      "Mockler, Miss. Helen Mary \"Ellie\"\n",
      "33\n",
      "Skoog, Mr. Wilhelm\n",
      "18\n",
      "del Carlo, Mr. Sebastiano\n",
      "25\n",
      "Barbara, Mrs. (Catherine David)\n",
      "31\n",
      "Asim, Mr. Adola\n",
      "15\n",
      "O'Brien, Mr. Thomas\n",
      "19\n",
      "Adahl, Mr. Mauritz Nils Martin\n",
      "30\n",
      "Warren, Mrs. Frank Manley (Anna Sophia Atkinson)\n",
      "48\n",
      "Moussa, Mrs. (Mantoura Boulos)\n",
      "30\n",
      "Jermyn, Miss. Annie\n",
      "19\n",
      "Aubart, Mme. Leontine Pauline\n",
      "29\n",
      "Harder, Mr. George Achilles\n",
      "27\n",
      "Wiklund, Mr. Jakob Alfred\n",
      "25\n",
      "Beavan, Mr. William Thomas\n",
      "26\n",
      "Ringhini, Mr. Sante\n",
      "19\n",
      "Palsson, Miss. Stina Viola\n",
      "26\n",
      "Meyer, Mrs. Edgar Joseph (Leila Saks)\n",
      "37\n",
      "Landergren, Miss. Aurora Adelia\n",
      "31\n",
      "Widener, Mr. Harry Elkins\n",
      "25\n",
      "Betros, Mr. Tannous\n",
      "19\n",
      "Gustafsson, Mr. Karl Gideon\n",
      "27\n",
      "Bidois, Miss. Rosalie\n",
      "21\n",
      "Nakid, Miss. Maria (\"Mary\")\n",
      "27\n",
      "Tikkanen, Mr. Juho\n",
      "18\n",
      "Holverson, Mrs. Alexander Oskar (Mary Aline Towner)\n",
      "51\n",
      "Plotcharsky, Mr. Vasil\n",
      "22\n",
      "Davies, Mr. Charles Henry\n",
      "25\n",
      "Goodwin, Master. Sidney Leonard\n",
      "31\n",
      "Buss, Miss. Kate\n",
      "16\n",
      "Sadlier, Mr. Matthew\n",
      "20\n",
      "Lehmann, Miss. Bertha\n",
      "21\n",
      "Carter, Mr. William Ernest\n",
      "26\n",
      "Jansson, Mr. Carl Olof\n",
      "22\n",
      "Gustafsson, Mr. Johan Birger\n",
      "28\n",
      "Newell, Miss. Marjorie\n",
      "22\n",
      "Sandstrom, Mrs. Hjalmar (Agnes Charlotta Bengtsson)\n",
      "51\n",
      "Johansson, Mr. Erik\n",
      "19\n",
      "Olsson, Miss. Elina\n",
      "19\n",
      "McKane, Mr. Peter David\n",
      "23\n",
      "Pain, Dr. Alfred\n",
      "16\n",
      "Trout, Mrs. William H (Jessie L)\n",
      "32\n",
      "Niskanen, Mr. Juha\n",
      "18\n",
      "Adams, Mr. John\n",
      "15\n",
      "Jussila, Miss. Mari Aina\n",
      "24\n",
      "Hakkarainen, Mr. Pekka Pietari\n",
      "30\n",
      "Oreskovic, Miss. Marija\n",
      "23\n",
      "Gale, Mr. Shadrach\n",
      "18\n",
      "Widegren, Mr. Carl/Charles Peter\n",
      "32\n",
      "Richards, Master. William Rowe\n",
      "30\n",
      "Birkeland, Mr. Hans Martin Monsen\n",
      "33\n",
      "Lefebre, Miss. Ida\n",
      "18\n",
      "Sdycoff, Mr. Todor\n",
      "18\n",
      "Hart, Mr. Henry\n",
      "15\n",
      "Minahan, Miss. Daisy E\n",
      "22\n",
      "Cunningham, Mr. Alfred Fleming\n",
      "30\n",
      "Sundman, Mr. Johan Julian\n",
      "25\n",
      "Meek, Mrs. Thomas (Annie Louise Rowley)\n",
      "39\n",
      "Drew, Mrs. James Vivian (Lulu Thorne Christian)\n",
      "47\n",
      "Silven, Miss. Lyyli Karoliina\n",
      "29\n",
      "Matthews, Mr. William John\n",
      "26\n",
      "Van Impe, Miss. Catharina\n",
      "25\n",
      "Gheorgheff, Mr. Stanio\n",
      "22\n",
      "Charters, Mr. David\n",
      "19\n",
      "Zimmerman, Mr. Leo\n",
      "18\n",
      "Danbom, Mrs. Ernst Gilbert (Anna Sigrid Maria Brogren)\n",
      "54\n",
      "Rosblom, Mr. Viktor Richard\n",
      "27\n",
      "Wiseman, Mr. Phillippe\n",
      "22\n",
      "Clarke, Mrs. Charles V (Ada Maria Winfield)\n",
      "43\n",
      "Phillips, Miss. Kate Florence (\"Mrs Kate Louise Phillips Marshall\")\n",
      "67\n",
      "Flynn, Mr. James\n",
      "16\n",
      "Pickard, Mr. Berk (Berk Trembisky)\n",
      "34\n",
      "Bjornstrom-Steffansson, Mr. Mauritz Hakan\n",
      "41\n",
      "Thorneycroft, Mrs. Percival (Florence Kate White)\n",
      "49\n",
      "Louch, Mrs. Charles Alexander (Alice Adelaide Slow)\n",
      "51\n",
      "Kallio, Mr. Nikolai Erland\n",
      "26\n",
      "Silvey, Mr. William Baird\n",
      "25\n",
      "Carter, Miss. Lucile Polk\n",
      "25\n",
      "Ford, Miss. Doolina Margaret \"Daisy\"\n",
      "36\n",
      "Richards, Mrs. Sidney (Emily Hocking)\n",
      "37\n",
      "Fortune, Mr. Mark\n",
      "17\n",
      "Kvillner, Mr. Johan Henrik Johannesson\n",
      "38\n",
      "Hart, Mrs. Benjamin (Esther Ada Bloomfield)\n",
      "43\n",
      "Hampe, Mr. Leon\n",
      "15\n",
      "Petterson, Mr. Johan Emil\n",
      "25\n",
      "Reynaldo, Ms. Encarnacion\n",
      "25\n",
      "Johannesen-Bratthammer, Mr. Bernt\n",
      "33\n",
      "Dodge, Master. Washington\n",
      "25\n",
      "Mellinger, Miss. Madeleine Violet\n",
      "33\n",
      "Seward, Mr. Frederic Kimber\n",
      "27\n",
      "Baclini, Miss. Marie Catherine\n",
      "30\n",
      "Peuchen, Major. Arthur Godfrey\n",
      "30\n",
      "West, Mr. Edwy Arthur\n",
      "21\n",
      "Hagland, Mr. Ingvald Olai Olsen\n",
      "31\n",
      "Foreman, Mr. Benjamin Laventall\n",
      "31\n",
      "Goldenberg, Mr. Samuel L\n",
      "24\n",
      "Peduzzi, Mr. Joseph\n",
      "19\n",
      "Jalsevac, Mr. Ivan\n",
      "18\n",
      "Millet, Mr. Francis Davis\n",
      "25\n",
      "Kenyon, Mrs. Frederick R (Marion)\n",
      "33\n",
      "Toomey, Miss. Ellen\n",
      "19\n",
      "O'Connor, Mr. Maurice\n",
      "21\n",
      "Anderson, Mr. Harry\n",
      "19\n",
      "Morley, Mr. William\n",
      "19\n",
      "Gee, Mr. Arthur H\n",
      "17\n",
      "Milling, Mr. Jacob Christian\n",
      "28\n",
      "Maisner, Mr. Simon\n",
      "18\n",
      "Goncalves, Mr. Manuel Estanslas\n",
      "31\n",
      "Campbell, Mr. William\n",
      "21\n",
      "Smart, Mr. John Montgomery\n",
      "26\n",
      "Scanlan, Mr. James\n",
      "18\n",
      "Baclini, Miss. Helene Barbara\n",
      "29\n",
      "Keefe, Mr. Arthur\n",
      "17\n",
      "Cacic, Mr. Luka\n",
      "15\n",
      "West, Mrs. Edwy Arthur (Ada Mary Worth)\n",
      "39\n",
      "Jerwan, Mrs. Amin S (Marie Marthe Thuillard)\n",
      "44\n",
      "Strandberg, Miss. Ida Sofia\n",
      "27\n",
      "Clifford, Mr. George Quincy\n",
      "27\n",
      "Renouf, Mr. Peter Henry\n",
      "23\n",
      "Braund, Mr. Lewis Richard\n",
      "25\n",
      "Karlsson, Mr. Nils August\n",
      "25\n",
      "Hirvonen, Miss. Hildur E\n",
      "24\n",
      "Goodwin, Master. Harold Victor\n",
      "30\n",
      "Frost, Mr. Anthony Wood \"Archie\"\n",
      "32\n",
      "Rouse, Mr. Richard Henry\n",
      "24\n",
      "Turkula, Mrs. (Hedwig)\n",
      "22\n",
      "Bishop, Mr. Dickinson H\n",
      "23\n",
      "Lefebre, Miss. Jeannie\n",
      "22\n",
      "Hoyt, Mrs. Frederick Maxfield (Jane Anne Forby)\n",
      "47\n",
      "Kent, Mr. Edward Austin\n",
      "23\n",
      "Somerton, Mr. Francis William\n",
      "29\n",
      "Coutts, Master. Eden Leslie \"Neville\"\n",
      "37\n",
      "Hagland, Mr. Konrad Mathias Reiersen\n",
      "36\n",
      "Windelov, Mr. Einar\n",
      "19\n",
      "Molson, Mr. Harry Markland\n",
      "26\n",
      "Artagaveytia, Mr. Ramon\n",
      "23\n",
      "Stanley, Mr. Edward Roland\n",
      "26\n",
      "Yousseff, Mr. Gerious\n",
      "21\n",
      "Eustis, Miss. Elizabeth Mussey\n",
      "30\n",
      "Shellard, Mr. Frederick William\n",
      "31\n",
      "Allison, Mrs. Hudson J C (Bessie Waldo Daniels)\n",
      "47\n",
      "Svensson, Mr. Olof\n",
      "18\n",
      "Calic, Mr. Petar\n",
      "16\n",
      "Canavan, Miss. Mary\n",
      "19\n",
      "O'Sullivan, Miss. Bridget Mary\n",
      "30\n",
      "Laitinen, Miss. Kristina Sofia\n",
      "30\n",
      "Maioni, Miss. Roberta\n",
      "21\n",
      "Penasco y Castellana, Mr. Victor de Satode\n",
      "42\n",
      "Quick, Mrs. Frederick Charles (Jane Richards)\n",
      "45\n",
      "Bradley, Mr. George (\"George Arthur Brayton\")\n",
      "45\n",
      "Olsen, Mr. Henry Margido\n",
      "24\n",
      "Lang, Mr. Fang\n",
      "14\n",
      "Daly, Mr. Eugene Patrick\n",
      "24\n",
      "Webber, Mr. James\n",
      "17\n",
      "McGough, Mr. James Robert\n",
      "25\n",
      "Rothschild, Mrs. Martin (Elizabeth L. Barrett)\n",
      "46\n",
      "Coleff, Mr. Satio\n",
      "17\n",
      "Walker, Mr. William Anderson\n",
      "28\n",
      "Lemore, Mrs. (Amelia Milley)\n",
      "28\n",
      "Ryan, Mr. Patrick\n",
      "17\n",
      "Angle, Mrs. William A (Florence \"Mary\" Agnes Hughes)\n",
      "52\n",
      "Pavlovic, Mr. Stefo\n",
      "19\n",
      "Perreault, Miss. Anne\n",
      "21\n",
      "Vovk, Mr. Janko\n",
      "15\n",
      "Lahoud, Mr. Sarkis\n",
      "18\n",
      "Hippach, Mrs. Louis Albert (Ida Sophia Fischer)\n",
      "47\n",
      "Kassem, Mr. Fared\n",
      "17\n",
      "Farrell, Mr. James\n",
      "18\n",
      "Ridsdale, Miss. Lucy\n",
      "20\n",
      "Farthing, Mr. John\n",
      "18\n",
      "Salonen, Mr. Johan Werner\n",
      "25\n",
      "Hocking, Mr. Richard George\n",
      "27\n",
      "Quick, Miss. Phyllis May\n",
      "24\n",
      "Toufik, Mr. Nakli\n",
      "17\n",
      "Elias, Mr. Joseph Jr\n",
      "20\n",
      "Peter, Mrs. Catherine (Catherine Rizk)\n",
      "38\n",
      "Cacic, Miss. Marija\n",
      "19\n",
      "Hart, Miss. Eva Miriam\n",
      "22\n",
      "Butt, Major. Archibald Willingham\n",
      "33\n",
      "LeRoy, Miss. Bertha\n",
      "19\n",
      "Risien, Mr. Samuel Beard\n",
      "24\n",
      "Frolicher, Miss. Hedwig Margaritha\n",
      "34\n",
      "Crosby, Miss. Harriet R\n",
      "23\n",
      "Andersson, Miss. Ingeborg Constanzia\n",
      "36\n",
      "Andersson, Miss. Sigrid Elisabeth\n",
      "33\n",
      "Beane, Mr. Edward\n",
      "17\n",
      "Douglas, Mr. Walter Donald\n",
      "26\n",
      "Nicholson, Mr. Arthur Ernest\n",
      "28\n",
      "Beane, Mrs. Edward (Ethel Clarke)\n",
      "33\n",
      "Padro y Manent, Mr. Julian\n",
      "26\n",
      "Goldsmith, Mr. Frank John\n",
      "25\n",
      "Davies, Master. John Morgan Jr\n",
      "30\n",
      "Thayer, Mr. John Borland Jr\n",
      "27\n",
      "Sharp, Mr. Percival James R\n",
      "27\n",
      "O'Brien, Mr. Timothy\n",
      "20\n",
      "Leeni, Mr. Fahim (\"Philip Zenni\")\n",
      "33\n",
      "Ohman, Miss. Velin\n",
      "18\n",
      "Wright, Mr. George\n",
      "18\n",
      "Duff Gordon, Lady. (Lucille Christiana Sutherland) (\"Mrs Morgan\")\n",
      "65\n",
      "Robbins, Mr. Victor\n",
      "19\n",
      "Taussig, Mrs. Emil (Tillie Mandelbaum)\n",
      "38\n",
      "de Messemaeker, Mrs. Guillaume Joseph (Emma)\n",
      "44\n",
      "Morrow, Mr. Thomas Rowan\n",
      "24\n",
      "Sivic, Mr. Husein\n",
      "17\n",
      "Norman, Mr. Robert Douglas\n",
      "26\n",
      "Simmons, Mr. John\n",
      "17\n",
      "Meanwell, Miss. (Marion Ogden)\n",
      "30\n",
      "Davies, Mr. Alfred J\n",
      "20\n",
      "Stoytcheff, Mr. Ilia\n",
      "20\n",
      "Palsson, Mrs. Nils (Alma Cornelia Berglund)\n",
      "43\n",
      "Doharr, Mr. Tannous\n",
      "19\n",
      "Jonsson, Mr. Carl\n",
      "17\n",
      "Harris, Mr. George\n",
      "18\n",
      "Appleton, Mrs. Edward Dale (Charlotte Lamson)\n",
      "45\n",
      "Flynn, Mr. John Irwin (\"Irving\")\n",
      "32\n",
      "Kelly, Miss. Mary\n",
      "17\n",
      "Rush, Mr. Alfred George John\n",
      "28\n",
      "Patchett, Mr. George\n",
      "20\n",
      "Garside, Miss. Ethel\n",
      "20\n",
      "Silvey, Mrs. William Baird (Alice Munger)\n",
      "41\n",
      "Caram, Mrs. Joseph (Maria Elias)\n",
      "32\n",
      "Jussila, Mr. Eiriik\n",
      "19\n",
      "Christy, Miss. Julie Rachel\n",
      "27\n",
      "Thayer, Mrs. John Borland (Marian Longstreth Morris)\n",
      "52\n",
      "Downton, Mr. William James\n",
      "26\n",
      "Ross, Mr. John Hugo\n",
      "19\n",
      "Paulner, Mr. Uscher\n",
      "19\n",
      "Taussig, Miss. Ruth\n",
      "19\n",
      "Jarvis, Mr. John Denzil\n",
      "23\n",
      "Frolicher-Stehli, Mr. Maxmillian\n",
      "32\n",
      "Gilinski, Mr. Eliezer\n",
      "21\n",
      "Murdlin, Mr. Joseph\n",
      "19\n",
      "Rintamaki, Mr. Matti\n",
      "20\n",
      "Stephenson, Mrs. Walter Bertram (Martha Eustis)\n",
      "47\n",
      "Elsbury, Mr. William James\n",
      "26\n",
      "Bourke, Miss. Mary\n",
      "18\n",
      "Chapman, Mr. John Henry\n",
      "23\n",
      "Van Impe, Mr. Jean Baptiste\n",
      "27\n",
      "Leitch, Miss. Jessie Wills\n",
      "26\n",
      "Johnson, Mr. Alfred\n",
      "19\n",
      "Boulos, Mr. Hanna\n",
      "17\n",
      "Duff Gordon, Sir. Cosmo Edmund (\"Mr Morgan\")\n",
      "44\n",
      "Jacobsohn, Mrs. Sidney Samuel (Amy Frances Christy)\n",
      "51\n",
      "Slabenoff, Mr. Petco\n",
      "20\n",
      "Harrington, Mr. Charles H\n",
      "25\n",
      "Torber, Mr. Ernst William\n",
      "25\n",
      "Homer, Mr. Harry (\"Mr E Haven\")\n",
      "31\n",
      "Lindell, Mr. Edvard Bengtsson\n",
      "29\n",
      "Karaic, Mr. Milan\n",
      "17\n",
      "Daniel, Mr. Robert Williams\n",
      "27\n",
      "Laroche, Mrs. Joseph (Juliette Marie Louise Lafargue)\n",
      "53\n",
      "Shutes, Miss. Elizabeth W\n",
      "25\n",
      "Andersson, Mrs. Anders Johan (Alfrida Konstantia Brogren)\n",
      "57\n",
      "Jardin, Mr. Jose Neto\n",
      "21\n",
      "Murphy, Miss. Margaret Jane\n",
      "27\n",
      "Horgan, Mr. John\n",
      "16\n",
      "Brocklebank, Mr. William Alfred\n",
      "31\n",
      "Herman, Miss. Alice\n",
      "19\n",
      "Danbom, Mr. Ernst Gilbert\n",
      "25\n",
      "Lobb, Mrs. William Arthur (Cordelia K Stanlick)\n",
      "47\n",
      "Becker, Miss. Marion Louise\n",
      "27\n",
      "Gavey, Mr. Lawrence\n",
      "19\n",
      "Yasbeck, Mr. Antoni\n",
      "19\n",
      "Kimball, Mr. Edwin Nelson Jr\n",
      "28\n",
      "Nakid, Mr. Sahid\n",
      "16\n",
      "Hansen, Mr. Henry Damsgaard\n",
      "27\n",
      "Bowen, Mr. David John \"Dai\"\n",
      "27\n",
      "Sutton, Mr. Frederick\n",
      "21\n",
      "Kirkland, Rev. Charles Leonard\n",
      "30\n",
      "Longley, Miss. Gretchen Fiske\n",
      "29\n",
      "Bostandyeff, Mr. Guentcho\n",
      "25\n",
      "O'Connell, Mr. Patrick D\n",
      "24\n",
      "Barkworth, Mr. Algernon Henry Wilson\n",
      "36\n",
      "Lundahl, Mr. Johan Svensson\n",
      "27\n",
      "Stahelin-Maeglin, Dr. Max\n",
      "25\n",
      "Parr, Mr. William Henry Marsh\n",
      "29\n",
      "Skoog, Miss. Mabel\n",
      "18\n",
      "Davis, Miss. Mary\n",
      "17\n",
      "Leinonen, Mr. Antti Gustaf\n",
      "26\n",
      "Collyer, Mr. Harvey\n",
      "19\n",
      "Panula, Mrs. Juha (Maria Emilia Ojala)\n",
      "38\n",
      "Thorneycroft, Mr. Percival\n",
      "26\n",
      "Jensen, Mr. Hans Peder\n",
      "22\n",
      "Sagesser, Mlle. Emma\n",
      "20\n",
      "Skoog, Miss. Margit Elizabeth\n",
      "29\n",
      "Foo, Mr. Choong\n",
      "15\n",
      "Baclini, Miss. Eugenie\n",
      "22\n",
      "Harper, Mr. Henry Sleeper\n",
      "25\n",
      "Cor, Mr. Liudevit\n",
      "17\n",
      "Simonius-Blumer, Col. Oberst Alfons\n",
      "35\n",
      "Willey, Mr. Edward\n",
      "18\n",
      "Stanley, Miss. Amy Zillah Elsie\n",
      "31\n",
      "Mitkoff, Mr. Mito\n",
      "17\n",
      "Doling, Miss. Elsie\n",
      "19\n",
      "Kalvik, Mr. Johannes Halvorsen\n",
      "30\n",
      "O'Leary, Miss. Hanora \"Norah\"\n",
      "29\n",
      "Hegarty, Miss. Hanora \"Nora\"\n",
      "28\n",
      "Hickman, Mr. Leonard Mark\n",
      "25\n",
      "Radeff, Mr. Alexander\n",
      "21\n",
      "Bourke, Mrs. John (Catherine)\n",
      "29\n",
      "Eitemiller, Mr. George Floyd\n",
      "28\n",
      "Newell, Mr. Arthur Webster\n",
      "26\n",
      "Frauenthal, Dr. Henry William\n",
      "29\n",
      "Badt, Mr. Mohamed\n",
      "17\n",
      "Colley, Mr. Edward Pomeroy\n",
      "26\n",
      "Coleff, Mr. Peju\n",
      "16\n",
      "Lindqvist, Mr. Eino William\n",
      "27\n",
      "Hickman, Mr. Lewis\n",
      "18\n",
      "Butler, Mr. Reginald Fenton\n",
      "27\n",
      "Rommetvedt, Mr. Knud Paust\n",
      "26\n",
      "Cook, Mr. Jacob\n",
      "15\n",
      "Taylor, Mrs. Elmer Zebley (Juliet Cummins Wright)\n",
      "49\n",
      "Brown, Mrs. Thomas William Solomon (Elizabeth Catherine Ford)\n",
      "61\n",
      "Davidson, Mr. Thornton\n",
      "22\n",
      "Mitchell, Mr. Henry Michael\n",
      "27\n",
      "Wilhelms, Mr. Charles\n",
      "21\n",
      "Watson, Mr. Ennis Hastings\n",
      "26\n",
      "Edvardsson, Mr. Gustaf Hjalmar\n",
      "30\n",
      "Sawyer, Mr. Frederick Charles\n",
      "29\n",
      "Turja, Miss. Anna Sofia\n",
      "23\n",
      "Goodwin, Mrs. Frederick (Augusta Tyler)\n",
      "39\n",
      "Peters, Miss. Katie\n",
      "19\n",
      "Hassab, Mr. Hammad\n",
      "18\n",
      "Olsvigen, Mr. Thor Anderson\n",
      "27\n",
      "Goodwin, Mr. Charles Edward\n",
      "27\n",
      "Brown, Mr. Thomas William Solomon\n",
      "33\n",
      "Laroche, Mr. Joseph Philippe Lemercier\n",
      "38\n",
      "Panula, Mr. Jaako Arnold\n",
      "24\n",
      "Dakic, Mr. Branko\n",
      "17\n",
      "Fischer, Mr. Eberhard Thelander\n",
      "31\n",
      "Madill, Miss. Georgette Alexandra\n",
      "33\n",
      "Dick, Mr. Albert Adrian\n",
      "23\n",
      "Karun, Miss. Manca\n",
      "18\n",
      "Lam, Mr. Ali\n",
      "12\n",
      "Saad, Mr. Khalil\n",
      "16\n",
      "Weir, Col. John\n",
      "15\n",
      "Chapman, Mr. Charles Henry\n",
      "26\n",
      "Kelly, Mr. James\n",
      "16\n",
      "Mullens, Miss. Katherine \"Katie\"\n",
      "32\n",
      "Thayer, Mr. John Borland\n",
      "24\n",
      "Humblen, Mr. Adolf Mathias Nicolai Olsen\n",
      "40\n",
      "Astor, Mrs. John Jacob (Madeleine Talmadge Force)\n",
      "49\n",
      "Silverthorne, Mr. Spencer Victor\n",
      "32\n",
      "Barbara, Miss. Saiide\n",
      "21\n",
      "Gallagher, Mr. Martin\n",
      "21\n",
      "Hansen, Mr. Henrik Juul\n",
      "23\n",
      "Morley, Mr. Henry Samuel (\"Mr Henry Marshall\")\n",
      "46\n",
      "Kelly, Mrs. Florence \"Fannie\"\n",
      "29\n",
      "Calderhead, Mr. Edward Pennington\n",
      "33\n",
      "Cleaver, Miss. Alice\n",
      "20\n",
      "Moubarek, Master. Halim Gonios (\"William George\")\n",
      "49\n",
      "Mayne, Mlle. Berthe Antonine (\"Mrs de Villiers\")\n",
      "48\n",
      "Klaber, Mr. Herman\n",
      "18\n",
      "Taylor, Mr. Elmer Zebley\n",
      "24\n",
      "Larsson, Mr. August Viktor\n",
      "26\n",
      "Greenberg, Mr. Samuel\n",
      "21\n",
      "Soholt, Mr. Peter Andreas Lauritz Andersen\n",
      "42\n",
      "Endres, Miss. Caroline Louise\n",
      "29\n",
      "Troutt, Miss. Edwina Celia \"Winnie\"\n",
      "35\n",
      "McEvoy, Mr. Michael\n",
      "19\n",
      "Johnson, Mr. Malkolm Joackim\n",
      "28\n",
      "Harper, Miss. Annie Jessie \"Nina\"\n",
      "33\n",
      "Jensen, Mr. Svend Lauritz\n",
      "25\n",
      "Gillespie, Mr. William Henry\n",
      "28\n",
      "Hodges, Mr. Henry Price\n",
      "23\n",
      "Chambers, Mr. Norman Campbell\n",
      "29\n",
      "Oreskovic, Mr. Luka\n",
      "19\n",
      "Renouf, Mrs. Peter Henry (Lillian Jefferys)\n",
      "43\n",
      "Mannion, Miss. Margareth\n",
      "24\n",
      "Bryhl, Mr. Kurt Arnold Gottfrid\n",
      "31\n",
      "Ilmakangas, Miss. Pieta Sofia\n",
      "29\n",
      "Allen, Miss. Elisabeth Walton\n",
      "29\n",
      "Hassan, Mr. Houssein G N\n",
      "24\n",
      "Knight, Mr. Robert J\n",
      "20\n",
      "Berriman, Mr. William John\n",
      "26\n",
      "Troupiansky, Mr. Moses Aaron\n",
      "28\n",
      "Williams, Mr. Leslie\n",
      "20\n",
      "Ford, Mrs. Edward (Margaret Ann Watson)\n",
      "39\n",
      "Ivanoff, Mr. Kanio\n",
      "18\n",
      "Nankoff, Mr. Minko\n",
      "18\n",
      "Hawksford, Mr. Walter James\n",
      "27\n",
      "Cavendish, Mr. Tyrell William\n",
      "29\n",
      "Ryerson, Miss. Susan Parker \"Suzette\"\n",
      "37\n",
      "McNamee, Mr. Neal\n",
      "17\n",
      "Stranden, Mr. Juho\n",
      "18\n",
      "Crosby, Capt. Edward Gifford\n",
      "28\n",
      "Abbott, Mr. Rossmore Edward\n",
      "27\n",
      "Sinkkonen, Miss. Anna\n",
      "21\n",
      "Marvin, Mr. Daniel Warner\n",
      "25\n",
      "Connaghton, Mr. Michael\n",
      "23\n",
      "Wells, Miss. Joan\n",
      "17\n",
      "Moor, Master. Meier\n",
      "19\n",
      "Vande Velde, Mr. Johannes Joseph\n",
      "32\n",
      "Jonkoff, Mr. Lalio\n",
      "18\n",
      "Herman, Mrs. Samuel (Jane Laver)\n",
      "32\n",
      "Hamalainen, Master. Viljo\n",
      "25\n",
      "Carlsson, Mr. August Sigfrid\n",
      "28\n",
      "Bailey, Mr. Percy Andrew\n",
      "24\n",
      "Theobald, Mr. Thomas Leonard\n",
      "28\n",
      "Rothes, the Countess. of (Lucy Noel Martha Dyer-Edwards)\n",
      "56\n",
      "Garfirth, Mr. John\n",
      "18\n",
      "Nirva, Mr. Iisakki Antino Aijo\n",
      "30\n",
      "Barah, Mr. Hanna Assi\n",
      "21\n",
      "Carter, Mrs. William Ernest (Lucile Polk)\n",
      "41\n",
      "Eklund, Mr. Hans Linus\n",
      "22\n",
      "Hogeboom, Mrs. John C (Anna Andrews)\n",
      "36\n",
      "Brewe, Dr. Arthur Jackson\n",
      "25\n",
      "Mangan, Miss. Mary\n",
      "18\n",
      "Moran, Mr. Daniel J\n",
      "19\n",
      "Gronnestad, Mr. Daniel Danielsen\n",
      "32\n",
      "Lievens, Mr. Rene Aime\n",
      "22\n",
      "Jensen, Mr. Niels Peder\n",
      "23\n",
      "Mack, Mrs. (Mary)\n",
      "17\n",
      "Elias, Mr. Dibo\n",
      "15\n",
      "Hocking, Mrs. Elizabeth (Eliza Needs)\n",
      "37\n",
      "Myhrman, Mr. Pehr Fabian Oliver Malkolm\n",
      "39\n",
      "Tobin, Mr. Roger\n",
      "16\n",
      "Emanuel, Miss. Virginia Ethel\n",
      "29\n",
      "Kilgannon, Mr. Thomas J\n",
      "23\n",
      "Robert, Mrs. Edward Scott (Elisabeth Walton McMillan)\n",
      "53\n",
      "Ayoub, Miss. Banoura\n",
      "20\n",
      "Dick, Mrs. Albert Adrian (Vera Gillespie)\n",
      "41\n",
      "Long, Mr. Milton Clyde\n",
      "22\n",
      "Johnston, Mr. Andrew G\n",
      "22\n",
      "Ali, Mr. William\n",
      "16\n",
      "Harmer, Mr. Abraham (David Lishin)\n",
      "34\n",
      "Sjoblom, Miss. Anna Sofia\n",
      "25\n",
      "Rice, Master. George Hugh\n",
      "25\n",
      "Dean, Master. Bertram Vere\n",
      "26\n",
      "Guggenheim, Mr. Benjamin\n",
      "24\n",
      "Keane, Mr. Andrew \"Andy\"\n",
      "24\n",
      "Gaskell, Mr. Alfred\n",
      "19\n",
      "Sage, Miss. Stella Anna\n",
      "23\n",
      "Hoyt, Mr. William Fisher\n",
      "24\n",
      "Dantcheff, Mr. Ristiu\n",
      "21\n",
      "Otter, Mr. Richard\n",
      "18\n",
      "Leader, Dr. Alice (Farnham)\n",
      "27\n",
      "Osman, Mrs. Mara\n",
      "16\n",
      "Ibrahim Shawah, Mr. Yousseff\n",
      "28\n",
      "Van Impe, Mrs. Jean Baptiste (Rosalie Paula Govaert)\n",
      "52\n",
      "Ponesell, Mr. Martin\n",
      "20\n",
      "Collyer, Mrs. Harvey (Charlotte Annie Tate)\n",
      "43\n",
      "Carter, Master. William Thornton II\n",
      "35\n",
      "Thomas, Master. Assad Alexander\n",
      "31\n",
      "Hedman, Mr. Oskar Arvid\n",
      "23\n",
      "Johansson, Mr. Karl Johan\n",
      "25\n",
      "Andrews, Mr. Thomas Jr\n",
      "22\n",
      "Pettersson, Miss. Ellen Natalia\n",
      "31\n",
      "Meyer, Mr. August\n",
      "17\n",
      "Chambers, Mrs. Norman Campbell (Bertha Griggs)\n",
      "46\n",
      "Alexander, Mr. William\n",
      "22\n",
      "Lester, Mr. James\n",
      "17\n",
      "Slemen, Mr. Richard James\n",
      "25\n",
      "Andersson, Miss. Ebba Iris Alfrida\n",
      "34\n",
      "Tomlin, Mr. Ernest Portage\n",
      "26\n",
      "Fry, Mr. Richard\n",
      "16\n",
      "Heininen, Miss. Wendla Maria\n",
      "28\n",
      "Mallet, Mr. Albert\n",
      "18\n",
      "Holm, Mr. John Fredrik Alexander\n",
      "32\n",
      "Skoog, Master. Karl Thorsten\n",
      "28\n",
      "Hays, Mrs. Charles Melville (Clara Jennings Gregg)\n",
      "50\n",
      "Lulic, Mr. Nikola\n",
      "17\n",
      "Reuchlin, Jonkheer. John George\n",
      "31\n",
      "Moor, Mrs. (Beila)\n",
      "18\n",
      "Panula, Master. Urho Abraham\n",
      "28\n",
      "Flynn, Mr. John\n",
      "15\n",
      "Lam, Mr. Len\n",
      "12\n",
      "Mallet, Master. Andre\n",
      "21\n",
      "McCormack, Mr. Thomas Joseph\n",
      "28\n",
      "Stone, Mrs. George Nelson (Martha Evelyn)\n",
      "41\n",
      "Yasbeck, Mrs. Antoni (Selini Alexander)\n",
      "39\n",
      "Richards, Master. George Sibley\n",
      "31\n",
      "Saad, Mr. Amin\n",
      "14\n",
      "Augustsson, Mr. Albert\n",
      "22\n",
      "Allum, Mr. Owen George\n",
      "22\n",
      "Compton, Miss. Sara Rebecca\n",
      "27\n",
      "Pasic, Mr. Jakob\n",
      "16\n",
      "Sirota, Mr. Maurice\n",
      "19\n",
      "Chip, Mr. Chang\n",
      "15\n",
      "Marechal, Mr. Pierre\n",
      "20\n",
      "Alhomaki, Mr. Ilmari Rudolf\n",
      "27\n",
      "Mudd, Mr. Thomas Charles\n",
      "24\n",
      "Serepeca, Miss. Augusta\n",
      "23\n",
      "Lemberopolous, Mr. Peter L\n",
      "26\n",
      "Culumovic, Mr. Jeso\n",
      "19\n",
      "Abbing, Mr. Anthony\n",
      "19\n",
      "Sage, Mr. Douglas Bullen\n",
      "24\n",
      "Markoff, Mr. Marin\n",
      "18\n",
      "Harper, Rev. John\n",
      "17\n",
      "Goldenberg, Mrs. Samuel L (Edwiga Grabowska)\n",
      "44\n",
      "Andersson, Master. Sigvard Harald Elias\n",
      "39\n",
      "Svensson, Mr. Johan\n",
      "19\n",
      "Boulos, Miss. Nourelain\n",
      "23\n",
      "Lines, Miss. Mary Conover\n",
      "25\n",
      "Carter, Mrs. Ernest Courtenay (Lilian Hughes)\n",
      "45\n",
      "Aks, Mrs. Sam (Leah Rosen)\n",
      "26\n",
      "Wick, Mrs. George Dennick (Mary Hitchcock)\n",
      "42\n",
      "Daly, Mr. Peter Denis \n",
      "22\n",
      "Baclini, Mrs. Solomon (Latifa Qurban)\n",
      "37\n",
      "Razi, Mr. Raihed\n",
      "16\n",
      "Hansen, Mr. Claus Peter\n",
      "23\n",
      "Giles, Mr. Frederick Edward\n",
      "27\n",
      "Swift, Mrs. Frederick Joel (Margaret Welles Barron)\n",
      "51\n",
      "Sage, Miss. Dorothy Edith \"Dolly\"\n",
      "33\n",
      "Gill, Mr. John William\n",
      "22\n",
      "Bystrom, Mrs. (Karolina)\n",
      "24\n",
      "Duran y More, Miss. Asuncion\n",
      "28\n",
      "Roebling, Mr. Washington Augustus II\n",
      "36\n",
      "van Melkebeke, Mr. Philemon\n",
      "27\n",
      "Johnson, Master. Harold Theodor\n",
      "31\n",
      "Balkic, Mr. Cerin\n",
      "17\n",
      "Beckwith, Mrs. Richard Leonard (Sallie Monypeny)\n",
      "48\n",
      "Carlsson, Mr. Frans Olof\n",
      "24\n",
      "Vander Cruyssen, Mr. Victor\n",
      "27\n",
      "Abelson, Mrs. Samuel (Hannah Wizosky)\n",
      "37\n",
      "Najib, Miss. Adele Kiamie \"Jane\"\n",
      "32\n",
      "Gustafsson, Mr. Alfred Ossian\n",
      "29\n",
      "Petroff, Mr. Nedelio\n",
      "20\n",
      "Laleff, Mr. Kristo\n",
      "18\n",
      "Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)\n",
      "45\n",
      "Shelley, Mrs. William (Imanita Parrish Hall)\n",
      "44\n",
      "Markun, Mr. Johann\n",
      "18\n",
      "Dahlberg, Miss. Gerda Ulrika\n",
      "28\n",
      "Banfield, Mr. Frederick James\n",
      "29\n",
      "Sutehall, Mr. Henry Jr\n",
      "22\n",
      "Rice, Mrs. William (Margaret Norton)\n",
      "36\n",
      "Montvila, Rev. Juozas\n",
      "21\n",
      "Graham, Miss. Margaret Edith\n",
      "28\n",
      "Johnston, Miss. Catherine Helen \"Carrie\"\n",
      "40\n",
      "Behr, Mr. Karl Howell\n",
      "21\n",
      "Dooley, Mr. Patrick\n",
      "19\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'count' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-55-9ab4b6c9c420>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'count' is not defined"
     ]
    }
   ],
   "source": [
    "\n",
    "for i in train.Name:\n",
    "    print(i)\n",
    "    print(len(i))\n",
    "    \n",
    "print(count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "train['name_length'] = [len(i) for i in train.Name]\n",
    "test['name_length'] = [len(i) for i in test.Name]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "def name_length_group(size):\n",
    "    a = ''\n",
    "    if (size <=20):\n",
    "        a = 'short'\n",
    "    elif (size <=35):\n",
    "        a = 'medium'\n",
    "    elif (size <=45):\n",
    "        a = 'good'\n",
    "    else:\n",
    "        a = 'long'\n",
    "    return a\n",
    "\n",
    "\n",
    "train['nLength_group'] = train['name_length'].map(name_length_group)\n",
    "test['nLength_group'] = test['name_length'].map(name_length_group)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>name_length</th>\n",
       "      <th>nLength_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>23</td>\n",
       "      <td>medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>51</td>\n",
       "      <td>long</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>22</td>\n",
       "      <td>medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>44</td>\n",
       "      <td>good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>24</td>\n",
       "      <td>medium</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  name_length nLength_group  \n",
       "0      0         A/5 21171   7.2500     N        S           23        medium  \n",
       "1      0          PC 17599  71.2833   C85        C           51          long  \n",
       "2      0  STON/O2. 3101282   7.9250     N        S           22        medium  \n",
       "3      0            113803  53.1000  C123        S           44          good  \n",
       "4      0            373450   8.0500     N        S           24        medium  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(5)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "title\n",
    "Getting the title of each name as a new feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    }
   ],
   "source": [
    "## get the title from the name\n",
    "train[\"title\"] = [i.split('.') [0] for i in train.Name]\n",
    "train[\"title\"] = [i.split(',')[1] for i in train.title]\n",
    "test[\"title\"] = [i.split('.')[0] for i in test.Name]\n",
    "test[\"title\"]= [i.split(',')[1] for i in test.title]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>name_length</th>\n",
       "      <th>nLength_group</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>23</td>\n",
       "      <td>medium</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>51</td>\n",
       "      <td>long</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>22</td>\n",
       "      <td>medium</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>44</td>\n",
       "      <td>good</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>24</td>\n",
       "      <td>medium</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  name_length nLength_group  \\\n",
       "0      0         A/5 21171   7.2500     N        S           23        medium   \n",
       "1      0          PC 17599  71.2833   C85        C           51          long   \n",
       "2      0  STON/O2. 3101282   7.9250     N        S           22        medium   \n",
       "3      0            113803  53.1000  C123        S           44          good   \n",
       "4      0            373450   8.0500     N        S           24        medium   \n",
       "\n",
       "   title  \n",
       "0     Mr  \n",
       "1    Mrs  \n",
       "2   Miss  \n",
       "3    Mrs  \n",
       "4     Mr  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  import sys\n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if __name__ == '__main__':\n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  # Remove the CWD from sys.path while we load stuff.\n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  # This is added back by InteractiveShellApp.init_path()\n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:12: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if sys.path[0] == '':\n",
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  del sys.path[0]\n"
     ]
    }
   ],
   "source": [
    "train[\"title\"] = [i.replace('Ms', 'Miss') for i in train.title]\n",
    "train[\"title\"] = [i.replace('Mlle', 'Miss') for i in train.title]\n",
    "train[\"title\"] = [i.replace('Mme', 'Mrs') for i in train.title]\n",
    "train[\"title\"] = [i.replace('Dr', 'rare') for i in train.title]\n",
    "train[\"title\"] = [i.replace('Col', 'rare') for i in train.title]\n",
    "train[\"title\"] = [i.replace('Major', 'rare') for i in train.title]\n",
    "train[\"title\"] = [i.replace('Don', 'rare') for i in train.title]\n",
    "train[\"title\"] = [i.replace('Jonkheer', 'rare') for i in train.title]\n",
    "train[\"title\"] = [i.replace('Sir', 'rare') for i in train.title]\n",
    "train[\"title\"] = [i.replace('Lady', 'rare') for i in train.title]\n",
    "train[\"title\"] = [i.replace('Capt', 'rare') for i in train.title]\n",
    "train[\"title\"] = [i.replace('the Countess', 'rare') for i in train.title]\n",
    "train[\"title\"] = [i.replace('Rev', 'rare') for i in train.title]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>name_length</th>\n",
       "      <th>nLength_group</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>23</td>\n",
       "      <td>medium</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>51</td>\n",
       "      <td>long</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>22</td>\n",
       "      <td>medium</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>44</td>\n",
       "      <td>good</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>24</td>\n",
       "      <td>medium</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  name_length nLength_group  \\\n",
       "0      0         A/5 21171   7.2500     N        S           23        medium   \n",
       "1      0          PC 17599  71.2833   C85        C           51          long   \n",
       "2      0  STON/O2. 3101282   7.9250     N        S           22        medium   \n",
       "3      0            113803  53.1000  C123        S           44          good   \n",
       "4      0            373450   8.0500     N        S           24        medium   \n",
       "\n",
       "   title  \n",
       "0     Mr  \n",
       "1    Mrs  \n",
       "2   Miss  \n",
       "3    Mrs  \n",
       "4     Mr  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['title'] = [i.replace('Ms', 'Miss') for i in test.title]\n",
    "test['title'] = [i.replace('Dr', 'rare') for i in test.title]\n",
    "test['title'] = [i.replace('Col', 'rare') for i in test.title]\n",
    "test['title'] = [i.replace('Dona', 'rare') for i in test.title]\n",
    "test['title'] = [i.replace('Rev', 'rare') for i in test.title]"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "family_size\n",
    "Creating a new feature called \"family_size\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "## Family_size seems like a good feature to create\n",
    "train['family_size'] = train.SibSp + train.Parch+1\n",
    "test['family_size'] = test.SibSp + test.Parch+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>name_length</th>\n",
       "      <th>nLength_group</th>\n",
       "      <th>title</th>\n",
       "      <th>family_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>23</td>\n",
       "      <td>medium</td>\n",
       "      <td>Mr</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>51</td>\n",
       "      <td>long</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>22</td>\n",
       "      <td>medium</td>\n",
       "      <td>Miss</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  name_length nLength_group  \\\n",
       "0      0         A/5 21171   7.2500     N        S           23        medium   \n",
       "1      0          PC 17599  71.2833   C85        C           51          long   \n",
       "2      0  STON/O2. 3101282   7.9250     N        S           22        medium   \n",
       "\n",
       "   title  family_size  \n",
       "0     Mr            2  \n",
       "1    Mrs            2  \n",
       "2   Miss            1  "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  # Remove the CWD from sys.path while we load stuff.\n"
     ]
    }
   ],
   "source": [
    "def family_group(size):\n",
    "    a = ''\n",
    "    if (size <= 1):\n",
    "        a = 'loner'\n",
    "    elif (size <= 4):\n",
    "        a = 'small'\n",
    "    else:\n",
    "        a = 'large'\n",
    "    return a\n",
    "train['family_group'] = train['family_size'].map(family_group)\n",
    "test['family_group'] = test['family_size'].map(family_group)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>name_length</th>\n",
       "      <th>nLength_group</th>\n",
       "      <th>title</th>\n",
       "      <th>family_size</th>\n",
       "      <th>family_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>23</td>\n",
       "      <td>medium</td>\n",
       "      <td>Mr</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>51</td>\n",
       "      <td>long</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>22</td>\n",
       "      <td>medium</td>\n",
       "      <td>Miss</td>\n",
       "      <td>1</td>\n",
       "      <td>loner</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  name_length nLength_group  \\\n",
       "0      0         A/5 21171   7.2500     N        S           23        medium   \n",
       "1      0          PC 17599  71.2833   C85        C           51          long   \n",
       "2      0  STON/O2. 3101282   7.9250     N        S           22        medium   \n",
       "\n",
       "   title  family_size family_group  \n",
       "0     Mr            2        small  \n",
       "1    Mrs            2        small  \n",
       "2   Miss            1        loner  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "train['is_alone'] = [1 if i<2 else 0 for i in train.family_size]\n",
    "test['is_alone'] = [1 if i<2 else 0 for i in test.family_size]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>name_length</th>\n",
       "      <th>nLength_group</th>\n",
       "      <th>title</th>\n",
       "      <th>family_size</th>\n",
       "      <th>family_group</th>\n",
       "      <th>is_alone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>23</td>\n",
       "      <td>medium</td>\n",
       "      <td>Mr</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>51</td>\n",
       "      <td>long</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>22</td>\n",
       "      <td>medium</td>\n",
       "      <td>Miss</td>\n",
       "      <td>1</td>\n",
       "      <td>loner</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  name_length nLength_group  \\\n",
       "0      0         A/5 21171   7.2500     N        S           23        medium   \n",
       "1      0          PC 17599  71.2833   C85        C           51          long   \n",
       "2      0  STON/O2. 3101282   7.9250     N        S           22        medium   \n",
       "\n",
       "   title  family_size family_group  is_alone  \n",
       "0     Mr            2        small         0  \n",
       "1    Mrs            2        small         0  \n",
       "2   Miss            1        loner         1  "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SC/AH 3085           1\n",
       "14311                1\n",
       "STON/O 2. 3101273    1\n",
       "350406               1\n",
       "29751                1\n",
       "330909               1\n",
       "WE/P 5735            2\n",
       "236852               1\n",
       "113055               1\n",
       "113056               1\n",
       "392096               2\n",
       "28425                1\n",
       "SOTON/OQ 392086      1\n",
       "250651               1\n",
       "367231               1\n",
       "PC 17485             2\n",
       "4133                 4\n",
       "2683                 1\n",
       "312993               1\n",
       "236171               1\n",
       "Name: Ticket, dtype: int64"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.Ticket.value_counts().sample(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/pandas/core/frame.py:4097: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  errors=errors,\n"
     ]
    }
   ],
   "source": [
    "train.drop(['Ticket'], axis=1, inplace=True)\n",
    "\n",
    "test.drop(['Ticket'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "calculated_fare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "## Calculating fare based on family size. \n",
    "train['calculated_fare'] = train.Fare/train.family_size\n",
    "test['calculated_fare'] = test.Fare/test.family_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>name_length</th>\n",
       "      <th>nLength_group</th>\n",
       "      <th>title</th>\n",
       "      <th>family_size</th>\n",
       "      <th>family_group</th>\n",
       "      <th>is_alone</th>\n",
       "      <th>calculated_fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>23</td>\n",
       "      <td>medium</td>\n",
       "      <td>Mr</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>0</td>\n",
       "      <td>3.62500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>51</td>\n",
       "      <td>long</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>0</td>\n",
       "      <td>35.64165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>22</td>\n",
       "      <td>medium</td>\n",
       "      <td>Miss</td>\n",
       "      <td>1</td>\n",
       "      <td>loner</td>\n",
       "      <td>1</td>\n",
       "      <td>7.92500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "\n",
       "   Parch     Fare Cabin Embarked  name_length nLength_group  title  \\\n",
       "0      0   7.2500     N        S           23        medium     Mr   \n",
       "1      0  71.2833   C85        C           51          long    Mrs   \n",
       "2      0   7.9250     N        S           22        medium   Miss   \n",
       "\n",
       "   family_size family_group  is_alone  calculated_fare  \n",
       "0            2        small         0          3.62500  \n",
       "1            2        small         0         35.64165  \n",
       "2            1        loner         1          7.92500  "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  from ipykernel import kernelapp as app\n"
     ]
    }
   ],
   "source": [
    "def fare_group(fare):\n",
    "    a= ''\n",
    "    if fare <= 4:\n",
    "        a = 'Very_low'\n",
    "    elif fare <= 10:\n",
    "        a = 'low'\n",
    "    elif fare <= 20:\n",
    "        a = 'mid'\n",
    "    elif fare <= 45:\n",
    "        a = 'high'\n",
    "    else:\n",
    "        a = \"very_high\"\n",
    "    return a\n",
    "\n",
    "train['fare_group'] = train['calculated_fare'].map(fare_group)\n",
    "test['fare_group'] = test['calculated_fare'].map(fare_group)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>name_length</th>\n",
       "      <th>nLength_group</th>\n",
       "      <th>title</th>\n",
       "      <th>family_size</th>\n",
       "      <th>family_group</th>\n",
       "      <th>is_alone</th>\n",
       "      <th>calculated_fare</th>\n",
       "      <th>fare_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>23</td>\n",
       "      <td>medium</td>\n",
       "      <td>Mr</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>0</td>\n",
       "      <td>3.62500</td>\n",
       "      <td>Very_low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>51</td>\n",
       "      <td>long</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>0</td>\n",
       "      <td>35.64165</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>22</td>\n",
       "      <td>medium</td>\n",
       "      <td>Miss</td>\n",
       "      <td>1</td>\n",
       "      <td>loner</td>\n",
       "      <td>1</td>\n",
       "      <td>7.92500</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "\n",
       "   Parch     Fare Cabin Embarked  name_length nLength_group  title  \\\n",
       "0      0   7.2500     N        S           23        medium     Mr   \n",
       "1      0  71.2833   C85        C           51          long    Mrs   \n",
       "2      0   7.9250     N        S           22        medium   Miss   \n",
       "\n",
       "   family_size family_group  is_alone  calculated_fare fare_group  \n",
       "0            2        small         0          3.62500   Very_low  \n",
       "1            2        small         0         35.64165       high  \n",
       "2            1        loner         1          7.92500        low  "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(3)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "PassengerId\n",
    "It seems like PassengerId column only works as an id in this dataset without any significant effect on the dataset. Let's drop it.\n",
    "\n",
    "In [64]:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "train.drop(['PassengerId'], axis=1, inplace=True)\n",
    "\n",
    "test.drop(['PassengerId'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Creating dummy variables"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "You might be wondering what is a dummy variable?\n",
    "\n",
    "Dummy variable is an important prepocessing machine learning step. Often times Categorical variables are \n",
    "an important features, which can be the difference between a good model and a great model. While working with\n",
    "a dataset, having meaningful value for example, \"male\" or \"female\" instead of 0's and 1's is more intuitive \n",
    "for us. However, machines do not understand the value of categorical values, for example, in this dataset we \n",
    "have gender male or female, algorithms do not accept categorical variables as input. In order to feed data in \n",
    "a machine learning model, we\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>name_length</th>\n",
       "      <th>nLength_group</th>\n",
       "      <th>title</th>\n",
       "      <th>family_size</th>\n",
       "      <th>family_group</th>\n",
       "      <th>is_alone</th>\n",
       "      <th>calculated_fare</th>\n",
       "      <th>fare_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>23</td>\n",
       "      <td>medium</td>\n",
       "      <td>Mr</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>0</td>\n",
       "      <td>3.62500</td>\n",
       "      <td>Very_low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>51</td>\n",
       "      <td>long</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>0</td>\n",
       "      <td>35.64165</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>22</td>\n",
       "      <td>medium</td>\n",
       "      <td>Miss</td>\n",
       "      <td>1</td>\n",
       "      <td>loner</td>\n",
       "      <td>1</td>\n",
       "      <td>7.92500</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>44</td>\n",
       "      <td>good</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>0</td>\n",
       "      <td>26.55000</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>N</td>\n",
       "      <td>S</td>\n",
       "      <td>24</td>\n",
       "      <td>medium</td>\n",
       "      <td>Mr</td>\n",
       "      <td>1</td>\n",
       "      <td>loner</td>\n",
       "      <td>1</td>\n",
       "      <td>8.05000</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass                                               Name  \\\n",
       "0         0       3                            Braund, Mr. Owen Harris   \n",
       "1         1       1  Cumings, Mrs. John Bradley (Florence Briggs Th...   \n",
       "2         1       3                             Heikkinen, Miss. Laina   \n",
       "3         1       1       Futrelle, Mrs. Jacques Heath (Lily May Peel)   \n",
       "4         0       3                           Allen, Mr. William Henry   \n",
       "\n",
       "      Sex   Age  SibSp  Parch     Fare Cabin Embarked  name_length  \\\n",
       "0    male  22.0      1      0   7.2500     N        S           23   \n",
       "1  female  38.0      1      0  71.2833   C85        C           51   \n",
       "2  female  26.0      0      0   7.9250     N        S           22   \n",
       "3  female  35.0      1      0  53.1000  C123        S           44   \n",
       "4    male  35.0      0      0   8.0500     N        S           24   \n",
       "\n",
       "  nLength_group  title  family_size family_group  is_alone  calculated_fare  \\\n",
       "0        medium     Mr            2        small         0          3.62500   \n",
       "1          long    Mrs            2        small         0         35.64165   \n",
       "2        medium   Miss            1        loner         1          7.92500   \n",
       "3          good    Mrs            2        small         0         26.55000   \n",
       "4        medium     Mr            1        loner         1          8.05000   \n",
       "\n",
       "  fare_group  \n",
       "0   Very_low  \n",
       "1       high  \n",
       "2        low  \n",
       "3       high  \n",
       "4        low  "
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.get_dummies(train, columns=['title',\"Pclass\", 'Cabin','Embarked','nLength_group', 'family_group', 'fare_group'], drop_first=False)\n",
    "test = pd.get_dummies(test, columns=['title',\"Pclass\",'Cabin','Embarked','nLength_group', 'family_group', 'fare_group'], drop_first=False)\n",
    "train.drop(['family_size','Name', 'Fare','name_length'], axis=1, inplace=True)\n",
    "test.drop(['Name','family_size',\"Fare\",'name_length'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>is_alone</th>\n",
       "      <th>calculated_fare</th>\n",
       "      <th>title_ Master</th>\n",
       "      <th>title_ Miss</th>\n",
       "      <th>title_ Mr</th>\n",
       "      <th>...</th>\n",
       "      <th>nLength_group_medium</th>\n",
       "      <th>nLength_group_short</th>\n",
       "      <th>family_group_large</th>\n",
       "      <th>family_group_loner</th>\n",
       "      <th>family_group_small</th>\n",
       "      <th>fare_group_Very_low</th>\n",
       "      <th>fare_group_high</th>\n",
       "      <th>fare_group_low</th>\n",
       "      <th>fare_group_mid</th>\n",
       "      <th>fare_group_very_high</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.62500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35.64165</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.92500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.55000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8.05000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 177 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived     Sex   Age  SibSp  Parch  is_alone  calculated_fare  \\\n",
       "0         0    male  22.0      1      0         0          3.62500   \n",
       "1         1  female  38.0      1      0         0         35.64165   \n",
       "2         1  female  26.0      0      0         1          7.92500   \n",
       "3         1  female  35.0      1      0         0         26.55000   \n",
       "4         0    male  35.0      0      0         1          8.05000   \n",
       "\n",
       "   title_ Master  title_ Miss  title_ Mr  ...  nLength_group_medium  \\\n",
       "0              0            0          1  ...                     1   \n",
       "1              0            0          0  ...                     0   \n",
       "2              0            1          0  ...                     1   \n",
       "3              0            0          0  ...                     0   \n",
       "4              0            0          1  ...                     1   \n",
       "\n",
       "   nLength_group_short  family_group_large  family_group_loner  \\\n",
       "0                    0                   0                   0   \n",
       "1                    0                   0                   0   \n",
       "2                    0                   0                   1   \n",
       "3                    0                   0                   0   \n",
       "4                    0                   0                   1   \n",
       "\n",
       "   family_group_small  fare_group_Very_low  fare_group_high  fare_group_low  \\\n",
       "0                   1                    1                0               0   \n",
       "1                   1                    0                1               0   \n",
       "2                   0                    0                0               1   \n",
       "3                   1                    0                1               0   \n",
       "4                   0                    0                0               1   \n",
       "\n",
       "   fare_group_mid  fare_group_very_high  \n",
       "0               0                     0  \n",
       "1               0                     0  \n",
       "2               0                     0  \n",
       "3               0                     0  \n",
       "4               0                     0  \n",
       "\n",
       "[5 rows x 177 columns]"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Age feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "## rearranging the columns so that I can easily use the dataframe to predict the missing age values. \n",
    "train = pd.concat([train[[\"Survived\", \"Age\", \"Sex\",\"SibSp\",\"Parch\"]], train.loc[:,\"is_alone\":]], axis=1)\n",
    "test = pd.concat([test[[\"Age\", \"Sex\"]], test.loc[:,\"SibSp\":]], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>is_alone</th>\n",
       "      <th>calculated_fare</th>\n",
       "      <th>title_ Master</th>\n",
       "      <th>title_ Miss</th>\n",
       "      <th>title_ Mr</th>\n",
       "      <th>...</th>\n",
       "      <th>nLength_group_medium</th>\n",
       "      <th>nLength_group_short</th>\n",
       "      <th>family_group_large</th>\n",
       "      <th>family_group_loner</th>\n",
       "      <th>family_group_small</th>\n",
       "      <th>fare_group_Very_low</th>\n",
       "      <th>fare_group_high</th>\n",
       "      <th>fare_group_low</th>\n",
       "      <th>fare_group_mid</th>\n",
       "      <th>fare_group_very_high</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>male</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.62500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>female</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35.64165</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.92500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>female</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.55000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8.05000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 177 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived   Age     Sex  SibSp  Parch  is_alone  calculated_fare  \\\n",
       "0         0  22.0    male      1      0         0          3.62500   \n",
       "1         1  38.0  female      1      0         0         35.64165   \n",
       "2         1  26.0  female      0      0         1          7.92500   \n",
       "3         1  35.0  female      1      0         0         26.55000   \n",
       "4         0  35.0    male      0      0         1          8.05000   \n",
       "\n",
       "   title_ Master  title_ Miss  title_ Mr  ...  nLength_group_medium  \\\n",
       "0              0            0          1  ...                     1   \n",
       "1              0            0          0  ...                     0   \n",
       "2              0            1          0  ...                     1   \n",
       "3              0            0          0  ...                     0   \n",
       "4              0            0          1  ...                     1   \n",
       "\n",
       "   nLength_group_short  family_group_large  family_group_loner  \\\n",
       "0                    0                   0                   0   \n",
       "1                    0                   0                   0   \n",
       "2                    0                   0                   1   \n",
       "3                    0                   0                   0   \n",
       "4                    0                   0                   1   \n",
       "\n",
       "   family_group_small  fare_group_Very_low  fare_group_high  fare_group_low  \\\n",
       "0                   1                    1                0               0   \n",
       "1                   1                    0                1               0   \n",
       "2                   0                    0                0               1   \n",
       "3                   1                    0                1               0   \n",
       "4                   0                    0                0               1   \n",
       "\n",
       "   fare_group_mid  fare_group_very_high  \n",
       "0               0                     0  \n",
       "1               0                     0  \n",
       "2               0                     0  \n",
       "3               0                     0  \n",
       "4               0                     0  \n",
       "\n",
       "[5 rows x 177 columns]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>177</td>\n",
       "      <td>19.9324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fare_group_very_high</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B78</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C103</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C101</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B96 B98</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B94</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B86</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B82 B84</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B80</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B79</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B77</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C106</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B73</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B71</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B69</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B58 B60</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B57 B59 B63 B66</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B51 B53 B55</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B50</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B5</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C104</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C110</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_B42</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C23 C25 C27</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C52</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C50</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C49</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C47</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C46</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C86</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C85</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C83</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C82</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C78</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C70</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_C7</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D17</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D20</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_E101</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D47</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_E10</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D9</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D7</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D6</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D56</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D50</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D49</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D48</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D46</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D21</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D45</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D37</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D36</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D35</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D33</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D30</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D28</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cabin_D26</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>177 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Total  Percent\n",
       "Age                     177  19.9324\n",
       "fare_group_very_high      0   0.0000\n",
       "Cabin_B78                 0   0.0000\n",
       "Cabin_C103                0   0.0000\n",
       "Cabin_C101                0   0.0000\n",
       "...                     ...      ...\n",
       "Cabin_D33                 0   0.0000\n",
       "Cabin_D30                 0   0.0000\n",
       "Cabin_D28                 0   0.0000\n",
       "Cabin_D26                 0   0.0000\n",
       "Survived                  0   0.0000\n",
       "\n",
       "[177 rows x 2 columns]"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "a=LabelEncoder()\n",
    "train['Sex']=a.fit_transform(train['Sex'])\n",
    "test['Sex']=a.fit_transform(test['Sex'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "age_df is       Age  Sex  SibSp  Parch  is_alone  calculated_fare  title_ Master  \\\n",
      "0    22.0    1      1      0         0          3.62500              0   \n",
      "1    38.0    0      1      0         0         35.64165              0   \n",
      "2    26.0    0      0      0         1          7.92500              0   \n",
      "3    35.0    0      1      0         0         26.55000              0   \n",
      "4    35.0    1      0      0         1          8.05000              0   \n",
      "..    ...  ...    ...    ...       ...              ...            ...   \n",
      "886  27.0    1      0      0         1         13.00000              0   \n",
      "887  19.0    0      0      0         1         30.00000              0   \n",
      "888   NaN    0      1      2         0          5.86250              0   \n",
      "889  26.0    1      0      0         1         30.00000              0   \n",
      "890  32.0    1      0      0         1          7.75000              0   \n",
      "\n",
      "     title_ Miss  title_ Mr  title_ Mrs  ...  nLength_group_medium  \\\n",
      "0              0          1           0  ...                     1   \n",
      "1              0          0           1  ...                     0   \n",
      "2              1          0           0  ...                     1   \n",
      "3              0          0           1  ...                     0   \n",
      "4              0          1           0  ...                     1   \n",
      "..           ...        ...         ...  ...                   ...   \n",
      "886            0          0           0  ...                     1   \n",
      "887            1          0           0  ...                     1   \n",
      "888            1          0           0  ...                     0   \n",
      "889            0          1           0  ...                     1   \n",
      "890            0          1           0  ...                     0   \n",
      "\n",
      "     nLength_group_short  family_group_large  family_group_loner  \\\n",
      "0                      0                   0                   0   \n",
      "1                      0                   0                   0   \n",
      "2                      0                   0                   1   \n",
      "3                      0                   0                   0   \n",
      "4                      0                   0                   1   \n",
      "..                   ...                 ...                 ...   \n",
      "886                    0                   0                   1   \n",
      "887                    0                   0                   1   \n",
      "888                    0                   0                   0   \n",
      "889                    0                   0                   1   \n",
      "890                    1                   0                   1   \n",
      "\n",
      "     family_group_small  fare_group_Very_low  fare_group_high  fare_group_low  \\\n",
      "0                     1                    1                0               0   \n",
      "1                     1                    0                1               0   \n",
      "2                     0                    0                0               1   \n",
      "3                     1                    0                1               0   \n",
      "4                     0                    0                0               1   \n",
      "..                  ...                  ...              ...             ...   \n",
      "886                   0                    0                0               0   \n",
      "887                   0                    0                1               0   \n",
      "888                   1                    0                0               1   \n",
      "889                   0                    0                1               0   \n",
      "890                   0                    0                0               1   \n",
      "\n",
      "     fare_group_mid  fare_group_very_high  \n",
      "0                 0                     0  \n",
      "1                 0                     0  \n",
      "2                 0                     0  \n",
      "3                 0                     0  \n",
      "4                 0                     0  \n",
      "..              ...                   ...  \n",
      "886               1                     0  \n",
      "887               0                     0  \n",
      "888               0                     0  \n",
      "889               0                     0  \n",
      "890               0                     0  \n",
      "\n",
      "[888 rows x 176 columns]\n",
      "temp_train is       Age  Sex  SibSp  Parch  is_alone  calculated_fare  title_ Master  \\\n",
      "0    22.0    1      1      0         0         3.625000              0   \n",
      "1    38.0    0      1      0         0        35.641650              0   \n",
      "2    26.0    0      0      0         1         7.925000              0   \n",
      "3    35.0    0      1      0         0        26.550000              0   \n",
      "4    35.0    1      0      0         1         8.050000              0   \n",
      "..    ...  ...    ...    ...       ...              ...            ...   \n",
      "885  39.0    0      0      5         0         4.854167              0   \n",
      "886  27.0    1      0      0         1        13.000000              0   \n",
      "887  19.0    0      0      0         1        30.000000              0   \n",
      "889  26.0    1      0      0         1        30.000000              0   \n",
      "890  32.0    1      0      0         1         7.750000              0   \n",
      "\n",
      "     title_ Miss  title_ Mr  title_ Mrs  ...  nLength_group_medium  \\\n",
      "0              0          1           0  ...                     1   \n",
      "1              0          0           1  ...                     0   \n",
      "2              1          0           0  ...                     1   \n",
      "3              0          0           1  ...                     0   \n",
      "4              0          1           0  ...                     1   \n",
      "..           ...        ...         ...  ...                   ...   \n",
      "885            0          0           1  ...                     0   \n",
      "886            0          0           0  ...                     1   \n",
      "887            1          0           0  ...                     1   \n",
      "889            0          1           0  ...                     1   \n",
      "890            0          1           0  ...                     0   \n",
      "\n",
      "     nLength_group_short  family_group_large  family_group_loner  \\\n",
      "0                      0                   0                   0   \n",
      "1                      0                   0                   0   \n",
      "2                      0                   0                   1   \n",
      "3                      0                   0                   0   \n",
      "4                      0                   0                   1   \n",
      "..                   ...                 ...                 ...   \n",
      "885                    0                   1                   0   \n",
      "886                    0                   0                   1   \n",
      "887                    0                   0                   1   \n",
      "889                    0                   0                   1   \n",
      "890                    1                   0                   1   \n",
      "\n",
      "     family_group_small  fare_group_Very_low  fare_group_high  fare_group_low  \\\n",
      "0                     1                    1                0               0   \n",
      "1                     1                    0                1               0   \n",
      "2                     0                    0                0               1   \n",
      "3                     1                    0                1               0   \n",
      "4                     0                    0                0               1   \n",
      "..                  ...                  ...              ...             ...   \n",
      "885                   0                    0                0               1   \n",
      "886                   0                    0                0               0   \n",
      "887                   0                    0                1               0   \n",
      "889                   0                    0                1               0   \n",
      "890                   0                    0                0               1   \n",
      "\n",
      "     fare_group_mid  fare_group_very_high  \n",
      "0                 0                     0  \n",
      "1                 0                     0  \n",
      "2                 0                     0  \n",
      "3                 0                     0  \n",
      "4                 0                     0  \n",
      "..              ...                   ...  \n",
      "885               0                     0  \n",
      "886               1                     0  \n",
      "887               0                     0  \n",
      "889               0                     0  \n",
      "890               0                     0  \n",
      "\n",
      "[711 rows x 176 columns]\n",
      "temp_test is      Age  Sex  SibSp  Parch  is_alone  calculated_fare  title_ Master  \\\n",
      "5    NaN    1      0      0         1         8.458300              0   \n",
      "17   NaN    1      0      0         1        13.000000              0   \n",
      "19   NaN    0      0      0         1         7.225000              0   \n",
      "26   NaN    1      0      0         1         7.225000              0   \n",
      "28   NaN    0      0      0         1         7.879200              0   \n",
      "..   ...  ...    ...    ...       ...              ...            ...   \n",
      "859  NaN    1      0      0         1         7.229200              0   \n",
      "863  NaN    0      8      2         0         6.322727              0   \n",
      "868  NaN    1      0      0         1         9.500000              0   \n",
      "878  NaN    1      0      0         1         7.895800              0   \n",
      "888  NaN    0      1      2         0         5.862500              0   \n",
      "\n",
      "     title_ Miss  title_ Mr  title_ Mrs  ...  nLength_group_medium  \\\n",
      "5              0          1           0  ...                     0   \n",
      "17             0          1           0  ...                     1   \n",
      "19             0          0           1  ...                     1   \n",
      "26             0          1           0  ...                     1   \n",
      "28             1          0           0  ...                     1   \n",
      "..           ...        ...         ...  ...                   ...   \n",
      "859            0          1           0  ...                     0   \n",
      "863            1          0           0  ...                     1   \n",
      "868            0          1           0  ...                     1   \n",
      "878            0          1           0  ...                     0   \n",
      "888            1          0           0  ...                     0   \n",
      "\n",
      "     nLength_group_short  family_group_large  family_group_loner  \\\n",
      "5                      1                   0                   1   \n",
      "17                     0                   0                   1   \n",
      "19                     0                   0                   1   \n",
      "26                     0                   0                   1   \n",
      "28                     0                   0                   1   \n",
      "..                   ...                 ...                 ...   \n",
      "859                    1                   0                   1   \n",
      "863                    0                   1                   0   \n",
      "868                    0                   0                   1   \n",
      "878                    1                   0                   1   \n",
      "888                    0                   0                   0   \n",
      "\n",
      "     family_group_small  fare_group_Very_low  fare_group_high  fare_group_low  \\\n",
      "5                     0                    0                0               1   \n",
      "17                    0                    0                0               0   \n",
      "19                    0                    0                0               1   \n",
      "26                    0                    0                0               1   \n",
      "28                    0                    0                0               1   \n",
      "..                  ...                  ...              ...             ...   \n",
      "859                   0                    0                0               1   \n",
      "863                   0                    0                0               1   \n",
      "868                   0                    0                0               1   \n",
      "878                   0                    0                0               1   \n",
      "888                   1                    0                0               1   \n",
      "\n",
      "     fare_group_mid  fare_group_very_high  \n",
      "5                 0                     0  \n",
      "17                1                     0  \n",
      "19                0                     0  \n",
      "26                0                     0  \n",
      "28                0                     0  \n",
      "..              ...                   ...  \n",
      "859               0                     0  \n",
      "863               0                     0  \n",
      "868               0                     0  \n",
      "878               0                     0  \n",
      "888               0                     0  \n",
      "\n",
      "[177 rows x 176 columns]\n",
      "y is [22.   38.   26.   35.   35.   54.    2.   27.   14.    4.   58.   20.\n",
      " 39.   14.   55.    2.   31.   35.   34.   15.   28.    8.   38.   19.\n",
      " 40.   66.   28.   42.   21.   18.   14.   40.   27.    3.   19.   18.\n",
      "  7.   21.   49.   29.   65.   21.   28.5   5.   11.   22.   38.   45.\n",
      "  4.   29.   19.   17.   26.   32.   16.   21.   26.   32.   25.    0.83\n",
      " 30.   22.   29.   28.   17.   33.   16.   23.   24.   29.   20.   46.\n",
      " 26.   59.   71.   23.   34.   34.   28.   21.   33.   37.   28.   21.\n",
      " 38.   47.   14.5  22.   20.   17.   21.   70.5  29.   24.    2.   21.\n",
      " 32.5  32.5  54.   12.   24.   45.   33.   20.   47.   29.   25.   23.\n",
      " 19.   37.   16.   24.   22.   24.   19.   18.   19.   27.    9.   36.5\n",
      " 42.   51.   22.   55.5  40.5  51.   16.   30.   44.   40.   26.   17.\n",
      "  1.    9.   45.   28.   61.    4.    1.   21.   56.   18.   50.   30.\n",
      " 36.    9.    1.    4.   45.   40.   36.   32.   19.   19.    3.   44.\n",
      " 58.   42.   24.   28.   34.   45.5  18.    2.   32.   26.   16.   40.\n",
      " 24.   35.   22.   30.   31.   27.   42.   32.   30.   16.   27.   51.\n",
      " 38.   22.   19.   20.5  18.   35.   29.   59.    5.   24.   44.    8.\n",
      " 19.   33.   29.   22.   30.   44.   25.   24.   37.   54.   29.   62.\n",
      " 30.   41.   29.   30.   50.    3.   52.   40.   36.   16.   25.   58.\n",
      " 35.   25.   41.   37.   63.   45.    7.   35.   65.   28.   16.   19.\n",
      " 33.   30.   22.   42.   22.   26.   19.   36.   24.   24.   23.5   2.\n",
      " 50.   19.    0.92 17.   30.   30.   24.   18.   26.   28.   43.   26.\n",
      " 24.   54.   31.   40.   22.   27.   30.   22.   36.   61.   36.   31.\n",
      " 16.   45.5  38.   16.   29.   41.   45.   45.    2.   24.   28.   25.\n",
      " 36.   24.   40.    3.   42.   23.   15.   25.   28.   22.   38.   40.\n",
      " 29.   45.   35.   30.   60.   24.   25.   18.   19.   22.    3.   22.\n",
      " 27.   20.   19.   42.    1.   32.   35.   18.    1.   36.   17.   36.\n",
      " 21.   28.   23.   24.   22.   31.   46.   23.   28.   39.   26.   21.\n",
      " 28.   20.   34.   51.    3.   21.   33.   44.   34.   18.   30.   10.\n",
      " 21.   29.   28.   18.   28.   19.   32.   28.   42.   17.   50.   14.\n",
      " 21.   24.   64.   31.   45.   20.   25.   28.    4.   13.   34.    5.\n",
      " 52.   36.   30.   49.   29.   65.   50.   48.   34.   47.   48.   38.\n",
      " 56.    0.75 38.   33.   23.   22.   34.   29.   22.    2.    9.   50.\n",
      " 63.   25.   35.   58.   30.    9.   21.   55.   71.   21.   54.   25.\n",
      " 24.   17.   21.   37.   16.   18.   33.   28.   26.   29.   36.   54.\n",
      " 24.   47.   34.   36.   32.   30.   22.   44.   40.5  50.   39.   23.\n",
      "  2.   17.   30.    7.   45.   30.   22.   36.    9.   11.   32.   50.\n",
      " 64.   19.   33.    8.   17.   27.   22.   22.   62.   48.   39.   36.\n",
      " 40.   28.   24.   19.   29.   32.   62.   53.   36.   16.   19.   34.\n",
      " 39.   32.   25.   39.   54.   36.   18.   47.   60.   22.   35.   52.\n",
      " 47.   37.   36.   49.   49.   24.   44.   35.   36.   30.   27.   22.\n",
      " 40.   39.   35.   24.   34.   26.    4.   26.   27.   42.   20.   21.\n",
      " 21.   61.   57.   21.   26.   80.   51.   32.    9.   28.   32.   31.\n",
      " 41.   20.   24.    2.    0.75 48.   19.   56.   23.   18.   21.   18.\n",
      " 24.   32.   23.   58.   50.   40.   47.   36.   20.   32.   25.   43.\n",
      " 40.   31.   70.   31.   18.   24.5  18.   43.   27.   20.   14.   60.\n",
      " 25.   14.   19.   18.   15.   31.    4.   25.   60.   52.   44.   49.\n",
      " 42.   18.   35.   18.   25.   26.   39.   45.   42.   22.   24.   48.\n",
      " 29.   52.   19.   38.   27.   33.    6.   17.   34.   50.   27.   20.\n",
      " 30.   25.   25.   29.   11.   23.   23.   28.5  48.   36.   21.   24.\n",
      " 31.   70.   16.   30.   19.   31.    4.    6.   33.   23.   48.    0.67\n",
      " 28.   18.   34.   33.   41.   20.   36.   16.   51.   30.5  32.   24.\n",
      " 48.   57.   54.   18.    5.   43.   13.   17.   29.   25.   25.   18.\n",
      "  8.    1.   46.   16.   25.   39.   49.   31.   30.   30.   34.   31.\n",
      " 11.    0.42 27.   31.   39.   18.   39.   33.   26.   39.   35.    6.\n",
      " 30.5  23.   31.   43.   10.   52.   27.   38.   27.    2.    1.   62.\n",
      " 15.    0.83 23.   18.   39.   21.   32.   20.   16.   30.   34.5  17.\n",
      " 42.   35.   28.    4.   74.    9.   16.   44.   18.   45.   51.   24.\n",
      " 41.   21.   48.   24.   42.   27.   31.    4.   26.   47.   33.   47.\n",
      " 28.   15.   20.   19.   56.   25.   33.   22.   28.   25.   39.   27.\n",
      " 19.   26.   32.  ]\n",
      "x is [[1. 1. 0. ... 0. 0. 0.]\n",
      " [0. 1. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 1. 0. 0.]\n",
      " ...\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [1. 0. 0. ... 0. 0. 0.]\n",
      " [1. 0. 0. ... 1. 0. 0.]]\n",
      "age_df is       Age  Sex  SibSp  Parch  is_alone  calculated_fare  title_ Master  \\\n",
      "0    34.5    1      0      0         1         7.829200              0   \n",
      "1    47.0    0      1      0         0         3.500000              0   \n",
      "2    62.0    1      0      0         1         9.687500              0   \n",
      "3    27.0    1      0      0         1         8.662500              0   \n",
      "4    22.0    0      1      1         0         4.095833              0   \n",
      "..    ...  ...    ...    ...       ...              ...            ...   \n",
      "413   NaN    1      0      0         1         8.050000              0   \n",
      "414  39.0    0      0      0         1       108.900000              0   \n",
      "415  38.5    1      0      0         1         7.250000              0   \n",
      "416   NaN    1      0      0         1         8.050000              0   \n",
      "417   NaN    1      1      1         0         7.452767              1   \n",
      "\n",
      "     title_ Miss  title_ Mr  title_ Mrs  ...  nLength_group_medium  \\\n",
      "0              0          1           0  ...                     0   \n",
      "1              0          0           1  ...                     1   \n",
      "2              0          1           0  ...                     1   \n",
      "3              0          1           0  ...                     0   \n",
      "4              0          0           1  ...                     0   \n",
      "..           ...        ...         ...  ...                   ...   \n",
      "413            0          1           0  ...                     0   \n",
      "414            0          0           0  ...                     1   \n",
      "415            0          1           0  ...                     1   \n",
      "416            0          1           0  ...                     0   \n",
      "417            0          0           0  ...                     1   \n",
      "\n",
      "     nLength_group_short  family_group_large  family_group_loner  \\\n",
      "0                      1                   0                   1   \n",
      "1                      0                   0                   0   \n",
      "2                      0                   0                   1   \n",
      "3                      1                   0                   1   \n",
      "4                      0                   0                   0   \n",
      "..                   ...                 ...                 ...   \n",
      "413                    1                   0                   1   \n",
      "414                    0                   0                   1   \n",
      "415                    0                   0                   1   \n",
      "416                    1                   0                   1   \n",
      "417                    0                   0                   0   \n",
      "\n",
      "     family_group_small  fare_group_Very_low  fare_group_high  fare_group_low  \\\n",
      "0                     0                    0                0               1   \n",
      "1                     1                    1                0               0   \n",
      "2                     0                    0                0               1   \n",
      "3                     0                    0                0               1   \n",
      "4                     1                    0                0               1   \n",
      "..                  ...                  ...              ...             ...   \n",
      "413                   0                    0                0               1   \n",
      "414                   0                    0                0               0   \n",
      "415                   0                    0                0               1   \n",
      "416                   0                    0                0               1   \n",
      "417                   1                    0                0               1   \n",
      "\n",
      "     fare_group_mid  fare_group_very_high  \n",
      "0                 0                     0  \n",
      "1                 0                     0  \n",
      "2                 0                     0  \n",
      "3                 0                     0  \n",
      "4                 0                     0  \n",
      "..              ...                   ...  \n",
      "413               0                     0  \n",
      "414               0                     1  \n",
      "415               0                     0  \n",
      "416               0                     0  \n",
      "417               0                     0  \n",
      "\n",
      "[418 rows x 106 columns]\n",
      "temp_train is       Age  Sex  SibSp  Parch  is_alone  calculated_fare  title_ Master  \\\n",
      "0    34.5    1      0      0         1         7.829200              0   \n",
      "1    47.0    0      1      0         0         3.500000              0   \n",
      "2    62.0    1      0      0         1         9.687500              0   \n",
      "3    27.0    1      0      0         1         8.662500              0   \n",
      "4    22.0    0      1      1         0         4.095833              0   \n",
      "..    ...  ...    ...    ...       ...              ...            ...   \n",
      "409   3.0    0      1      1         0         4.591667              0   \n",
      "411  37.0    0      1      0         0        45.000000              0   \n",
      "412  28.0    0      0      0         1         7.775000              0   \n",
      "414  39.0    0      0      0         1       108.900000              0   \n",
      "415  38.5    1      0      0         1         7.250000              0   \n",
      "\n",
      "     title_ Miss  title_ Mr  title_ Mrs  ...  nLength_group_medium  \\\n",
      "0              0          1           0  ...                     0   \n",
      "1              0          0           1  ...                     1   \n",
      "2              0          1           0  ...                     1   \n",
      "3              0          1           0  ...                     0   \n",
      "4              0          0           1  ...                     0   \n",
      "..           ...        ...         ...  ...                   ...   \n",
      "409            1          0           0  ...                     1   \n",
      "411            0          0           1  ...                     0   \n",
      "412            1          0           0  ...                     1   \n",
      "414            0          0           0  ...                     1   \n",
      "415            0          1           0  ...                     1   \n",
      "\n",
      "     nLength_group_short  family_group_large  family_group_loner  \\\n",
      "0                      1                   0                   1   \n",
      "1                      0                   0                   0   \n",
      "2                      0                   0                   1   \n",
      "3                      1                   0                   1   \n",
      "4                      0                   0                   0   \n",
      "..                   ...                 ...                 ...   \n",
      "409                    0                   0                   0   \n",
      "411                    0                   0                   0   \n",
      "412                    0                   0                   1   \n",
      "414                    0                   0                   1   \n",
      "415                    0                   0                   1   \n",
      "\n",
      "     family_group_small  fare_group_Very_low  fare_group_high  fare_group_low  \\\n",
      "0                     0                    0                0               1   \n",
      "1                     1                    1                0               0   \n",
      "2                     0                    0                0               1   \n",
      "3                     0                    0                0               1   \n",
      "4                     1                    0                0               1   \n",
      "..                  ...                  ...              ...             ...   \n",
      "409                   1                    0                0               1   \n",
      "411                   1                    0                1               0   \n",
      "412                   0                    0                0               1   \n",
      "414                   0                    0                0               0   \n",
      "415                   0                    0                0               1   \n",
      "\n",
      "     fare_group_mid  fare_group_very_high  \n",
      "0                 0                     0  \n",
      "1                 0                     0  \n",
      "2                 0                     0  \n",
      "3                 0                     0  \n",
      "4                 0                     0  \n",
      "..              ...                   ...  \n",
      "409               0                     0  \n",
      "411               0                     0  \n",
      "412               0                     0  \n",
      "414               0                     1  \n",
      "415               0                     0  \n",
      "\n",
      "[332 rows x 106 columns]\n",
      "temp_test is      Age  Sex  SibSp  Parch  is_alone  calculated_fare  title_ Master  \\\n",
      "10   NaN    1      0      0         1         7.895800              0   \n",
      "22   NaN    0      0      0         1        31.683300              0   \n",
      "29   NaN    1      2      0         0         7.226400              0   \n",
      "33   NaN    0      1      2         0         5.862500              0   \n",
      "36   NaN    0      0      0         1         8.050000              0   \n",
      "..   ...  ...    ...    ...       ...              ...            ...   \n",
      "408  NaN    0      0      0         1         7.720800              0   \n",
      "410  NaN    0      0      0         1         7.750000              0   \n",
      "413  NaN    1      0      0         1         8.050000              0   \n",
      "416  NaN    1      0      0         1         8.050000              0   \n",
      "417  NaN    1      1      1         0         7.452767              1   \n",
      "\n",
      "     title_ Miss  title_ Mr  title_ Mrs  ...  nLength_group_medium  \\\n",
      "10             0          1           0  ...                     0   \n",
      "22             0          0           1  ...                     0   \n",
      "29             0          1           0  ...                     0   \n",
      "33             0          0           1  ...                     0   \n",
      "36             1          0           0  ...                     0   \n",
      "..           ...        ...         ...  ...                   ...   \n",
      "408            1          0           0  ...                     1   \n",
      "410            1          0           0  ...                     1   \n",
      "413            0          1           0  ...                     0   \n",
      "416            0          1           0  ...                     0   \n",
      "417            0          0           0  ...                     1   \n",
      "\n",
      "     nLength_group_short  family_group_large  family_group_loner  \\\n",
      "10                     1                   0                   1   \n",
      "22                     0                   0                   1   \n",
      "29                     1                   0                   0   \n",
      "33                     0                   0                   0   \n",
      "36                     1                   0                   1   \n",
      "..                   ...                 ...                 ...   \n",
      "408                    0                   0                   1   \n",
      "410                    0                   0                   1   \n",
      "413                    1                   0                   1   \n",
      "416                    1                   0                   1   \n",
      "417                    0                   0                   0   \n",
      "\n",
      "     family_group_small  fare_group_Very_low  fare_group_high  fare_group_low  \\\n",
      "10                    0                    0                0               1   \n",
      "22                    0                    0                1               0   \n",
      "29                    1                    0                0               1   \n",
      "33                    1                    0                0               1   \n",
      "36                    0                    0                0               1   \n",
      "..                  ...                  ...              ...             ...   \n",
      "408                   0                    0                0               1   \n",
      "410                   0                    0                0               1   \n",
      "413                   0                    0                0               1   \n",
      "416                   0                    0                0               1   \n",
      "417                   1                    0                0               1   \n",
      "\n",
      "     fare_group_mid  fare_group_very_high  \n",
      "10                0                     0  \n",
      "22                0                     0  \n",
      "29                0                     0  \n",
      "33                0                     0  \n",
      "36                0                     0  \n",
      "..              ...                   ...  \n",
      "408               0                     0  \n",
      "410               0                     0  \n",
      "413               0                     0  \n",
      "416               0                     0  \n",
      "417               0                     0  \n",
      "\n",
      "[86 rows x 106 columns]\n",
      "y is [34.5  47.   62.   27.   22.   14.   30.   26.   18.   21.   46.   23.\n",
      " 63.   47.   24.   35.   21.   27.   45.   55.    9.   21.   48.   50.\n",
      " 22.   22.5  41.   50.   24.   33.   30.   18.5  21.   25.   39.   41.\n",
      " 30.   45.   25.   45.   60.   36.   24.   27.   20.   28.   10.   35.\n",
      " 25.   36.   17.   32.   18.   22.   13.   18.   47.   31.   60.   24.\n",
      " 21.   29.   28.5  35.   32.5  55.   30.   24.    6.   67.   49.   27.\n",
      " 18.    2.   22.   27.   25.   25.   76.   29.   20.   33.   43.   27.\n",
      " 26.   16.   28.   21.   18.5  41.   36.   18.5  63.   18.    1.   36.\n",
      " 29.   12.   35.   28.   17.   22.   42.   24.   32.   53.   43.   24.\n",
      " 26.5  26.   23.   40.   10.   33.   61.   28.   42.   31.   22.   30.\n",
      " 23.   60.5  36.   13.   24.   29.   23.   42.   26.    7.   26.   41.\n",
      " 26.   48.   18.   22.   27.   23.   40.   15.   20.   54.   36.   64.\n",
      " 30.   37.   18.   27.   40.   21.   17.   40.   34.   11.5  61.    8.\n",
      " 33.    6.   18.   23.    0.33 47.    8.   25.   35.   24.   33.   25.\n",
      " 32.   17.   60.   38.   42.   57.   50.   30.   21.   22.   21.   53.\n",
      " 23.   40.5  36.   14.   21.   21.   39.   20.   64.   20.   18.   48.\n",
      " 55.   45.   45.   41.   22.   42.   29.    0.92 20.   27.   24.   32.5\n",
      " 28.   19.   21.   36.5  21.   29.    1.   30.   17.   46.   26.   20.\n",
      " 28.   40.   30.   22.   23.    0.75  9.    2.   36.   24.   30.   53.\n",
      " 36.   26.    1.   30.   29.   32.   43.   24.   64.   30.    0.83 55.\n",
      " 45.   18.   22.   37.   55.   17.   57.   19.   27.   22.   26.   25.\n",
      " 26.   33.   39.   23.   12.   46.   29.   21.   48.   39.   19.   27.\n",
      " 30.   32.   39.   25.   18.   32.   58.   16.   26.   38.   24.   31.\n",
      " 45.   25.   18.   49.    0.17 50.   59.   30.   14.5  24.   31.   27.\n",
      " 25.   22.   45.   29.   21.   31.   49.   44.   54.   45.   22.   21.\n",
      " 55.    5.   26.   19.   24.   24.   57.   21.    6.   23.   51.   13.\n",
      " 47.   29.   18.   24.   48.   22.   31.   30.   38.   22.   17.   43.\n",
      " 20.   23.   50.    3.   37.   28.   39.   38.5 ]\n",
      "x is [[1. 0. 0. ... 1. 0. 0.]\n",
      " [0. 1. 0. ... 0. 0. 0.]\n",
      " [1. 0. 0. ... 1. 0. 0.]\n",
      " ...\n",
      " [0. 0. 0. ... 1. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 1.]\n",
      " [1. 0. 0. ... 1. 0. 0.]]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>is_alone</th>\n",
       "      <th>calculated_fare</th>\n",
       "      <th>title_ Master</th>\n",
       "      <th>title_ Miss</th>\n",
       "      <th>title_ Mr</th>\n",
       "      <th>title_ Mrs</th>\n",
       "      <th>...</th>\n",
       "      <th>nLength_group_medium</th>\n",
       "      <th>nLength_group_short</th>\n",
       "      <th>family_group_large</th>\n",
       "      <th>family_group_loner</th>\n",
       "      <th>family_group_small</th>\n",
       "      <th>fare_group_Very_low</th>\n",
       "      <th>fare_group_high</th>\n",
       "      <th>fare_group_low</th>\n",
       "      <th>fare_group_mid</th>\n",
       "      <th>fare_group_very_high</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>34.500000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.829200</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>47.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>62.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.687500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>27.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8.662500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>22.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.095833</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>14.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.225000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>30.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.629200</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>26.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>9.666667</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>18.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.229200</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>21.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.050000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>25.197981</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.895800</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>46.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>23.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>41.133350</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>63.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>47.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.587500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>24.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.860400</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>35.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>12.350000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>21.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.225000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>27.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.962500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.225000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>55.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>29.700000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>9.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.585400</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>44.259900</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>31.683300</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>21.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.689600</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>48.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>52.475000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.250000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>22.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.989600</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>22.500000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.225000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>41.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>30.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>22.818885</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.226400</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>388</th>\n",
       "      <td>21.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.750000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>389</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.215000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>390</th>\n",
       "      <td>23.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>93.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>391</th>\n",
       "      <td>51.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>19.700000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>392</th>\n",
       "      <td>13.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>6.750000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>393</th>\n",
       "      <td>47.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>394</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.405000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>395</th>\n",
       "      <td>18.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>24.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.250000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>48.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>26.400000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>22.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.775000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>31.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.733300</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400</th>\n",
       "      <td>30.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>164.866700</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>38.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>402</th>\n",
       "      <td>22.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>29.700000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>403</th>\n",
       "      <td>17.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>47.100000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>404</th>\n",
       "      <td>43.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.860400</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>405</th>\n",
       "      <td>20.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>13.862500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>406</th>\n",
       "      <td>23.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.250000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>407</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>70.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>408</th>\n",
       "      <td>22.093783</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.720800</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>409</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.591667</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>410</th>\n",
       "      <td>27.547493</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.750000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>411</th>\n",
       "      <td>37.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>412</th>\n",
       "      <td>28.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.775000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>23.218905</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8.050000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>39.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>108.900000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>38.500000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.250000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>23.218905</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8.050000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>7.330673</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.452767</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows × 106 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Age  Sex  SibSp  Parch  is_alone  calculated_fare  title_ Master  \\\n",
       "0    34.500000    1      0      0         1         7.829200              0   \n",
       "1    47.000000    0      1      0         0         3.500000              0   \n",
       "2    62.000000    1      0      0         1         9.687500              0   \n",
       "3    27.000000    1      0      0         1         8.662500              0   \n",
       "4    22.000000    0      1      1         0         4.095833              0   \n",
       "..         ...  ...    ...    ...       ...              ...            ...   \n",
       "413  23.218905    1      0      0         1         8.050000              0   \n",
       "414  39.000000    0      0      0         1       108.900000              0   \n",
       "415  38.500000    1      0      0         1         7.250000              0   \n",
       "416  23.218905    1      0      0         1         8.050000              0   \n",
       "417   7.330673    1      1      1         0         7.452767              1   \n",
       "\n",
       "     title_ Miss  title_ Mr  title_ Mrs  ...  nLength_group_medium  \\\n",
       "0              0          1           0  ...                     0   \n",
       "1              0          0           1  ...                     1   \n",
       "2              0          1           0  ...                     1   \n",
       "3              0          1           0  ...                     0   \n",
       "4              0          0           1  ...                     0   \n",
       "..           ...        ...         ...  ...                   ...   \n",
       "413            0          1           0  ...                     0   \n",
       "414            0          0           0  ...                     1   \n",
       "415            0          1           0  ...                     1   \n",
       "416            0          1           0  ...                     0   \n",
       "417            0          0           0  ...                     1   \n",
       "\n",
       "     nLength_group_short  family_group_large  family_group_loner  \\\n",
       "0                      1                   0                   1   \n",
       "1                      0                   0                   0   \n",
       "2                      0                   0                   1   \n",
       "3                      1                   0                   1   \n",
       "4                      0                   0                   0   \n",
       "..                   ...                 ...                 ...   \n",
       "413                    1                   0                   1   \n",
       "414                    0                   0                   1   \n",
       "415                    0                   0                   1   \n",
       "416                    1                   0                   1   \n",
       "417                    0                   0                   0   \n",
       "\n",
       "     family_group_small  fare_group_Very_low  fare_group_high  fare_group_low  \\\n",
       "0                     0                    0                0               1   \n",
       "1                     1                    1                0               0   \n",
       "2                     0                    0                0               1   \n",
       "3                     0                    0                0               1   \n",
       "4                     1                    0                0               1   \n",
       "..                  ...                  ...              ...             ...   \n",
       "413                   0                    0                0               1   \n",
       "414                   0                    0                0               0   \n",
       "415                   0                    0                0               1   \n",
       "416                   0                    0                0               1   \n",
       "417                   1                    0                0               1   \n",
       "\n",
       "     fare_group_mid  fare_group_very_high  \n",
       "0                 0                     0  \n",
       "1                 0                     0  \n",
       "2                 0                     0  \n",
       "3                 0                     0  \n",
       "4                 0                     0  \n",
       "..              ...                   ...  \n",
       "413               0                     0  \n",
       "414               0                     1  \n",
       "415               0                     0  \n",
       "416               0                     0  \n",
       "417               0                     0  \n",
       "\n",
       "[418 rows x 106 columns]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Importing RandomForestRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "## writing a function that takes a dataframe with missing values and outputs it by filling the missing values. \n",
    "def completing_age(df):\n",
    "    ## gettting all the features except survived\n",
    "    age_df = df.loc[:,\"Age\":]\n",
    "    print('age_df is',age_df)\n",
    "    \n",
    "    temp_train = age_df.loc[age_df.Age.notnull()] ## df with age values\n",
    "    print('temp_train is',temp_train)\n",
    "    temp_test = age_df.loc[age_df.Age.isnull()] ## df without age values\n",
    "    print('temp_test is',temp_test)\n",
    "    \n",
    "    y = temp_train.Age.values ## setting target variables(age) in y \n",
    "    print('y is',y)\n",
    "    x = temp_train.loc[:, \"Sex\":].values\n",
    "    print('x is',x)\n",
    "    \n",
    "    rfr = RandomForestRegressor(n_estimators=1500, n_jobs=-1)\n",
    "    rfr.fit(x, y)\n",
    "    \n",
    "    predicted_age = rfr.predict(temp_test.loc[:, \"Sex\":])\n",
    "    \n",
    "    df.loc[df.Age.isnull(), \"Age\"] = predicted_age\n",
    "    \n",
    "\n",
    "    return df\n",
    "\n",
    "## Implementing the completing_age function in both train and test dataset. \n",
    "completing_age(train)\n",
    "completing_age(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>is_alone</th>\n",
       "      <th>calculated_fare</th>\n",
       "      <th>title_ Master</th>\n",
       "      <th>title_ Miss</th>\n",
       "      <th>title_ Mr</th>\n",
       "      <th>...</th>\n",
       "      <th>nLength_group_medium</th>\n",
       "      <th>nLength_group_short</th>\n",
       "      <th>family_group_large</th>\n",
       "      <th>family_group_loner</th>\n",
       "      <th>family_group_small</th>\n",
       "      <th>fare_group_Very_low</th>\n",
       "      <th>fare_group_high</th>\n",
       "      <th>fare_group_low</th>\n",
       "      <th>fare_group_mid</th>\n",
       "      <th>fare_group_very_high</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.62500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35.64165</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.92500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.55000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8.05000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 177 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived   Age  Sex  SibSp  Parch  is_alone  calculated_fare  \\\n",
       "0         0  22.0    1      1      0         0          3.62500   \n",
       "1         1  38.0    0      1      0         0         35.64165   \n",
       "2         1  26.0    0      0      0         1          7.92500   \n",
       "3         1  35.0    0      1      0         0         26.55000   \n",
       "4         0  35.0    1      0      0         1          8.05000   \n",
       "\n",
       "   title_ Master  title_ Miss  title_ Mr  ...  nLength_group_medium  \\\n",
       "0              0            0          1  ...                     1   \n",
       "1              0            0          0  ...                     0   \n",
       "2              0            1          0  ...                     1   \n",
       "3              0            0          0  ...                     0   \n",
       "4              0            0          1  ...                     1   \n",
       "\n",
       "   nLength_group_short  family_group_large  family_group_loner  \\\n",
       "0                    0                   0                   0   \n",
       "1                    0                   0                   0   \n",
       "2                    0                   0                   1   \n",
       "3                    0                   0                   0   \n",
       "4                    0                   0                   1   \n",
       "\n",
       "   family_group_small  fare_group_Very_low  fare_group_high  fare_group_low  \\\n",
       "0                   1                    1                0               0   \n",
       "1                   1                    0                1               0   \n",
       "2                   0                    0                0               1   \n",
       "3                   1                    0                1               0   \n",
       "4                   0                    0                0               1   \n",
       "\n",
       "   fare_group_mid  fare_group_very_high  \n",
       "0               0                     0  \n",
       "1               0                     0  \n",
       "2               0                     0  \n",
       "3               0                     0  \n",
       "4               0                     0  \n",
       "\n",
       "[5 rows x 177 columns]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1584x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplots(figsize = (22,10),)\n",
    "sns.distplot(train.Age, bins = 100, kde = True, rug = False, norm_hist=False);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "def age_group_fun(age):\n",
    "    a = ''\n",
    "    if age <= 1:\n",
    "        a = 'infant'\n",
    "    elif age <= 4: \n",
    "        a = 'toddler'\n",
    "    elif age <= 13:\n",
    "        a = 'child'\n",
    "    elif age <= 18:\n",
    "        a = 'teenager'\n",
    "    elif age <= 35:\n",
    "        a = 'Young_Adult'\n",
    "    elif age <= 45:\n",
    "        a = 'adult'\n",
    "    elif age <= 55:\n",
    "        a = 'middle_aged'\n",
    "    elif age <= 65:\n",
    "        a = 'senior_citizen'\n",
    "    else:\n",
    "        a = 'old'\n",
    "    return a\n",
    "        \n",
    "## Applying \"age_group_fun\" function to the \"Age\" column.\n",
    "train['age_group'] = train['Age'].map(age_group_fun)\n",
    "test['age_group'] = test['Age'].map(age_group_fun)\n",
    "\n",
    "## Creating dummies for \"age_group\" feature. \n",
    "train = pd.get_dummies(train,columns=['age_group'], drop_first=True)\n",
    "test = pd.get_dummies(test,columns=['age_group'], drop_first=True);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>is_alone</th>\n",
       "      <th>calculated_fare</th>\n",
       "      <th>title_ Master</th>\n",
       "      <th>title_ Miss</th>\n",
       "      <th>title_ Mr</th>\n",
       "      <th>...</th>\n",
       "      <th>fare_group_mid</th>\n",
       "      <th>fare_group_very_high</th>\n",
       "      <th>age_group_adult</th>\n",
       "      <th>age_group_child</th>\n",
       "      <th>age_group_infant</th>\n",
       "      <th>age_group_middle_aged</th>\n",
       "      <th>age_group_old</th>\n",
       "      <th>age_group_senior_citizen</th>\n",
       "      <th>age_group_teenager</th>\n",
       "      <th>age_group_toddler</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.62500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35.64165</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.92500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.55000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 185 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived   Age  Sex  SibSp  Parch  is_alone  calculated_fare  \\\n",
       "0         0  22.0    1      1      0         0          3.62500   \n",
       "1         1  38.0    0      1      0         0         35.64165   \n",
       "2         1  26.0    0      0      0         1          7.92500   \n",
       "3         1  35.0    0      1      0         0         26.55000   \n",
       "\n",
       "   title_ Master  title_ Miss  title_ Mr  ...  fare_group_mid  \\\n",
       "0              0            0          1  ...               0   \n",
       "1              0            0          0  ...               0   \n",
       "2              0            1          0  ...               0   \n",
       "3              0            0          0  ...               0   \n",
       "\n",
       "   fare_group_very_high  age_group_adult  age_group_child  age_group_infant  \\\n",
       "0                     0                0                0                 0   \n",
       "1                     0                1                0                 0   \n",
       "2                     0                0                0                 0   \n",
       "3                     0                0                0                 0   \n",
       "\n",
       "   age_group_middle_aged  age_group_old  age_group_senior_citizen  \\\n",
       "0                      0              0                         0   \n",
       "1                      0              0                         0   \n",
       "2                      0              0                         0   \n",
       "3                      0              0                         0   \n",
       "\n",
       "   age_group_teenager  age_group_toddler  \n",
       "0                   0                  0  \n",
       "1                   0                  0  \n",
       "2                   0                  0  \n",
       "3                   0                  0  \n",
       "\n",
       "[4 rows x 185 columns]"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(4)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "train.drop('Age', axis=1, inplace=True)\n",
    "test.drop('Age', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>is_alone</th>\n",
       "      <th>calculated_fare</th>\n",
       "      <th>title_ Master</th>\n",
       "      <th>title_ Miss</th>\n",
       "      <th>title_ Mr</th>\n",
       "      <th>...</th>\n",
       "      <th>fare_group_mid</th>\n",
       "      <th>fare_group_very_high</th>\n",
       "      <th>age_group_adult</th>\n",
       "      <th>age_group_child</th>\n",
       "      <th>age_group_infant</th>\n",
       "      <th>age_group_middle_aged</th>\n",
       "      <th>age_group_old</th>\n",
       "      <th>age_group_senior_citizen</th>\n",
       "      <th>age_group_teenager</th>\n",
       "      <th>age_group_toddler</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.62500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35.64165</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 185 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived   Age  Sex  SibSp  Parch  is_alone  calculated_fare  \\\n",
       "0         0  22.0    1      1      0         0          3.62500   \n",
       "1         1  38.0    0      1      0         0         35.64165   \n",
       "\n",
       "   title_ Master  title_ Miss  title_ Mr  ...  fare_group_mid  \\\n",
       "0              0            0          1  ...               0   \n",
       "1              0            0          0  ...               0   \n",
       "\n",
       "   fare_group_very_high  age_group_adult  age_group_child  age_group_infant  \\\n",
       "0                     0                0                0                 0   \n",
       "1                     0                1                0                 0   \n",
       "\n",
       "   age_group_middle_aged  age_group_old  age_group_senior_citizen  \\\n",
       "0                      0              0                         0   \n",
       "1                      0              0                         0   \n",
       "\n",
       "   age_group_teenager  age_group_toddler  \n",
       "0                   0                  0  \n",
       "1                   0                  0  \n",
       "\n",
       "[2 rows x 185 columns]"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pre-Modeling task"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = train.drop(['Survived'], axis = 1)\n",
    "y = train[\"Survived\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           Age  Sex  SibSp  Parch  is_alone  calculated_fare  title_ Master  \\\n",
      "0    22.000000    1      1      0         0          3.62500              0   \n",
      "1    38.000000    0      1      0         0         35.64165              0   \n",
      "2    26.000000    0      0      0         1          7.92500              0   \n",
      "3    35.000000    0      1      0         0         26.55000              0   \n",
      "4    35.000000    1      0      0         1          8.05000              0   \n",
      "..         ...  ...    ...    ...       ...              ...            ...   \n",
      "886  27.000000    1      0      0         1         13.00000              0   \n",
      "887  19.000000    0      0      0         1         30.00000              0   \n",
      "888  11.511464    0      1      2         0          5.86250              0   \n",
      "889  26.000000    1      0      0         1         30.00000              0   \n",
      "890  32.000000    1      0      0         1          7.75000              0   \n",
      "\n",
      "     title_ Miss  title_ Mr  title_ Mrs  ...  fare_group_mid  \\\n",
      "0              0          1           0  ...               0   \n",
      "1              0          0           1  ...               0   \n",
      "2              1          0           0  ...               0   \n",
      "3              0          0           1  ...               0   \n",
      "4              0          1           0  ...               0   \n",
      "..           ...        ...         ...  ...             ...   \n",
      "886            0          0           0  ...               1   \n",
      "887            1          0           0  ...               0   \n",
      "888            1          0           0  ...               0   \n",
      "889            0          1           0  ...               0   \n",
      "890            0          1           0  ...               0   \n",
      "\n",
      "     fare_group_very_high  age_group_adult  age_group_child  age_group_infant  \\\n",
      "0                       0                0                0                 0   \n",
      "1                       0                1                0                 0   \n",
      "2                       0                0                0                 0   \n",
      "3                       0                0                0                 0   \n",
      "4                       0                0                0                 0   \n",
      "..                    ...              ...              ...               ...   \n",
      "886                     0                0                0                 0   \n",
      "887                     0                0                0                 0   \n",
      "888                     0                0                1                 0   \n",
      "889                     0                0                0                 0   \n",
      "890                     0                0                0                 0   \n",
      "\n",
      "     age_group_middle_aged  age_group_old  age_group_senior_citizen  \\\n",
      "0                        0              0                         0   \n",
      "1                        0              0                         0   \n",
      "2                        0              0                         0   \n",
      "3                        0              0                         0   \n",
      "4                        0              0                         0   \n",
      "..                     ...            ...                       ...   \n",
      "886                      0              0                         0   \n",
      "887                      0              0                         0   \n",
      "888                      0              0                         0   \n",
      "889                      0              0                         0   \n",
      "890                      0              0                         0   \n",
      "\n",
      "     age_group_teenager  age_group_toddler  \n",
      "0                     0                  0  \n",
      "1                     0                  0  \n",
      "2                     0                  0  \n",
      "3                     0                  0  \n",
      "4                     0                  0  \n",
      "..                  ...                ...  \n",
      "886                   0                  0  \n",
      "887                   0                  0  \n",
      "888                   0                  0  \n",
      "889                   0                  0  \n",
      "890                   0                  0  \n",
      "\n",
      "[888 rows x 184 columns]\n",
      "******************************\n",
      "0      0\n",
      "1      1\n",
      "2      1\n",
      "3      1\n",
      "4      0\n",
      "      ..\n",
      "886    0\n",
      "887    1\n",
      "888    0\n",
      "889    1\n",
      "890    0\n",
      "Name: Survived, Length: 888, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(X)\n",
    "print('*'*30)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y,test_size = .33, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           Age  Sex  SibSp  Parch  is_alone  calculated_fare  title_ Master  \\\n",
      "170  61.000000    1      0      0         1        33.500000              0   \n",
      "187  45.000000    1      0      0         1        26.550000              0   \n",
      "849  44.840000    0      1      0         0        44.552100              0   \n",
      "433  17.000000    1      0      0         1         7.125000              0   \n",
      "651  18.000000    0      0      1         0        11.500000              0   \n",
      "..         ...  ...    ...    ...       ...              ...            ...   \n",
      "838  32.000000    1      0      0         1        56.495800              0   \n",
      "192  19.000000    0      1      0         0         3.927100              0   \n",
      "630  80.000000    1      0      0         1        30.000000              0   \n",
      "560  32.358105    1      0      0         1         7.750000              0   \n",
      "686  14.000000    1      4      1         0         6.614583              0   \n",
      "\n",
      "     title_ Miss  title_ Mr  title_ Mrs  ...  fare_group_mid  \\\n",
      "170            0          1           0  ...               0   \n",
      "187            0          1           0  ...               0   \n",
      "849            0          0           1  ...               0   \n",
      "433            0          1           0  ...               0   \n",
      "651            1          0           0  ...               1   \n",
      "..           ...        ...         ...  ...             ...   \n",
      "838            0          1           0  ...               0   \n",
      "192            1          0           0  ...               0   \n",
      "630            0          1           0  ...               0   \n",
      "560            0          1           0  ...               0   \n",
      "686            0          1           0  ...               0   \n",
      "\n",
      "     fare_group_very_high  age_group_adult  age_group_child  age_group_infant  \\\n",
      "170                     0                0                0                 0   \n",
      "187                     0                1                0                 0   \n",
      "849                     0                1                0                 0   \n",
      "433                     0                0                0                 0   \n",
      "651                     0                0                0                 0   \n",
      "..                    ...              ...              ...               ...   \n",
      "838                     1                0                0                 0   \n",
      "192                     0                0                0                 0   \n",
      "630                     0                0                0                 0   \n",
      "560                     0                0                0                 0   \n",
      "686                     0                0                0                 0   \n",
      "\n",
      "     age_group_middle_aged  age_group_old  age_group_senior_citizen  \\\n",
      "170                      0              0                         1   \n",
      "187                      0              0                         0   \n",
      "849                      0              0                         0   \n",
      "433                      0              0                         0   \n",
      "651                      0              0                         0   \n",
      "..                     ...            ...                       ...   \n",
      "838                      0              0                         0   \n",
      "192                      0              0                         0   \n",
      "630                      0              1                         0   \n",
      "560                      0              0                         0   \n",
      "686                      0              0                         0   \n",
      "\n",
      "     age_group_teenager  age_group_toddler  \n",
      "170                   0                  0  \n",
      "187                   0                  0  \n",
      "849                   0                  0  \n",
      "433                   1                  0  \n",
      "651                   1                  0  \n",
      "..                  ...                ...  \n",
      "838                   0                  0  \n",
      "192                   0                  0  \n",
      "630                   0                  0  \n",
      "560                   0                  0  \n",
      "686                   1                  0  \n",
      "\n",
      "[594 rows x 184 columns]\n",
      "******************************\n",
      "           Age  Sex  SibSp  Parch  is_alone  calculated_fare  title_ Master  \\\n",
      "14   14.000000    0      0      0         1          7.85420              0   \n",
      "158  24.819195    1      0      0         1          8.66250              0   \n",
      "765  51.000000    0      1      0         0         38.97915              0   \n",
      "743  24.000000    1      1      0         0          8.05000              0   \n",
      "483  63.000000    0      0      0         1          9.58750              0   \n",
      "..         ...  ...    ...    ...       ...              ...            ...   \n",
      "320  22.000000    1      0      0         1          7.25000              0   \n",
      "522  34.949437    1      0      0         1          7.22500              0   \n",
      "609  40.000000    0      0      0         1        153.46250              0   \n",
      "242  29.000000    1      0      0         1         10.50000              0   \n",
      "453  49.000000    1      1      0         0         44.55210              0   \n",
      "\n",
      "     title_ Miss  title_ Mr  title_ Mrs  ...  fare_group_mid  \\\n",
      "14             1          0           0  ...               0   \n",
      "158            0          1           0  ...               0   \n",
      "765            0          0           1  ...               0   \n",
      "743            0          1           0  ...               0   \n",
      "483            0          0           1  ...               0   \n",
      "..           ...        ...         ...  ...             ...   \n",
      "320            0          1           0  ...               0   \n",
      "522            0          1           0  ...               0   \n",
      "609            1          0           0  ...               0   \n",
      "242            0          1           0  ...               1   \n",
      "453            0          1           0  ...               0   \n",
      "\n",
      "     fare_group_very_high  age_group_adult  age_group_child  age_group_infant  \\\n",
      "14                      0                0                0                 0   \n",
      "158                     0                0                0                 0   \n",
      "765                     0                0                0                 0   \n",
      "743                     0                0                0                 0   \n",
      "483                     0                0                0                 0   \n",
      "..                    ...              ...              ...               ...   \n",
      "320                     0                0                0                 0   \n",
      "522                     0                0                0                 0   \n",
      "609                     1                1                0                 0   \n",
      "242                     0                0                0                 0   \n",
      "453                     0                0                0                 0   \n",
      "\n",
      "     age_group_middle_aged  age_group_old  age_group_senior_citizen  \\\n",
      "14                       0              0                         0   \n",
      "158                      0              0                         0   \n",
      "765                      1              0                         0   \n",
      "743                      0              0                         0   \n",
      "483                      0              0                         1   \n",
      "..                     ...            ...                       ...   \n",
      "320                      0              0                         0   \n",
      "522                      0              0                         0   \n",
      "609                      0              0                         0   \n",
      "242                      0              0                         0   \n",
      "453                      1              0                         0   \n",
      "\n",
      "     age_group_teenager  age_group_toddler  \n",
      "14                    1                  0  \n",
      "158                   0                  0  \n",
      "765                   0                  0  \n",
      "743                   0                  0  \n",
      "483                   0                  0  \n",
      "..                  ...                ...  \n",
      "320                   0                  0  \n",
      "522                   0                  0  \n",
      "609                   0                  0  \n",
      "242                   0                  0  \n",
      "453                   0                  0  \n",
      "\n",
      "[294 rows x 184 columns]\n",
      "******************************\n",
      "170    0\n",
      "187    1\n",
      "849    1\n",
      "433    0\n",
      "651    1\n",
      "      ..\n",
      "838    1\n",
      "192    1\n",
      "630    1\n",
      "560    0\n",
      "686    0\n",
      "Name: Survived, Length: 594, dtype: int64\n",
      "******************************\n",
      "14     0\n",
      "158    0\n",
      "765    1\n",
      "743    0\n",
      "483    1\n",
      "      ..\n",
      "320    0\n",
      "522    0\n",
      "609    1\n",
      "242    0\n",
      "453    1\n",
      "Name: Survived, Length: 294, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(X_train)\n",
    "print('*'*30)\n",
    "print(X_test)\n",
    "print('*'*30)\n",
    "print(y_train)\n",
    "print('*'*30)\n",
    "print(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>is_alone</th>\n",
       "      <th>calculated_fare</th>\n",
       "      <th>title_ Master</th>\n",
       "      <th>title_ Miss</th>\n",
       "      <th>title_ Mr</th>\n",
       "      <th>...</th>\n",
       "      <th>fare_group_mid</th>\n",
       "      <th>fare_group_very_high</th>\n",
       "      <th>age_group_adult</th>\n",
       "      <th>age_group_child</th>\n",
       "      <th>age_group_infant</th>\n",
       "      <th>age_group_middle_aged</th>\n",
       "      <th>age_group_old</th>\n",
       "      <th>age_group_senior_citizen</th>\n",
       "      <th>age_group_teenager</th>\n",
       "      <th>age_group_toddler</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>439</th>\n",
       "      <td>0</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>441</th>\n",
       "      <td>0</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>820</th>\n",
       "      <td>1</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>31.166667</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0</td>\n",
       "      <td>23.604136</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.225000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>561</th>\n",
       "      <td>0</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.895800</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 185 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Survived        Age  Sex  SibSp  Parch  is_alone  calculated_fare  \\\n",
       "439         0  31.000000    1      0      0         1        10.500000   \n",
       "441         0  20.000000    1      0      0         1         9.500000   \n",
       "820         1  52.000000    0      1      1         0        31.166667   \n",
       "26          0  23.604136    1      0      0         1         7.225000   \n",
       "561         0  40.000000    1      0      0         1         7.895800   \n",
       "\n",
       "     title_ Master  title_ Miss  title_ Mr  ...  fare_group_mid  \\\n",
       "439              0            0          1  ...               1   \n",
       "441              0            0          1  ...               0   \n",
       "820              0            0          0  ...               0   \n",
       "26               0            0          1  ...               0   \n",
       "561              0            0          1  ...               0   \n",
       "\n",
       "     fare_group_very_high  age_group_adult  age_group_child  age_group_infant  \\\n",
       "439                     0                0                0                 0   \n",
       "441                     0                0                0                 0   \n",
       "820                     0                0                0                 0   \n",
       "26                      0                0                0                 0   \n",
       "561                     0                1                0                 0   \n",
       "\n",
       "     age_group_middle_aged  age_group_old  age_group_senior_citizen  \\\n",
       "439                      0              0                         0   \n",
       "441                      0              0                         0   \n",
       "820                      1              0                         0   \n",
       "26                       0              0                         0   \n",
       "561                      0              0                         0   \n",
       "\n",
       "     age_group_teenager  age_group_toddler  \n",
       "439                   0                  0  \n",
       "441                   0                  0  \n",
       "820                   0                  0  \n",
       "26                    0                  0  \n",
       "561                   0                  0  \n",
       "\n",
       "[5 rows x 185 columns]"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "headers=X_train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "sc = StandardScaler()\n",
    "\n",
    "## transforming \"train_x\"\n",
    "X_train = sc.fit_transform(X_train)\n",
    "## transforming \"test_x\"\n",
    "X_test = sc.transform(X_test)\n",
    "\n",
    "## transforming \"The testset\"\n",
    "test = sc.fit_transform(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>is_alone</th>\n",
       "      <th>calculated_fare</th>\n",
       "      <th>title_ Master</th>\n",
       "      <th>title_ Miss</th>\n",
       "      <th>title_ Mr</th>\n",
       "      <th>title_ Mrs</th>\n",
       "      <th>...</th>\n",
       "      <th>fare_group_mid</th>\n",
       "      <th>fare_group_very_high</th>\n",
       "      <th>age_group_adult</th>\n",
       "      <th>age_group_child</th>\n",
       "      <th>age_group_infant</th>\n",
       "      <th>age_group_middle_aged</th>\n",
       "      <th>age_group_old</th>\n",
       "      <th>age_group_senior_citizen</th>\n",
       "      <th>age_group_teenager</th>\n",
       "      <th>age_group_toddler</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.257398</td>\n",
       "      <td>0.725942</td>\n",
       "      <td>-0.464750</td>\n",
       "      <td>-0.463616</td>\n",
       "      <td>0.794901</td>\n",
       "      <td>0.554725</td>\n",
       "      <td>-0.230633</td>\n",
       "      <td>-0.521487</td>\n",
       "      <td>0.837858</td>\n",
       "      <td>-0.383038</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.455321</td>\n",
       "      <td>-0.30317</td>\n",
       "      <td>-0.449921</td>\n",
       "      <td>-0.250224</td>\n",
       "      <td>-0.116841</td>\n",
       "      <td>-0.30317</td>\n",
       "      <td>-0.101015</td>\n",
       "      <td>5.099020</td>\n",
       "      <td>-0.293127</td>\n",
       "      <td>-0.196116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.115732</td>\n",
       "      <td>0.725942</td>\n",
       "      <td>-0.464750</td>\n",
       "      <td>-0.463616</td>\n",
       "      <td>0.794901</td>\n",
       "      <td>0.292298</td>\n",
       "      <td>-0.230633</td>\n",
       "      <td>-0.521487</td>\n",
       "      <td>0.837858</td>\n",
       "      <td>-0.383038</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.455321</td>\n",
       "      <td>-0.30317</td>\n",
       "      <td>2.222611</td>\n",
       "      <td>-0.250224</td>\n",
       "      <td>-0.116841</td>\n",
       "      <td>-0.30317</td>\n",
       "      <td>-0.101015</td>\n",
       "      <td>-0.196116</td>\n",
       "      <td>-0.293127</td>\n",
       "      <td>-0.196116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.104315</td>\n",
       "      <td>-1.377520</td>\n",
       "      <td>0.356862</td>\n",
       "      <td>-0.463616</td>\n",
       "      <td>-1.258018</td>\n",
       "      <td>0.972044</td>\n",
       "      <td>-0.230633</td>\n",
       "      <td>-0.521487</td>\n",
       "      <td>-1.193520</td>\n",
       "      <td>2.610707</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.455321</td>\n",
       "      <td>-0.30317</td>\n",
       "      <td>2.222611</td>\n",
       "      <td>-0.250224</td>\n",
       "      <td>-0.116841</td>\n",
       "      <td>-0.30317</td>\n",
       "      <td>-0.101015</td>\n",
       "      <td>-0.196116</td>\n",
       "      <td>-0.293127</td>\n",
       "      <td>-0.196116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.882184</td>\n",
       "      <td>0.725942</td>\n",
       "      <td>-0.464750</td>\n",
       "      <td>-0.463616</td>\n",
       "      <td>0.794901</td>\n",
       "      <td>-0.441176</td>\n",
       "      <td>-0.230633</td>\n",
       "      <td>-0.521487</td>\n",
       "      <td>0.837858</td>\n",
       "      <td>-0.383038</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.455321</td>\n",
       "      <td>-0.30317</td>\n",
       "      <td>-0.449921</td>\n",
       "      <td>-0.250224</td>\n",
       "      <td>-0.116841</td>\n",
       "      <td>-0.30317</td>\n",
       "      <td>-0.101015</td>\n",
       "      <td>-0.196116</td>\n",
       "      <td>3.411495</td>\n",
       "      <td>-0.196116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.810830</td>\n",
       "      <td>-1.377520</td>\n",
       "      <td>-0.464750</td>\n",
       "      <td>0.703282</td>\n",
       "      <td>-1.258018</td>\n",
       "      <td>-0.275979</td>\n",
       "      <td>-0.230633</td>\n",
       "      <td>1.917594</td>\n",
       "      <td>-1.193520</td>\n",
       "      <td>-0.383038</td>\n",
       "      <td>...</td>\n",
       "      <td>2.196253</td>\n",
       "      <td>-0.30317</td>\n",
       "      <td>-0.449921</td>\n",
       "      <td>-0.250224</td>\n",
       "      <td>-0.116841</td>\n",
       "      <td>-0.30317</td>\n",
       "      <td>-0.101015</td>\n",
       "      <td>-0.196116</td>\n",
       "      <td>3.411495</td>\n",
       "      <td>-0.196116</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 184 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Age       Sex     SibSp     Parch  is_alone  calculated_fare  \\\n",
       "0  2.257398  0.725942 -0.464750 -0.463616  0.794901         0.554725   \n",
       "1  1.115732  0.725942 -0.464750 -0.463616  0.794901         0.292298   \n",
       "2  1.104315 -1.377520  0.356862 -0.463616 -1.258018         0.972044   \n",
       "3 -0.882184  0.725942 -0.464750 -0.463616  0.794901        -0.441176   \n",
       "4 -0.810830 -1.377520 -0.464750  0.703282 -1.258018        -0.275979   \n",
       "\n",
       "   title_ Master  title_ Miss  title_ Mr  title_ Mrs  ...  fare_group_mid  \\\n",
       "0      -0.230633    -0.521487   0.837858   -0.383038  ...       -0.455321   \n",
       "1      -0.230633    -0.521487   0.837858   -0.383038  ...       -0.455321   \n",
       "2      -0.230633    -0.521487  -1.193520    2.610707  ...       -0.455321   \n",
       "3      -0.230633    -0.521487   0.837858   -0.383038  ...       -0.455321   \n",
       "4      -0.230633     1.917594  -1.193520   -0.383038  ...        2.196253   \n",
       "\n",
       "   fare_group_very_high  age_group_adult  age_group_child  age_group_infant  \\\n",
       "0              -0.30317        -0.449921        -0.250224         -0.116841   \n",
       "1              -0.30317         2.222611        -0.250224         -0.116841   \n",
       "2              -0.30317         2.222611        -0.250224         -0.116841   \n",
       "3              -0.30317        -0.449921        -0.250224         -0.116841   \n",
       "4              -0.30317        -0.449921        -0.250224         -0.116841   \n",
       "\n",
       "   age_group_middle_aged  age_group_old  age_group_senior_citizen  \\\n",
       "0               -0.30317      -0.101015                  5.099020   \n",
       "1               -0.30317      -0.101015                 -0.196116   \n",
       "2               -0.30317      -0.101015                 -0.196116   \n",
       "3               -0.30317      -0.101015                 -0.196116   \n",
       "4               -0.30317      -0.101015                 -0.196116   \n",
       "\n",
       "   age_group_teenager  age_group_toddler  \n",
       "0           -0.293127          -0.196116  \n",
       "1           -0.293127          -0.196116  \n",
       "2           -0.293127          -0.196116  \n",
       "3            3.411495          -0.196116  \n",
       "4            3.411495          -0.196116  \n",
       "\n",
       "[5 rows x 184 columns]"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(X_train, columns=headers).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "train.calculated_fare = train.calculated_fare.astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplots(figsize = (12,10))\n",
    "plt.scatter(train.Age, train.Survived);\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel('Survival Status');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "So, Our accuracy Score is: 0.7891\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import mean_absolute_error, accuracy_score\n",
    "\n",
    "## call on the model object\n",
    "logreg = LogisticRegression(solver='liblinear')\n",
    "\n",
    "## fit the model with \"train_x\" and \"train_y\"\n",
    "logreg.fit(X_train,y_train)\n",
    "\n",
    "## Once the model is trained we want to find out how well the model is performing, so we test the model. \n",
    "## we use \"test_x\" portion of the data(this data was not used to fit the model) to predict model outcome. \n",
    "y_pred = logreg.predict(X_test)\n",
    "\n",
    "## Once predicted we save that outcome in \"y_pred\" variable.\n",
    "## Then we compare the predicted value( \"y_pred\") and actual value(\"test_y\") to see how well our model is performing. \n",
    "\n",
    "print (\"So, Our accuracy Score is: {}\".format(round(accuracy_score(y_pred, y_test),4)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[150  27]\n",
      " [ 35  82]]\n",
      "Normalized confusion matrix\n",
      "[[0.85 0.15]\n",
      " [0.3  0.7 ]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.utils.multiclass import unique_labels\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "\n",
    "def plot_confusion_matrix(y_true, y_pred, classes,\n",
    "                          normalize=False,\n",
    "                          title=None,\n",
    "                          cmap=plt.cm.Blues):\n",
    "    \"\"\"\n",
    "    This function prints and plots the confusion matrix.\n",
    "    Normalization can be applied by setting `normalize=True`.\n",
    "    \"\"\"\n",
    "    if not title:\n",
    "        if normalize:\n",
    "            title = 'Normalized confusion matrix'\n",
    "        else:\n",
    "            title = 'Confusion matrix, without normalization'\n",
    "\n",
    "    # Compute confusion matrix\n",
    "    cm = confusion_matrix(y_true, y_pred)\n",
    "    # Only use the labels that appear in the data\n",
    "    classes = classes[unique_labels(y_true, y_pred)]\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "        print(\"Normalized confusion matrix\")\n",
    "    else:\n",
    "        print('Confusion matrix, without normalization')\n",
    "\n",
    "    print(cm)\n",
    "\n",
    "    fig, ax = plt.subplots()\n",
    "    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    ax.figure.colorbar(im, ax=ax)\n",
    "    # We want to show all ticks...\n",
    "    ax.set(xticks=np.arange(cm.shape[1]),\n",
    "           yticks=np.arange(cm.shape[0]),\n",
    "           # ... and label them with the respective list entries\n",
    "           xticklabels=classes, yticklabels=classes,\n",
    "           title=title,\n",
    "           ylabel='True label',\n",
    "           xlabel='Predicted label')\n",
    "\n",
    "    # Rotate the tick labels and set their alignment.\n",
    "    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n",
    "             rotation_mode=\"anchor\")\n",
    "\n",
    "    # Loop over data dimensions and create text annotations.\n",
    "    fmt = '.2f' if normalize else 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i in range(cm.shape[0]):\n",
    "        for j in range(cm.shape[1]):\n",
    "            ax.text(j, i, format(cm[i, j], fmt),\n",
    "                    ha=\"center\", va=\"center\",\n",
    "                    color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "    fig.tight_layout()\n",
    "    return ax\n",
    "\n",
    "\n",
    "np.set_printoptions(precision=2)\n",
    "\n",
    "class_names = np.array(['not_survived','survived'])\n",
    "\n",
    "# Plot non-normalized confusion matrix\n",
    "plot_confusion_matrix(y_test, y_pred, classes=class_names,\n",
    "                      title='Confusion matrix, without normalization')\n",
    "\n",
    "# Plot normalized confusion matrix\n",
    "plot_confusion_matrix(y_test, y_pred, classes=class_names, normalize=True,\n",
    "                      title='Normalized confusion matrix')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.85      0.83       177\n",
      "           1       0.75      0.70      0.73       117\n",
      "\n",
      "    accuracy                           0.79       294\n",
      "   macro avg       0.78      0.77      0.78       294\n",
      "weighted avg       0.79      0.79      0.79       294\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8178086822154619\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x648 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve, auc\n",
    "#plt.style.use('seaborn-pastel')\n",
    "y_score = logreg.decision_function(X_test)\n",
    "\n",
    "FPR, TPR, _ = roc_curve(y_test, y_score)\n",
    "ROC_AUC = auc(FPR, TPR)\n",
    "print (ROC_AUC)\n",
    "\n",
    "plt.figure(figsize =[11,9])\n",
    "plt.plot(FPR, TPR, label= 'ROC curve(area = %0.2f)'%ROC_AUC, linewidth= 4)\n",
    "plt.plot([0,1],[0,1], 'k--', linewidth = 4)\n",
    "plt.xlim([0.0,1.0])\n",
    "plt.ylim([0.0,1.05])\n",
    "plt.xlabel('False Positive Rate', fontsize = 18)\n",
    "plt.ylabel('True Positive Rate', fontsize = 18)\n",
    "plt.title('ROC for Titanic survivors', fontsize= 18)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x648 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import precision_recall_curve\n",
    "\n",
    "y_score = logreg.decision_function(X_test)\n",
    "\n",
    "precision, recall, _ = precision_recall_curve(y_test, y_score)\n",
    "PR_AUC = auc(recall, precision)\n",
    "\n",
    "plt.figure(figsize=[11,9])\n",
    "plt.plot(recall, precision, label='PR curve (area = %0.2f)' % PR_AUC, linewidth=4)\n",
    "plt.xlabel('Recall', fontsize=18)\n",
    "plt.ylabel('Precision', fontsize=18)\n",
    "plt.title('Precision Recall Curve for Titanic survivors', fontsize=18)\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-Validation accuracy scores:[0.81 0.81 0.81 0.81 0.85 0.82 0.8  0.86 0.79 0.78]\n",
      "Mean Cross-Validation accuracy score: 0.81216\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import StratifiedShuffleSplit, cross_val_score\n",
    "cv = StratifiedShuffleSplit(n_splits = 10, test_size = .25, random_state = 0 ) # run model 10x with 60/30 split intentionally leaving out 10%\n",
    "## Using standard scale for the whole dataset.\n",
    "\n",
    "## saving the feature names for decision tree display\n",
    "column_names = X.columns\n",
    "\n",
    "X = sc.fit_transform(X)\n",
    "accuracies = cross_val_score(LogisticRegression(solver='liblinear'), X,y, cv  = cv)\n",
    "print (\"Cross-Validation accuracy scores:{}\".format(accuracies))\n",
    "print (\"Mean Cross-Validation accuracy score: {}\".format(round(accuracies.mean(),5)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mohammadawais/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=StratifiedShuffleSplit(n_splits=10, random_state=None, test_size=0.25,\n",
       "            train_size=None),\n",
       "             error_score='raise-deprecating',\n",
       "             estimator=LogisticRegression(C=1.0, class_weight=None, dual=False,\n",
       "                                          fit_intercept=True,\n",
       "                                          intercept_scaling=1, l1_ratio=None,\n",
       "                                          max_iter=100, multi_class='warn',\n",
       "                                          n_jobs=None, penalty='l2',\n",
       "                                          random_state=None, solver='warn',\n",
       "                                          tol=0.0001, verbose=0,\n",
       "                                          warm_start=False),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'C': [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 2, 3,\n",
       "                               4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 16.5,\n",
       "                               17, 17.5, 18],\n",
       "                         'penalty': ['l1', 'l2']},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring='accuracy', verbose=0)"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV, StratifiedKFold\n",
    "## C_vals is the alpla value of lasso and ridge regression(as alpha increases the model complexity decreases,)\n",
    "## remember effective alpha scores are 0<alpha<infinity \n",
    "C_vals = [0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,16.5,17,17.5,18]\n",
    "## Choosing penalties(Lasso(l1) or Ridge(l2))\n",
    "penalties = ['l1','l2']\n",
    "## Choose a cross validation strategy. \n",
    "cv = StratifiedShuffleSplit(n_splits = 10, test_size = .25)\n",
    "\n",
    "## setting param for param_grid in GridSearchCV. \n",
    "param = {'penalty': penalties, 'C': C_vals}\n",
    "\n",
    "logreg = LogisticRegression(solver='liblinear')\n",
    "## Calling on GridSearchCV object. \n",
    "grid = GridSearchCV(estimator=LogisticRegression(), \n",
    "                           param_grid = param,\n",
    "                           scoring = 'accuracy',\n",
    "                            n_jobs =-1,\n",
    "                           cv = cv\n",
    "                          )\n",
    "## Fitting the model\n",
    "grid.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8207207207207208\n",
      "{'C': 0.2, 'penalty': 'l1'}\n",
      "LogisticRegression(C=0.2, class_weight=None, dual=False, fit_intercept=True,\n",
      "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
      "                   multi_class='warn', n_jobs=None, penalty='l1',\n",
      "                   random_state=None, solver='warn', tol=0.0001, verbose=0,\n",
      "                   warm_start=False)\n"
     ]
    }
   ],
   "source": [
    "print (grid.best_score_)\n",
    "print (grid.best_params_)\n",
    "print(grid.best_estimator_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8795045045045045"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg_grid = grid.best_estimator_\n",
    "logreg_grid.score(X,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# K-Nearest Neighbor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-Validation accuracy scores:[0.78 0.77 0.77 0.79 0.78 0.81 0.78 0.81 0.77 0.83]\n",
      "Mean Cross-Validation accuracy score: 0.789\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "## calling on the model oject. \n",
    "knn = KNeighborsClassifier(metric='minkowski', p=2)\n",
    "## knn classifier works by doing euclidian distance \n",
    "\n",
    "\n",
    "## doing 10 fold staratified-shuffle-split cross validation \n",
    "cv = StratifiedShuffleSplit(n_splits=10, test_size=.25, random_state=2)\n",
    "\n",
    "accuracies = cross_val_score(knn, X,y, cv = cv, scoring='accuracy')\n",
    "print (\"Cross-Validation accuracy scores:{}\".format(accuracies))\n",
    "print (\"Mean Cross-Validation accuracy score: {}\".format(round(accuracies.mean(),3)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy scores are: [0.7617117117117116, 0.7644144144144145, 0.7842342342342343, 0.7765765765765766, 0.7887387387387387, 0.7788288288288289, 0.7842342342342341, 0.7783783783783784, 0.7891891891891892, 0.7824324324324323, 0.7914414414414415, 0.7846846846846847, 0.7914414414414415, 0.7792792792792792, 0.7905405405405406, 0.7711711711711711, 0.7851351351351351, 0.7702702702702703, 0.7797297297297298, 0.7594594594594595, 0.7657657657657657, 0.7545045045045045, 0.7608108108108108, 0.740990990990991, 0.7481981981981982, 0.7337837837837837, 0.7400900900900901, 0.7373873873873873, 0.7427927927927928, 0.736936936936937]\n",
      "\n",
      "Mean accuracy score: 0.7684384384384385\n"
     ]
    }
   ],
   "source": [
    "## Search for an optimal value of k for KNN.\n",
    "k_range = range(1,31)\n",
    "k_scores = []\n",
    "for k in k_range:\n",
    "    knn = KNeighborsClassifier(n_neighbors=k)\n",
    "    scores = cross_val_score(knn, X,y, cv = cv, scoring = 'accuracy')\n",
    "    k_scores.append(scores.mean())\n",
    "print(\"Accuracy scores are: {}\\n\".format(k_scores))\n",
    "print (\"Mean accuracy score: {}\".format(np.mean(k_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a16b378d0>]"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "plt.plot(k_range, k_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=StratifiedShuffleSplit(n_splits=10, random_state=15, test_size=0.3,\n",
       "            train_size=None),\n",
       "             error_score='raise-deprecating',\n",
       "             estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30,\n",
       "                                            metric='minkowski',\n",
       "                                            metric_params=None, n_jobs=None,\n",
       "                                            n_neighbors=5, p=2,\n",
       "                                            weights='uniform'),\n",
       "             iid='warn', n_jobs=-1,\n",
       "             param_grid={'n_neighbors': range(1, 31),\n",
       "                         'weights': ['uniform', 'distance']},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=False)"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "## trying out multiple values for k\n",
    "k_range = range(1,31)\n",
    "## \n",
    "weights_options=['uniform','distance']\n",
    "# \n",
    "param = {'n_neighbors':k_range, 'weights':weights_options}\n",
    "## Using startifiedShufflesplit. \n",
    "cv = StratifiedShuffleSplit(n_splits=10, test_size=.30, random_state=15)\n",
    "# estimator = knn, param_grid = param, n_jobs = -1 to instruct scikit learn to use all available processors. \n",
    "grid = GridSearchCV(KNeighborsClassifier(), param,cv=cv,verbose = False, n_jobs=-1)\n",
    "## Fitting the model. \n",
    "grid.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7943820224719101\n",
      "{'n_neighbors': 7, 'weights': 'uniform'}\n",
      "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
      "                     metric_params=None, n_jobs=None, n_neighbors=7, p=2,\n",
      "                     weights='uniform')\n"
     ]
    }
   ],
   "source": [
    "print (grid.best_score_)\n",
    "print (grid.best_params_)\n",
    "print(grid.best_estimator_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8423423423423423"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_grid= grid.best_estimator_\n",
    "knn_grid.score(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv=StratifiedShuffleSplit(n_splits=10, random_state=None, test_size=0.3,\n",
       "            train_size=None),\n",
       "                   error_score='raise-deprecating',\n",
       "                   estimator=KNeighborsClassifier(algorithm='auto',\n",
       "                                                  leaf_size=30,\n",
       "                                                  metric='minkowski',\n",
       "                                                  metric_params=None,\n",
       "                                                  n_jobs=None, n_neighbors=5,\n",
       "                                                  p=2, weights='uniform'),\n",
       "                   iid='warn', n_iter=40, n_jobs=-1,\n",
       "                   param_distributions={'n_neighbors': range(1, 31),\n",
       "                                        'weights': ['uniform', 'distance']},\n",
       "                   pre_dispatch='2*n_jobs', random_state=None, refit=True,\n",
       "                   return_train_score=False, scoring=None, verbose=False)"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "## trying out multiple values for k\n",
    "k_range = range(1,31)\n",
    "## \n",
    "weights_options=['uniform','distance']\n",
    "# \n",
    "param = {'n_neighbors':k_range, 'weights':weights_options}\n",
    "## Using startifiedShufflesplit. \n",
    "cv = StratifiedShuffleSplit(n_splits=10, test_size=.30)\n",
    "# estimator = knn, param_grid = param, n_jobs = -1 to instruct scikit learn to use all available processors. \n",
    "## for RandomizedSearchCV, \n",
    "grid = RandomizedSearchCV(KNeighborsClassifier(), param,cv=cv,verbose = False, n_jobs=-1, n_iter=40)\n",
    "## Fitting the model. \n",
    "grid.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7902621722846442\n",
      "{'weights': 'uniform', 'n_neighbors': 5}\n",
      "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
      "                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
      "                     weights='uniform')\n"
     ]
    }
   ],
   "source": [
    "print (grid.best_score_)\n",
    "print (grid.best_params_)\n",
    "print(grid.best_estimator_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8536036036036037"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_ran_grid = grid.best_estimator_\n",
    "knn_ran_grid.score(X,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gaussian Naive Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.452\n"
     ]
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "gaussian = GaussianNB()\n",
    "gaussian.fit(X, y)\n",
    "y_pred = gaussian.predict(X_test)\n",
    "gaussian_accy = round(accuracy_score(y_pred, y_test), 3)\n",
    "print(gaussian_accy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Support Vector Machine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=StratifiedShuffleSplit(n_splits=10, random_state=15, test_size=0.3,\n",
       "            train_size=None),\n",
       "             error_score='raise-deprecating',\n",
       "             estimator=SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n",
       "                           decision_function_shape='ovr', degree=3,\n",
       "                           gamma='auto_deprecated', kernel='rbf', max_iter=-1,\n",
       "                           probability=True, random_state=None, shrinking=True,\n",
       "                           tol=0.001, verbose=False),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'C': [0.001, 0.01, 0.1, 1, 1.5, 2, 2.5, 3, 4, 5, 10],\n",
       "                         'gamma': [0.0001, 0.001, 0.01, 0.1, 1]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "Cs = [0.001, 0.01, 0.1, 1,1.5,2,2.5,3,4,5, 10] ## penalty parameter C for the error term. \n",
    "gammas = [0.0001,0.001, 0.01, 0.1, 1]\n",
    "param_grid = {'C': Cs, 'gamma' : gammas}\n",
    "cv = StratifiedShuffleSplit(n_splits=10, test_size=.30, random_state=15)\n",
    "grid_search = GridSearchCV(SVC(kernel = 'rbf', probability=True), param_grid, cv=cv) ## 'rbf' stands for gaussian kernel\n",
    "grid_search.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
